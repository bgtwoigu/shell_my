From f72e1ae96f54a5c10486e6e7fdc222132bc91a78 Mon Sep 17 00:00:00 2001
From: "haolong.zhang" <haolong.zhang@ck-telecom.com>
Date: Mon, 18 May 2015 15:29:38 +0800
Subject: [PATCH] audio_olny

Change-Id: I0b989c6361e842afec1790701fd30a4861d10df7
---
 .../soc/mediatek/mt_soc_audio_v1/AudDrv_Common.h   |   1 +
 .../mediatek/mt_soc_audio_v1/mt_soc_afe_control.c  | 392 +++++++++----
 .../mediatek/mt_soc_audio_v1/mt_soc_afe_control.h  |   2 -
 .../mediatek/mt_soc_audio_v1/mt_soc_codec_63xx.c   | 631 +++++++++++----------
 .../mediatek/mt_soc_audio_v1/mt_soc_pcm_capture2.c |  98 ++--
 .../mediatek/mt_soc_audio_v1/mt_soc_pcm_common.h   |   4 +-
 .../mediatek/mt_soc_audio_v1/mt_soc_pcm_dl1_i2s0.c |  31 +-
 .../soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_hdmi.c |  22 +-
 .../mediatek/mt_soc_audio_v1/mt_soc_pcm_routing.c  |  59 +-
 .../mt_soc_audio_v1/mt_soc_pcm_uldlloopback.c      |  15 +-
 .../mediatek/mt_soc_audio_v1/mt_soc_pcm_voice_bt.c |   2 +-
 11 files changed, 765 insertions(+), 492 deletions(-)

diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/AudDrv_Common.h b/kernel/sound/soc/mediatek/mt_soc_audio_v1/AudDrv_Common.h
index f1eecdb..13a9006 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/AudDrv_Common.h
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/AudDrv_Common.h
@@ -82,6 +82,7 @@ typedef struct
    AFE_BLOCK_T    rBlock;
    kal_uint32   MemIfNum;
    bool interruptTrigger;
+   spinlock_t substream_lock;
 } AFE_MEM_CONTROL_T;
 
 struct pcm_afe_info
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_afe_control.c b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_afe_control.c
index 7fa384a..3c2a636 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_afe_control.c
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_afe_control.c
@@ -117,7 +117,6 @@
 
 static DEFINE_SPINLOCK(afe_control_lock);
 static DEFINE_SPINLOCK(afe_sram_control_lock);
-static DEFINE_SPINLOCK(afe_mem_lock);
 static DEFINE_MUTEX(Apll_mutex);
 
 
@@ -190,6 +189,8 @@ static const uint16_t kSideToneCoefficientTable32k[] =
  *    function implementation
  */
 static irqreturn_t AudDrv_IRQ_handler(int irq, void *dev_id);
+void Clear_Mem_CopySize(Soc_Aud_Digital_Block MemBlock);
+kal_uint32 Get_Mem_MaxCopySize(Soc_Aud_Digital_Block MemBlock);
 
 static bool CheckSize(uint32 size)
 {
@@ -221,16 +222,6 @@ void AfeControlSramUnLock(void)
     spin_unlock(&afe_sram_control_lock);
 }
 
-static unsigned int afecontrolMenflags =0;
-void AfeControlMemLock(void)
-{
-    spin_lock_irqsave(&afe_mem_lock,afecontrolMenflags);
-}
-
-void AfeControlMemUnLock(void)
-{
-    spin_unlock_irqrestore(&afe_mem_lock,afecontrolMenflags);
-}
 
 unsigned int GetSramState(void)
 {
@@ -431,6 +422,7 @@ bool InitAfeControl(void)
         {
             AFE_Mem_Control_context[i]  = kzalloc(sizeof(AFE_MEM_CONTROL_T), GFP_KERNEL);
             AFE_Mem_Control_context[i]->substreamL = NULL;
+            spin_lock_init(&AFE_Mem_Control_context[i]->substream_lock);
         }
         for (i = 0; i <=  Soc_Aud_Digital_Block_MEM_HDMI ; i ++)
         {
@@ -626,7 +618,7 @@ void SetckSel(uint32 I2snum, uint32 SampleRate)
             break;
         case Soc_Aud_I2S3:
             SetClkCfg(AUDIO_CLK_AUDDIV_0, ApllSource << 7, 1 << 7);
-            SetClkCfg(AUDIO_CLK_AUDDIV_0, ApllSource << 8, 1 << 7);
+            SetClkCfg(AUDIO_CLK_AUDDIV_0, ApllSource << 8, 1 << 8);
             break;
     }
     printk("%s ApllSource = %d \n", __func__, ApllSource);
@@ -751,7 +743,7 @@ void EnableApll2(bool bEnable)
     }
     else if((bEnable == false) && (APLL2State == true))
     {
-        enable_mux(MT_MUX_AUD2, "AUDIO");
+        disable_mux(MT_MUX_AUD2, "AUDIO");
         AudDrv_APLL24M_Clk_Off();
         SetClkCfg(AUDIO_CLK_AUDDIV_0, 0xc, 0xc);
         SetClkCfg(AUDIO_CLK_AUDDIV_0, 0x70000000, 0xf0000000);
@@ -793,7 +785,7 @@ void EnableAfe(bool bEnable)
     MemEnable = CheckMemIfEnable();
     if (false == bEnable && false == MemEnable)
     {
-        Afe_Set_Reg(AFE_DAC_CON0, 0x0, 0x1);
+        Afe_Set_Reg(AFE_DAC_CON0, 0x0, 0x0); // TODO(Chipeng, Harvey): check open/close in pairs
         mt_set_gpio_mode(GPIO_AUD_CLK_MOSI_PIN , GPIO_MODE_00);
     }
     else if (true == bEnable && true == MemEnable)
@@ -826,11 +818,11 @@ uint32 SampleRateTransform(uint32 SampleRate)
             return Soc_Aud_I2S_SAMPLERATE_I2S_44K;
         case 48000:
             return Soc_Aud_I2S_SAMPLERATE_I2S_48K;
-        case 88000:
+        case 88200:
             return Soc_Aud_I2S_SAMPLERATE_I2S_88K;
         case 96000:
             return Soc_Aud_I2S_SAMPLERATE_I2S_96K;
-        case 174000:
+        case 176400:
             return Soc_Aud_I2S_SAMPLERATE_I2S_174K;
         case 192000:
             return Soc_Aud_I2S_SAMPLERATE_I2S_192K;
@@ -1953,16 +1945,22 @@ bool SetHDMIConnection(uint32 ConnectionState, uint32 Input , uint32 Output)
             break;
         case Soc_Aud_InterConnectionOutput_O31:
             Afe_Set_Reg(AFE_HDMI_CONN0, (Input << 3), (0x0007 << 3));
+            break;
         case Soc_Aud_InterConnectionOutput_O32:
             Afe_Set_Reg(AFE_HDMI_CONN0, (Input << 6), (0x0007 << 6));
+            break;
         case Soc_Aud_InterConnectionOutput_O33:
             Afe_Set_Reg(AFE_HDMI_CONN0, (Input << 9), (0x0007 << 9));
+            break;
         case Soc_Aud_InterConnectionOutput_O34:
             Afe_Set_Reg(AFE_HDMI_CONN0, (Input << 12), (0x0007 << 12));
+            break;
         case Soc_Aud_InterConnectionOutput_O35:
             Afe_Set_Reg(AFE_HDMI_CONN0, (Input << 15), (0x0007 << 15));
+            break;
         case Soc_Aud_InterConnectionOutput_O36:
             Afe_Set_Reg(AFE_HDMI_CONN0, (Input << 18), (0x0007 << 18));
+            break;
         case Soc_Aud_InterConnectionOutput_O37:
             Afe_Set_Reg(AFE_HDMI_CONN0, (Input << 21), (0x0007 << 21));
             break;
@@ -2712,10 +2710,12 @@ AFE_MEM_CONTROL_T  *Get_Mem_ControlT(Soc_Aud_Digital_Block MemBlock)
 
 bool SetMemifSubStream(Soc_Aud_Digital_Block MemBlock , struct snd_pcm_substream *substream)
 {
-    substreamList *head = AFE_Mem_Control_context[MemBlock]->substreamL;
+    substreamList *head;
     substreamList *temp = NULL;
+    unsigned long flags;
     printk("+%s MemBlock = %d substream = %p \n ", __func__, MemBlock, substream);
-    AfeControlMemLock();
+    spin_lock_irqsave(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
+    head = AFE_Mem_Control_context[MemBlock]->substreamL;
     if (head == NULL) // frst item is NULL
     {
         //printk("%s head == NULL\n ", __func__);
@@ -2728,15 +2728,18 @@ bool SetMemifSubStream(Soc_Aud_Digital_Block MemBlock , struct snd_pcm_substream
     {
         while (head->next != NULL)
         {
-            head = head->next;
+            head = (substreamList *)head->next;
         }
         // head->next is NULL
         temp = kzalloc(sizeof(substreamList), GFP_ATOMIC);
         temp->substream = substream;
         temp->next = NULL;
-        head->next = temp;
+        head->next = (struct substreamList *)temp;
     }
-    AfeControlMemUnLock();
+
+    AFE_Mem_Control_context[MemBlock]->MemIfNum++;
+
+    spin_unlock_irqrestore(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
     printk("-%s MemBlock = %d \n ", __func__, MemBlock);
     //DumpMemifSubStream();
     return true;
@@ -2764,58 +2767,72 @@ bool ClearMemBlock(Soc_Aud_Digital_Block MemBlock)
 
 bool RemoveMemifSubStream(Soc_Aud_Digital_Block MemBlock, struct snd_pcm_substream *substream)
 {
-    AfeControlMemLock();
-    substreamList *head = AFE_Mem_Control_context[MemBlock]->substreamL;
+    substreamList *head = NULL;
     substreamList *temp = NULL;
-    printk("+ %s MemBlock = %d substream = %p \n ", __func__, MemBlock,substream);
+    unsigned long flags;
+    spin_lock_irqsave(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
+
+    if (AFE_Mem_Control_context[MemBlock]->MemIfNum == 0)
+    {
+        printk("%s AFE_Mem_Control_context[%d]->MemIfNum == 0 \n ", __func__, MemBlock);
+    }
+    else
+    {
+        AFE_Mem_Control_context[MemBlock]->MemIfNum--;
+    }
+
+    head = AFE_Mem_Control_context[MemBlock]->substreamL;
+    printk("+ %s MemBlock = %d substream = %p \n ", __func__, MemBlock, substream);
     if (head == NULL) // no object
     {
-         // do nothing
+        // do nothing
     }
     else
     {
-        // condition for first item hit and ony 1 item
+        // condition for first item hit
         if (head->substream == substream)
         {
             //printk("%s head->substream = %p \n ", __func__, head->substream);
-            AFE_Mem_Control_context[MemBlock]->substreamL = head->next;
-            AfeControlMemUnLock();
+            AFE_Mem_Control_context[MemBlock]->substreamL = (substreamList *)head->next;
+
+            head->substream = NULL;
             kfree(head);
-            DumpMemifSubStream();
-            return true;
+            head = NULL;
+            //DumpMemifSubStream();
         }
-        temp = head;
-        head = head->next;
-        while (head)
+        else
         {
-            if (head->substream == substream)
+            temp = head;
+            head = (substreamList *)head->next;
+            while (head)
             {
-                temp->next = head->next;
-                if (head)
+                if (head->substream == substream)
                 {
+                    temp->next = head->next;
+                    head->substream = NULL;
                     kfree(head);
                     head = NULL;
+                    break;
                 }
-                break;
+                temp = head;
+                head = (substreamList *)head->next;
             }
-            temp = head;
-            head = head->next;
         }
     }
-    AfeControlMemUnLock();
     //DumpMemifSubStream();
 
     if (AFE_Mem_Control_context[MemBlock]->substreamL == NULL)
     {
         ClearMemBlock(MemBlock);
-        return true;
     }
     else
     {
         printk("%s substreram is not NULL MemBlock = %d \n", __func__, MemBlock);
-        return true;
     }
+
+    spin_unlock_irqrestore(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
     printk("- %s MemBlock = %d \n ", __func__, MemBlock);
+    return true;
 }
 
 static unsigned int dl1_flags = 0;
@@ -2832,21 +2849,36 @@ void Auddrv_Dl1_Spinlock_unlock(void)
 static unsigned int ul1_flags = 0;
 void Auddrv_UL1_Spinlock_lock(void)
 {
-    spin_lock_irqsave(&auddrv_ul1_lock, dl1_flags);
+    spin_lock_irqsave(&auddrv_ul1_lock, ul1_flags);
 }
 void Auddrv_UL1_Spinlock_unlock(void)
 {
-    spin_unlock_irqrestore(&auddrv_ul1_lock, dl1_flags);
+    spin_unlock_irqrestore(&auddrv_ul1_lock, ul1_flags);
 }
 
 void Auddrv_HDMI_Interrupt_Handler(void)  // irq5 ISR handler
 {
+    AFE_MEM_CONTROL_T *Mem_Block = AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_HDMI];
     kal_int32 Afe_consumed_bytes = 0;
     kal_int32 HW_memory_index = 0;
     kal_int32 HW_Cur_ReadIdx = 0;
-    substreamList *Temp = NULL;
+    unsigned long flags;
     AFE_BLOCK_T *Afe_Block = &(AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_HDMI]->rBlock);
 
+    if (Mem_Block == NULL)
+    {
+        printk("-%s()Mem_Block == NULL  \n ", __func__);
+        return;
+    }
+
+    spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+    if (GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_HDMI) == false)
+    {
+        //printk("%s(), GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_HDMI) == false, return\n ", __func__);
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+        return;
+    }
+
     HW_Cur_ReadIdx = Afe_Get_Reg(AFE_HDMI_CUR);
     if (HW_Cur_ReadIdx == 0)
     {
@@ -2903,27 +2935,22 @@ void Auddrv_HDMI_Interrupt_Handler(void)  // irq5 ISR handler
                         Afe_Block->u4DMAReadIdx, Afe_Block->u4DataRemained, Afe_Block->u4WriteIdx);
     }
     AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_HDMI]->interruptTrigger = 1 ;
-    Temp = AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_HDMI]->substreamL;
-    if(Temp != NULL)
+
+    if (Mem_Block->substreamL != NULL)
     {
-        snd_pcm_period_elapsed(Temp->substream);
+        if (Mem_Block->substreamL->substream != NULL)
+        {
+            spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+            snd_pcm_period_elapsed(Mem_Block->substreamL->substream);
+            spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+        }
     }
+    spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+
     PRINTK_AUD_HDMI("-[Auddrv_HDMI_Interrupt]4 ReadIdx:%x ,DataRemained:%x, WriteIdx:%x \n",
                     Afe_Block->u4DMAReadIdx, Afe_Block->u4DataRemained, Afe_Block->u4WriteIdx);
 }
 
-static void TraverseAllSubStream(substreamList *Head)
-{
-    //printk("+%s\n",__func__);
-    substreamList *temp = Head;
-    while (temp != NULL)
-    {
-        //printk("temp = %p temp->substream = %p\n", temp, temp->substream);
-        snd_pcm_period_elapsed(temp->substream);
-        temp = temp->next;
-    }
-    //printk("-%s\n",__func__);
-}
 
 void Auddrv_AWB_Interrupt_Handler(void)
 {
@@ -2931,23 +2958,39 @@ void Auddrv_AWB_Interrupt_Handler(void)
     kal_uint32 HW_Cur_ReadIdx = 0;
     kal_uint32 MaxCopySize = 0;
     kal_int32 Hw_Get_bytes = 0;
-    substreamList *Temp = NULL;
+    substreamList *temp = NULL;
     AFE_BLOCK_T  *mBlock = NULL;
+    unsigned long flags;
+    kal_uint32 temp_cnt = 0;
 
     if (Mem_Block == NULL)
     {
+        printk("-%s()Mem_Block == NULL  \n ", __func__);
         return;
     }
+
+    spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+
+    if (GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_AWB) == false)
+    {
+        //printk("%s(), GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_AWB) == false, return\n ", __func__);
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+        printk("-%s(), GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_AWB) = %d\n ", __func__, GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_AWB));
+        return;
+    }
+
     mBlock = &Mem_Block->rBlock;
-    HW_Cur_ReadIdx = Afe_Get_Reg(AFE_AWB_CUR);
+    HW_Cur_ReadIdx = (Afe_Get_Reg(AFE_AWB_CUR));
     PRINTK_AUD_AWB("Auddrv_AWB_Interrupt_Handler HW_Cur_ReadIdx = 0x%x\n ", HW_Cur_ReadIdx);
 
     if (CheckSize(HW_Cur_ReadIdx))
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
     if (mBlock->pucVirtBufAddr  == NULL)
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
 
@@ -2957,12 +3000,12 @@ void Auddrv_AWB_Interrupt_Handler(void)
     {
         if (MaxCopySize > mBlock->u4BufferSize)
         {
-           MaxCopySize = mBlock->u4BufferSize;
+            MaxCopySize = mBlock->u4BufferSize;
         }
         mBlock->u4DataRemained -= MaxCopySize;
         mBlock->u4DMAReadIdx +=  MaxCopySize;
         mBlock->u4DMAReadIdx %=  mBlock->u4BufferSize;
-        Clear_Mem_CopySize (Soc_Aud_Digital_Block_MEM_AWB);
+        Clear_Mem_CopySize(Soc_Aud_Digital_Block_MEM_AWB);
         PRINTK_AUD_AWB("update read pointer u4DMAReadIdx:0x%x, u4WriteIdx:0x%x, pucPhysBufAddr:0x%x mBlock->u4MaxCopySize =0x%x\n",
                        mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->pucPhysBufAddr, mBlock->u4MaxCopySize);
     }
@@ -2975,7 +3018,7 @@ void Auddrv_AWB_Interrupt_Handler(void)
     }
 
     PRINTK_AUD_AWB("+Auddrv_Handle_Mem_context Hw_Get_bytes:0x%x, HW_Cur_ReadIdx:0x%x, u4DMAReadIdx:0x%x, u4WriteIdx:0x%x, pucPhysBufAddr:0x%x mBlock->u4MaxCopySize =0x%x mBlock->u4DataRemained = 0x%x\n",
-                   Hw_Get_bytes, HW_Cur_ReadIdx, mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->pucPhysBufAddr, mBlock->u4MaxCopySize,mBlock->u4DataRemained);
+                   Hw_Get_bytes, HW_Cur_ReadIdx, mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->pucPhysBufAddr, mBlock->u4MaxCopySize, mBlock->u4DataRemained);
 
     mBlock->u4WriteIdx  += Hw_Get_bytes;
     mBlock->u4WriteIdx  %= mBlock->u4BufferSize;
@@ -2985,13 +3028,35 @@ void Auddrv_AWB_Interrupt_Handler(void)
     {
         printk("Auddrv_Handle_Mem_context buffer overflow u4DMAReadIdx:%x, u4WriteIdx:%x, u4DataRemained:%x, u4BufferSize:%x \n",
                mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->u4DataRemained, mBlock->u4BufferSize);
-        mBlock->u4DataRemained -=mBlock->u4BufferSize;
+        mBlock->u4DataRemained %= mBlock->u4BufferSize;
     }
     Mem_Block->interruptTrigger = 1;
-    Temp = Mem_Block->substreamL;
-    TraverseAllSubStream(Mem_Block->substreamL);
-    PRINTK_AUD_AWB("-Auddrv_Handle_Mem_context u4DMAReadIdx:0x%x, u4WriteIdx:0x%x mBlock->u4DataRemained = 0x%x \n", mBlock->u4DMAReadIdx, mBlock->u4WriteIdx,mBlock->u4DataRemained);
 
+    temp = Mem_Block->substreamL;
+    while (temp != NULL)
+    {
+        if (temp->substream != NULL)
+        {
+            temp_cnt = Mem_Block->MemIfNum;
+
+            spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+            snd_pcm_period_elapsed(temp->substream);
+            spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+
+            if (temp_cnt != Mem_Block->MemIfNum)
+            {
+                printk("%s() temp_cnt = %u, Mem_Block->MemIfNum = %u\n", __func__, temp_cnt, Mem_Block->MemIfNum);
+                temp = Mem_Block->substreamL;
+            }
+        }
+        if (temp != NULL)
+        {
+            temp = temp->next;
+        }
+    }
+
+    spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+    PRINTK_AUD_AWB("-Auddrv_Handle_Mem_context u4DMAReadIdx:0x%x, u4WriteIdx:0x%x mBlock->u4DataRemained = 0x%x \n", mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->u4DataRemained);
 }
 
 void Auddrv_DAI_Interrupt_Handler(void)
@@ -3000,21 +3065,32 @@ void Auddrv_DAI_Interrupt_Handler(void)
     kal_uint32 HW_Cur_ReadIdx = 0;
     kal_int32 Hw_Get_bytes = 0;
     AFE_BLOCK_T  *mBlock = NULL;
-    substreamList *Temp = NULL;
+    unsigned long flags;
 
     if (Mem_Block == NULL)
     {
         return;
     }
+
+    spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+    if (GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_DAI) == false)
+    {
+        //printk("%s(), GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_DAI) == false, return\n ", __func__);
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+        return;
+    }
+
     mBlock = &Mem_Block->rBlock;
-    HW_Cur_ReadIdx = Afe_Get_Reg(AFE_DAI_CUR);
+    HW_Cur_ReadIdx = (Afe_Get_Reg(AFE_DAI_CUR));
 
     if (CheckSize(HW_Cur_ReadIdx))
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
     if (mBlock->pucVirtBufAddr  == NULL)
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
 
@@ -3046,11 +3122,17 @@ void Auddrv_DAI_Interrupt_Handler(void)
         }*/
     }
     Mem_Block->interruptTrigger = 1;
-    Temp = Mem_Block->substreamL;
-    if(Temp != NULL)
+
+    if (Mem_Block->substreamL != NULL)
     {
-        snd_pcm_period_elapsed(Temp->substream);
+        if (Mem_Block->substreamL->substream != NULL)
+        {
+            spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+            snd_pcm_period_elapsed(Mem_Block->substreamL->substream);
+            spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+        }
     }
+    spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
 }
 
 void Auddrv_MOD_DAI_Interrupt_Handler(void)
@@ -3059,21 +3141,32 @@ void Auddrv_MOD_DAI_Interrupt_Handler(void)
     kal_uint32 HW_Cur_ReadIdx = 0;
     kal_int32 Hw_Get_bytes = 0;
     AFE_BLOCK_T  *mBlock = NULL;
-    substreamList *Temp = NULL;
+    unsigned long flags;
 
     if (Mem_Block == NULL)
     {
         return;
     }
+
+    spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+    if (GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_MOD_DAI) == false)
+    {
+        //printk("%s(), GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_MOD_DAI) == false, return\n ", __func__);
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+        return;
+    }
+
     mBlock = &Mem_Block->rBlock;
-    HW_Cur_ReadIdx = Afe_Get_Reg(AFE_MOD_DAI_CUR);
+    HW_Cur_ReadIdx = (Afe_Get_Reg(AFE_MOD_DAI_CUR));
 
     if (CheckSize(HW_Cur_ReadIdx))
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
     if (mBlock->pucVirtBufAddr  == NULL)
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
 
@@ -3085,7 +3178,7 @@ void Auddrv_MOD_DAI_Interrupt_Handler(void)
     }
 
     PRINTK_AUD_MODDAI("Auddrv_MOD_DAI_Interrupt_Handler Hw_Get_bytes:0x%x, HW_Cur_ReadIdx:0x%x, u4DMAReadIdx:0x%x, u4WriteIdx:0x%x, pucPhysBufAddr:0x%x Mem_Block->MemIfNum = %d \n",
-                   Hw_Get_bytes, HW_Cur_ReadIdx, mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->pucPhysBufAddr, Mem_Block->MemIfNum);
+                      Hw_Get_bytes, HW_Cur_ReadIdx, mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->pucPhysBufAddr, Mem_Block->MemIfNum);
 
     mBlock->u4WriteIdx  += Hw_Get_bytes;
     mBlock->u4WriteIdx  %= mBlock->u4BufferSize;
@@ -3095,7 +3188,7 @@ void Auddrv_MOD_DAI_Interrupt_Handler(void)
     if (mBlock->u4DataRemained > mBlock->u4BufferSize)
     {
         PRINTK_AUD_MODDAI("Auddrv_MOD_DAI_Interrupt_Handler buffer overflow u4DMAReadIdx:%x, u4WriteIdx:%x, u4DataRemained:%x, u4BufferSize:%x \n",
-                       mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->u4DataRemained, mBlock->u4BufferSize);
+                          mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->u4DataRemained, mBlock->u4BufferSize);
         /*
         mBlock->u4DataRemained = mBlock->u4BufferSize / 2;
         mBlock->u4DMAReadIdx = mBlock->u4WriteIdx - mBlock->u4BufferSize / 2;
@@ -3105,20 +3198,42 @@ void Auddrv_MOD_DAI_Interrupt_Handler(void)
         }*/
     }
     Mem_Block->interruptTrigger = 1;
-    Temp = AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_MOD_DAI]->substreamL;
-    if(Temp != NULL)
+
+    if (Mem_Block->substreamL != NULL)
     {
-        snd_pcm_period_elapsed(Temp->substream);
+        if (Mem_Block->substreamL->substream != NULL)
+        {
+            spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+            snd_pcm_period_elapsed(Mem_Block->substreamL->substream);
+            spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+        }
     }
+    spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
 }
 
 void Auddrv_DL1_Interrupt_Handler(void)  // irq1 ISR handler
 {
+#define MAGIC_NUMBER 0xFFFFFFC0
+
+    AFE_MEM_CONTROL_T *Mem_Block = AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_DL1];
     kal_int32 Afe_consumed_bytes = 0;
     kal_int32 HW_memory_index = 0;
     kal_int32 HW_Cur_ReadIdx = 0;
     AFE_BLOCK_T *Afe_Block = &(AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_DL1]->rBlock);
-    substreamList *Temp = NULL;
+    unsigned long flags;
+
+    if (Mem_Block == NULL)
+    {
+        return;
+    }
+
+    spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+    if (GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_DL1) == false)
+    {
+        //printk("%s(), GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_DL1) == false, return\n ", __func__);
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+        return;
+    }
 
     HW_Cur_ReadIdx = Afe_Get_Reg(AFE_DL1_CUR);
     if (HW_Cur_ReadIdx == 0)
@@ -3142,6 +3257,8 @@ void Auddrv_DL1_Interrupt_Handler(void)  // irq1 ISR handler
         Afe_consumed_bytes = Afe_Block->u4BufferSize + HW_memory_index - Afe_Block->u4DMAReadIdx ;
     }
 
+    Afe_consumed_bytes = Afe_consumed_bytes & MAGIC_NUMBER;         //64 bytes align
+
     /*
     if ((Afe_consumed_bytes & 0x1f) != 0)
     {
@@ -3167,11 +3284,17 @@ void Auddrv_DL1_Interrupt_Handler(void)  // irq1 ISR handler
     AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_DL1]->interruptTrigger = 1 ;
     PRINTK_AUD_DL1("-DL_Handling normal ReadIdx:%x ,DataRemained:%x, WriteIdx:%x \n",
                    Afe_Block->u4DMAReadIdx, Afe_Block->u4DataRemained, Afe_Block->u4WriteIdx);
-    Temp = AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_DL1]->substreamL;
-    if(Temp != NULL)
+
+    if (Mem_Block->substreamL != NULL)
     {
-        snd_pcm_period_elapsed(Temp->substream);
+        if (Mem_Block->substreamL->substream != NULL)
+        {
+            spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+            snd_pcm_period_elapsed(Mem_Block->substreamL->substream);
+            spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+        }
     }
+    spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
 }
 
 struct snd_dma_buffer *Get_Mem_Buffer(Soc_Aud_Digital_Block MemBlock)
@@ -3213,20 +3336,32 @@ void Auddrv_UL1_Interrupt_Handler(void)
     kal_uint32 HW_Cur_ReadIdx = 0;
     kal_int32 Hw_Get_bytes = 0;
     AFE_BLOCK_T  *mBlock = NULL;
-    substreamList *Temp = NULL;
+    unsigned long flags;
+
     if (Mem_Block == NULL)
     {
         printk("Mem_Block == NULL  \n ");
         return;
     }
+
+    spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+    if (GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_VUL) == false)
+    {
+        //printk("%s(), GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_VUL) == false, return\n ", __func__);
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+        return;
+    }
+
     mBlock = &Mem_Block->rBlock;
-    HW_Cur_ReadIdx = Afe_Get_Reg(AFE_VUL_CUR);
+    HW_Cur_ReadIdx = (Afe_Get_Reg(AFE_VUL_CUR));
     if (CheckSize(HW_Cur_ReadIdx))
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
     if (mBlock->pucVirtBufAddr  == NULL)
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
 
@@ -3251,45 +3386,66 @@ void Auddrv_UL1_Interrupt_Handler(void)
                mBlock->u4DMAReadIdx, mBlock->u4WriteIdx, mBlock->u4DataRemained, mBlock->u4BufferSize);
     }
     AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_VUL]->interruptTrigger = 1;
-    Temp = AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_VUL]->substreamL;
-    if(Temp != NULL)
+
+    if (Mem_Block->substreamL != NULL)
     {
-        snd_pcm_period_elapsed(Temp->substream);
+        if (Mem_Block->substreamL->substream != NULL)
+        {
+            spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+            snd_pcm_period_elapsed(Mem_Block->substreamL->substream);
+            spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+        }
     }
+    spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
 }
 
-void Clear_Mem_CopySize(Soc_Aud_Digital_Block MemBlock)
+ void Clear_Mem_CopySize(Soc_Aud_Digital_Block MemBlock)
 {
-    substreamList *head = AFE_Mem_Control_context[MemBlock]->substreamL;
+    substreamList *head;
+    //unsigned long flags;
+    //spin_lock_irqsave(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
+    head = AFE_Mem_Control_context[MemBlock]->substreamL;
     //printk("+%s MemBlock = %d \n ", __func__, MemBlock);
     while (head != NULL) // frst item is NULL
     {
         head->u4MaxCopySize = 0;
-        head = head->next;
+        head = (substreamList *)head->next;
     }
+    //spin_unlock_irqrestore(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
     //printk("-%s MemBlock = %d \n ", __func__, MemBlock);
 }
 
 kal_uint32 Get_Mem_CopySizeByStream(Soc_Aud_Digital_Block MemBlock, struct snd_pcm_substream *substream)
 {
-    substreamList *head = AFE_Mem_Control_context[MemBlock]->substreamL;
+    substreamList *head;
+    unsigned long flags;
+    kal_uint32 MaxCopySize;
+    spin_lock_irqsave(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
+    head = AFE_Mem_Control_context[MemBlock]->substreamL;
     //printk("+%s MemBlock = %d \n ", __func__, MemBlock);
     while (head != NULL) // frst item is NULL
     {
         if (head->substream == substream)
         {
-            return head->u4MaxCopySize;
+            MaxCopySize = head->u4MaxCopySize;
+            spin_unlock_irqrestore(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
+            return MaxCopySize;
         }
-        head = head->next;
+        head = (substreamList *)head->next;
     }
+    spin_unlock_irqrestore(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
     //printk("-%s MemBlock = %d \n ", __func__, MemBlock);
     return 0;
 }
 
 kal_uint32 Get_Mem_MaxCopySize(Soc_Aud_Digital_Block MemBlock)
 {
-    substreamList *head = AFE_Mem_Control_context[MemBlock]->substreamL;
-    kal_uint32 MaxCopySize = 0;
+    substreamList *head;
+    //unsigned long flags;
+    kal_uint32 MaxCopySize;
+    //spin_lock_irqsave(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
+    head = AFE_Mem_Control_context[MemBlock]->substreamL;
+    MaxCopySize = 0;
     //printk("+%s MemBlock = %d \n ", __func__, MemBlock);
     while (head != NULL) // frst item is NULL
     {
@@ -3297,15 +3453,19 @@ kal_uint32 Get_Mem_MaxCopySize(Soc_Aud_Digital_Block MemBlock)
         {
             MaxCopySize = head->u4MaxCopySize;
         }
-        head = head->next;
+        head = (substreamList *)head->next;
     }
+    //spin_unlock_irqrestore(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
     //printk("-%s MemBlock = %d \n ", __func__, MemBlock);
     return MaxCopySize;
 }
 
 void Set_Mem_CopySizeByStream(Soc_Aud_Digital_Block MemBlock, struct snd_pcm_substream *substream, uint32 size)
 {
-    substreamList *head = AFE_Mem_Control_context[MemBlock]->substreamL;
+    substreamList *head;
+    unsigned long flags;
+    spin_lock_irqsave(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
+    head = AFE_Mem_Control_context[MemBlock]->substreamL;
     //printk("+%s MemBlock = %d \n ", __func__, MemBlock);
     while (head != NULL) // frst item is NULL
     {
@@ -3314,10 +3474,10 @@ void Set_Mem_CopySizeByStream(Soc_Aud_Digital_Block MemBlock, struct snd_pcm_sub
             head->u4MaxCopySize += size;
             break;
         }
-        head = head->next;
+        head = (substreamList *)head->next;
     }
+    spin_unlock_irqrestore(&AFE_Mem_Control_context[MemBlock]->substream_lock, flags);
     //printk("-%s MemBlock = %d \n ", __func__, MemBlock);
-    return 0;
 }
 
 void Auddrv_UL2_Interrupt_Handler(void)
@@ -3326,7 +3486,7 @@ void Auddrv_UL2_Interrupt_Handler(void)
     kal_uint32 HW_Cur_ReadIdx = 0;
     kal_int32 Hw_Get_bytes = 0;
     AFE_BLOCK_T  *mBlock = NULL;
-    substreamList *Temp = NULL;
+    unsigned long flags;
 
     PRINTK_AUD_UL2("Auddrv_UL2_Interrupt_Handler \n ");
 
@@ -3335,16 +3495,27 @@ void Auddrv_UL2_Interrupt_Handler(void)
         printk("Mem_Block == NULL  \n ");
         return;
     }
+
+    spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+    if (GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_VUL_DATA2) == false)
+    {
+        //printk("%s(), GetMemoryPathEnable(Soc_Aud_Digital_Block_MEM_VUL_DATA2) == false, return\n ", __func__);
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+        return;
+    }
+
     mBlock = &Mem_Block->rBlock;
-    HW_Cur_ReadIdx = Afe_Get_Reg(AFE_VUL_D2_CUR);
+    HW_Cur_ReadIdx = (Afe_Get_Reg(AFE_VUL_D2_CUR));
     PRINTK_AUD_UL2("Auddrv_UL2_Interrupt_Handler HW_Cur_ReadIdx = 0x%x\n ", HW_Cur_ReadIdx);
 
     if (CheckSize(HW_Cur_ReadIdx))
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
     if (mBlock->pucVirtBufAddr  == NULL)
     {
+        spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
         return;
     }
 
@@ -3375,11 +3546,17 @@ void Auddrv_UL2_Interrupt_Handler(void)
         }
     }
     AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_VUL_DATA2]->interruptTrigger = 1;
-    Temp = AFE_Mem_Control_context[Soc_Aud_Digital_Block_MEM_VUL_DATA2]->substreamL;
-    if(Temp != NULL)
+
+    if (Mem_Block->substreamL != NULL)
     {
-        snd_pcm_period_elapsed(Temp->substream);
+        if (Mem_Block->substreamL->substream != NULL)
+        {
+            spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
+            snd_pcm_period_elapsed(Mem_Block->substreamL->substream);
+            spin_lock_irqsave(&Mem_Block->substream_lock, flags);
+        }
     }
+    spin_unlock_irqrestore(&Mem_Block->substream_lock, flags);
 }
 
 bool BackUp_Audio_Register(void)
@@ -3577,6 +3754,7 @@ bool BackUp_Audio_Register(void)
     mAudioRegCache.REG_AFE_ASRC3_CON13 = Afe_Get_Reg(AFE_ASRC3_CON13);
     mAudioRegCache.REG_AFE_ASRC3_CON14 = Afe_Get_Reg(AFE_ASRC3_CON14);
     AudDrv_Clk_Off();
+    return true;
 }
 
 
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_afe_control.h b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_afe_control.h
index a3643a7..9627936 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_afe_control.h
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_afe_control.h
@@ -183,7 +183,6 @@ void Set_Mem_CopySizeByStream(Soc_Aud_Digital_Block MemBlock,struct snd_pcm_subs
 struct snd_dma_buffer* Get_Mem_Buffer(Soc_Aud_Digital_Block MemBlock);
 int AudDrv_Allocate_DL1_Buffer(kal_uint32 Afe_Buf_Length);
 
-
 bool BackUp_Audio_Register(void);
 bool Restore_Audio_Register(void);
 
@@ -210,5 +209,4 @@ void OpenAfeDigitaldl1(bool bEnable);
 void SetExternalModemStatus(const bool bEnable);
 bool GetExternalModemStatus();
 
-
 #endif
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_codec_63xx.c b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_codec_63xx.c
index 9e958de..e33f66a 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_codec_63xx.c
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_codec_63xx.c
@@ -71,15 +71,7 @@
 #endif
 
 #include "mt_soc_pcm_common.h"
-static int mt6631_debug = 0;
-module_param(mt6631_debug, int, 0644);
-#define mt6631_debug(fmt, args...) \
-	do \
-	{ \
-		if(mt6631_debug){ \
-			printk(fmt, ##args); \
-		} \
-	}while(0);
+
 //#define VOW_TONE_TEST
 
 extern void mt6331_upmu_set_rg_audmicbias1lowpen(kal_uint32 val);
@@ -184,7 +176,7 @@ static void  RestorePowerState(void)
 static bool mAnaSuspend = false;
 void SetAnalogSuspend(bool bEnable)
 {
-    mt6631_debug("%s bEnable ==%d mAnaSuspend = %d \n", __func__, bEnable, mAnaSuspend);
+    printk("%s bEnable ==%d mAnaSuspend = %d \n", __func__, bEnable, mAnaSuspend);
     if ((bEnable == true) && (mAnaSuspend == false))
     {
         Ana_Log_Print();
@@ -245,15 +237,15 @@ void SetAnalogSuspend(bool bEnable)
 static int audck_buf_Count = 0;
 void audckbufEnable(bool enable)
 {
-    mt6631_debug("audckbufEnable audck_buf_Count = %d enable = %d \n", audck_buf_Count, enable);
+    printk("audckbufEnable audck_buf_Count = %d enable = %d \n", audck_buf_Count, enable);
     mutex_lock(&Ana_buf_Ctrl_Mutex);
     if (enable)
     {
         if (audck_buf_Count == 0)
         {
-            mt6631_debug("+clk_buf_ctrl(CLK_BUF_AUDIO,true)\n");
+            printk("+clk_buf_ctrl(CLK_BUF_AUDIO,true)\n");
             clk_buf_ctrl(CLK_BUF_AUDIO, true);
-            mt6631_debug("-clk_buf_ctrl(CLK_BUF_AUDIO,true)\n");
+            printk("-clk_buf_ctrl(CLK_BUF_AUDIO,true)\n");
         }
         audck_buf_Count++;
     }
@@ -262,13 +254,13 @@ void audckbufEnable(bool enable)
         audck_buf_Count--;
         if (audck_buf_Count == 0)
         {
-            mt6631_debug("+clk_buf_ctrl(CLK_BUF_AUDIO,false)\n");
+            printk("+clk_buf_ctrl(CLK_BUF_AUDIO,false)\n");
             clk_buf_ctrl(CLK_BUF_AUDIO, false);
-            mt6631_debug("-clk_buf_ctrl(CLK_BUF_AUDIO,false)\n");
+            printk("-clk_buf_ctrl(CLK_BUF_AUDIO,false)\n");
         }
         if (audck_buf_Count < 0)
         {
-            mt6631_debug("audck_buf_Count count <0 \n");
+            printk("audck_buf_Count count <0 \n");
             audck_buf_Count = 0;
         }
     }
@@ -278,7 +270,7 @@ void audckbufEnable(bool enable)
 static int ClsqAuxCount = 0;
 static void ClsqAuxEnable(bool enable)
 {
-    mt6631_debug("ClsqAuxEnable ClsqAuxCount = %d enable = %d \n", ClsqAuxCount, enable);
+    printk("ClsqAuxEnable ClsqAuxCount = %d enable = %d \n", ClsqAuxCount, enable);
     mutex_lock(& AudAna_lock);
     if (enable)
     {
@@ -293,7 +285,7 @@ static void ClsqAuxEnable(bool enable)
         ClsqAuxCount--;
         if (ClsqAuxCount < 0)
         {
-            mt6631_debug("ClsqAuxEnable count <0 \n");
+            printk("ClsqAuxEnable count <0 \n");
             ClsqAuxCount = 0;
         }
         if (ClsqAuxCount == 0)
@@ -307,7 +299,7 @@ static void ClsqAuxEnable(bool enable)
 static int ClsqCount = 0;
 static void ClsqEnable(bool enable)
 {
-    mt6631_debug("ClsqEnable ClsqAuxCount = %d enable = %d \n", ClsqCount, enable);
+    printk("ClsqEnable ClsqAuxCount = %d enable = %d \n", ClsqCount, enable);
     mutex_lock(& AudAna_lock);
     if (enable)
     {
@@ -322,7 +314,7 @@ static void ClsqEnable(bool enable)
         ClsqCount--;
         if (ClsqCount < 0)
         {
-            mt6631_debug("ClsqEnable count <0 \n");
+            printk("ClsqEnable count <0 \n");
             ClsqCount = 0;
         }
         if (ClsqCount == 0)
@@ -336,7 +328,7 @@ static void ClsqEnable(bool enable)
 static int TopCkCount = 0;
 static void Topck_Enable(bool enable)
 {
-    mt6631_debug("Topck_Enable enable = %d TopCkCount = %d \n", enable, TopCkCount);
+    printk("Topck_Enable enable = %d TopCkCount = %d \n", enable, TopCkCount);
     mutex_lock(&Ana_Clk_Mutex);
     if (enable == true)
     {
@@ -355,7 +347,7 @@ static void Topck_Enable(bool enable)
         }
         if (TopCkCount <= 0)
         {
-            mt6631_debug("TopCkCount <0 =%d\n ", TopCkCount);
+            printk("TopCkCount <0 =%d\n ", TopCkCount);
             TopCkCount = 0;
         }
     }
@@ -365,7 +357,7 @@ static void Topck_Enable(bool enable)
 static int NvRegCount = 0;
 static void NvregEnable(bool enable)
 {
-    mt6631_debug("NvregEnable NvRegCount == %d enable = %d \n", NvRegCount, enable);
+    printk("NvregEnable NvRegCount == %d enable = %d \n", NvRegCount, enable);
     mutex_lock(&Ana_Clk_Mutex);
     if (enable == true)
     {
@@ -384,7 +376,7 @@ static void NvregEnable(bool enable)
         }
         if (NvRegCount < 0)
         {
-            mt6631_debug("NvRegCount <0 =%d\n ", NvRegCount);
+            printk("NvRegCount <0 =%d\n ", NvRegCount);
             NvRegCount = 0;
         }
     }
@@ -412,7 +404,7 @@ static void AdcClockEnable(bool enable)
         }
         if (AdcClockCount <= 0)
         {
-            mt6631_debug("TopCkCount <0 =%d\n ", AdcClockCount);
+            printk("TopCkCount <0 =%d\n ", AdcClockCount);
             AdcClockCount = 0;
         }
     }
@@ -422,7 +414,7 @@ static void AdcClockEnable(bool enable)
 #if defined (MTK_VOW_SUPPORT)
 void vow_irq_handler(void)
 {
-    mt6631_debug("audio irq event....\n");
+    printk("audio irq event....\n");
     //TurnOnVOWADcPowerACC(AUDIO_ANALOG_DEVICE_IN_ADC1, false);
     TurnOnVOWDigitalHW(false);
 #if defined(VOW_TONE_TEST)
@@ -453,7 +445,7 @@ static void LowPowerAdcClockEnable(bool enable)
         }
         if (LowPowerAdcClockCount < 0)
         {
-            mt6631_debug("LowPowerAdcClockCount <0 =%d\n ", LowPowerAdcClockCount);
+            printk("LowPowerAdcClockCount <0 =%d\n ", LowPowerAdcClockCount);
             LowPowerAdcClockCount = 0;
         }
     }
@@ -475,7 +467,7 @@ static void Apply_Speaker_Gain(void)
 
 void setOffsetTrimMux(unsigned int Mux)
 {
-    mt6631_debug("%s Mux = %d\n", __func__, Mux);
+    printk("%s Mux = %d\n", __func__, Mux);
     Ana_Set_Reg(AUDBUF_CFG7 , Mux << 12, 0xf << 12); // buffer mux select
 }
 
@@ -489,23 +481,23 @@ static int mHprTrimOffset = 2048;
 
 void SetHplTrimOffset(int Offset)
 {
-    mt6631_debug("%s Offset = %d\n",__func__,Offset);
+    printk("%s Offset = %d\n",__func__,Offset);
     mHplTrimOffset = Offset;
     if ((Offset > 2098) || (Offset < 1998))
     {
         mHplTrimOffset = 2048;
-        mt6631_debug("SetHplTrimOffset offset may be invalid offset = %d\n", Offset);
+        printk("SetHplTrimOffset offset may be invalid offset = %d\n", Offset);
     }
 }
 
 void SetHprTrimOffset(int Offset)
 {
-    mt6631_debug("%s Offset = %d\n",__func__,Offset);
+    printk("%s Offset = %d\n",__func__,Offset);
     mHprTrimOffset = Offset;
     if ((Offset > 2098) || (Offset < 1998))
     {
         mHplTrimOffset = 2048;
-        mt6631_debug("SetHplTrimOffset offset may be invalid offset = %d\n", Offset);
+        printk("SetHplTrimOffset offset may be invalid offset = %d\n", Offset);
     }
 }
 
@@ -526,7 +518,7 @@ void OpenTrimBufferHardware(bool enable)
     if (enable)
     {
         TurnOnDacPower();
-        mt6631_debug("%s \n", __func__);
+        printk("%s \n", __func__);
         Ana_Set_Reg(AUDNVREGGLB_CFG0, 0x0000, 0xffff); // Enable AUDGLB
         OpenClassAB();
         Ana_Set_Reg(AUDLDO_NVREG_CFG0,   0x0028, 0xffff); // Enable cap-less LDOs (1.6V)
@@ -548,7 +540,7 @@ void OpenTrimBufferHardware(bool enable)
     }
     else
     {
-        mt6631_debug("Audio_Amp_Change off amp\n");
+        printk("Audio_Amp_Change off amp\n");
         Ana_Set_Reg(AUDDAC_CFG0, 0x0000, 0xffff); // Disable Audio DAC
         Ana_Set_Reg(AUDCLKGEN_CFG0, 0x5500, 0xffff); // Disable AUD_CLK
         Ana_Set_Reg(IBIASDIST_CFG0, 0x0192, 0xffff); // Disable IBIST
@@ -568,7 +560,7 @@ void OpenAnalogTrimHardware(bool enable)
     if (enable)
     {
         TurnOnDacPower();
-        mt6631_debug("%s \n", __func__);
+        printk("%s \n", __func__);
         //Ana_Set_Reg(AUDNVREGGLB_CFG0, 0x0000, 0xffff); // Enable AUDGLB
         OpenClassAB();
         Ana_Set_Reg(AUDLDO_NVREG_CFG0,   0x0028, 0xffff); // Enable cap-less LDOs (1.6V)
@@ -590,7 +582,7 @@ void OpenAnalogTrimHardware(bool enable)
     }
     else
     {
-        mt6631_debug("Audio_Amp_Change off amp\n");
+        printk("Audio_Amp_Change off amp\n");
         Ana_Set_Reg(AUDDAC_CFG0, 0x0000, 0xffff); // Disable Audio DAC
         Ana_Set_Reg(AUDCLKGEN_CFG0, 0x5500, 0xffff); // Disable AUD_CLK
         Ana_Set_Reg(IBIASDIST_CFG0, 0x0192, 0xffff); // Disable IBIST
@@ -606,7 +598,7 @@ void OpenAnalogTrimHardware(bool enable)
 
 void OpenAnalogHeadphone(bool bEnable)
 {
-    mt6631_debug("OpenAnalogHeadphone bEnable = %d", bEnable);
+    printk("OpenAnalogHeadphone bEnable = %d", bEnable);
     if (bEnable)
     {
         SetHplTrimOffset(2048);
@@ -628,7 +620,7 @@ void OpenAnalogHeadphone(bool bEnable)
 
 bool OpenHeadPhoneImpedanceSetting(bool bEnable)
 {
-    mt6631_debug("%s benable = %d\n", __func__, bEnable);
+    printk("%s benable = %d\n", __func__, bEnable);
     if (GetDLStatus() == true)
     {
         return false;
@@ -682,15 +674,15 @@ static void SetHprOffset(int OffsetTrimming)
     short Dccompsentation = 0;
     int DCoffsetValue = 0;
     unsigned short RegValue = 0;
-    mt6631_debug("%s OffsetTrimming = %d \n",__func__,OffsetTrimming);
+    printk("%s OffsetTrimming = %d \n",__func__,OffsetTrimming);
     DCoffsetValue = OffsetTrimming *  1000000;
     DCoffsetValue = (DCoffsetValue / DC1devider);  // in uv
-    mt6631_debug("%s DCoffsetValue = %d \n",__func__,DCoffsetValue);
+    printk("%s DCoffsetValue = %d \n",__func__,DCoffsetValue);
     DCoffsetValue = (DCoffsetValue / DC1unit_in_uv);
-    mt6631_debug("%s DCoffsetValue = %d \n",__func__,DCoffsetValue);
+    printk("%s DCoffsetValue = %d \n",__func__,DCoffsetValue);
     Dccompsentation = DCoffsetValue;
     RegValue = Dccompsentation;
-    mt6631_debug("%s RegValue = 0x%x\n",__func__,RegValue);
+    printk("%s RegValue = 0x%x\n",__func__,RegValue);
     Ana_Set_Reg(AFE_DL_DC_COMP_CFG1, RegValue , 0xffff);
 }
 
@@ -699,15 +691,15 @@ static void SetHplOffset(int OffsetTrimming)
     short Dccompsentation = 0;
     int DCoffsetValue = 0;
     unsigned short RegValue = 0;
-    mt6631_debug("%s OffsetTrimming = %d \n",__func__,OffsetTrimming);
+    printk("%s OffsetTrimming = %d \n",__func__,OffsetTrimming);
     DCoffsetValue = OffsetTrimming *1000000;
     DCoffsetValue = (DCoffsetValue / DC1devider);  // in uv
-    mt6631_debug("%s DCoffsetValue = %d \n",__func__,DCoffsetValue);
+    printk("%s DCoffsetValue = %d \n",__func__,DCoffsetValue);
     DCoffsetValue = (DCoffsetValue / DC1unit_in_uv);
-    mt6631_debug("%s DCoffsetValue = %d \n",__func__,DCoffsetValue);
+    printk("%s DCoffsetValue = %d \n",__func__,DCoffsetValue);
     Dccompsentation = DCoffsetValue;
     RegValue = Dccompsentation;
-    mt6631_debug("%s RegValue = 0x%x\n",__func__,RegValue);
+    printk("%s RegValue = 0x%x\n",__func__,RegValue);
     Ana_Set_Reg(AFE_DL_DC_COMP_CFG0, RegValue  , 0xffff);
 }
 
@@ -725,14 +717,14 @@ static void EnableDcCompensation(bool bEnable)
 
 static void SetHprOffsetTrim(void)
 {
-    mt6631_debug("%s mHprTrimOffset = %d TrimOffset = %d \n",__func__,mHprTrimOffset,TrimOffset);
+    printk("%s mHprTrimOffset = %d TrimOffset = %d \n",__func__,mHprTrimOffset,TrimOffset);
     int OffsetTrimming = mHprTrimOffset - TrimOffset;
     SetHprOffset(OffsetTrimming);
 }
 
 static void SetHpLOffsetTrim(void)
 {
-    mt6631_debug("%s mHprTrimOffset = %d TrimOffset = %d \n",__func__,mHplTrimOffset,TrimOffset);
+    printk("%s mHprTrimOffset = %d TrimOffset = %d \n",__func__,mHplTrimOffset,TrimOffset);
     int OffsetTrimming = mHplTrimOffset - TrimOffset;
     SetHplOffset(OffsetTrimming);
 }
@@ -809,7 +801,7 @@ static void OpenClassAB(void)
 
 static void SetDCcoupleNP(int ADCType, int mode)
 {
-    mt6631_debug("%s ADCType= %d mode = %d\n", __func__, ADCType, mode);
+    printk("%s ADCType= %d mode = %d\n", __func__, ADCType, mode);
     switch (mode)
     {
         case AUDIO_ANALOGUL_MODE_ACC:
@@ -892,6 +884,8 @@ static void EnableMicBias(uint32_t Mic, bool bEnable)
                 OpenMicbias1(true);
                 break;
             case AUDIO_ANALOG_DEVICE_IN_ADC2:
+                OpenMicbias0(true);
+                OpenMicbias1(true);
                 OpenMicbias2(true);
                 break;
             case AUDIO_ANALOG_DEVICE_IN_ADC3:
@@ -909,6 +903,8 @@ static void EnableMicBias(uint32_t Mic, bool bEnable)
                 OpenMicbias1(false);
                 break;
             case AUDIO_ANALOG_DEVICE_IN_ADC2:
+                OpenMicbias0(false);
+                OpenMicbias1(false);
                 OpenMicbias2(false);
                 break;
             case AUDIO_ANALOG_DEVICE_IN_ADC3:
@@ -956,7 +952,7 @@ static void SetMic3powermode(bool lowpower)
 
 static void OpenMicbias1(bool bEnable)
 {
-    mt6631_debug("%s bEnable = %d \n", __func__, bEnable);
+    printk("%s bEnable = %d \n", __func__, bEnable);
     if (bEnable == true)
     {
         mt6331_upmu_set_rg_audpwdbmicbias1(true); // mic bias power 1 on
@@ -976,7 +972,7 @@ static void SetMicbias1lowpower(bool benable)
 static void OpenMicbias0(bool bEanble)
 {
 
-    mt6631_debug("%s bEanble = %d\n", __func__, bEanble);
+    printk("%s bEanble = %d\n", __func__, bEanble);
     if (bEanble == true)
     {
         mt6331_upmu_set_rg_audpwdbmicbias0(true); // mic bias power 0 on
@@ -1047,7 +1043,7 @@ static uint32 GetULNewIFFrequency(uint32 frequency)
 uint32 GetULFrequency(uint32 frequency)
 {
     uint32 Reg_value = 0;
-    mt6631_debug("%s frequency =%d\n", __func__, frequency);
+    printk("%s frequency =%d\n", __func__, frequency);
     switch (frequency)
     {
         case 8000:
@@ -1086,34 +1082,34 @@ uint32 ULSampleRateTransform(uint32 SampleRate)
 
 static int mt63xx_codec_startup(struct snd_pcm_substream *substream , struct snd_soc_dai *Daiport)
 {
-    //mt6631_debug("+mt63xx_codec_startup name = %s number = %d\n", substream->name, substream->number);
+    //printk("+mt63xx_codec_startup name = %s number = %d\n", substream->name, substream->number);
     if (substream->stream == SNDRV_PCM_STREAM_CAPTURE && substream->runtime->rate)
     {
-        //mt6631_debug("mt63xx_codec_startup set up SNDRV_PCM_STREAM_CAPTURE rate = %d\n", substream->runtime->rate);
+        //printk("mt63xx_codec_startup set up SNDRV_PCM_STREAM_CAPTURE rate = %d\n", substream->runtime->rate);
         mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC] = substream->runtime->rate;
 
     }
     else if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK && substream->runtime->rate)
     {
-        //mt6631_debug("mt63xx_codec_startup set up SNDRV_PCM_STREAM_PLAYBACK rate = %d\n", substream->runtime->rate);
+        //printk("mt63xx_codec_startup set up SNDRV_PCM_STREAM_PLAYBACK rate = %d\n", substream->runtime->rate);
         mBlockSampleRate[AUDIO_ANALOG_DEVICE_OUT_DAC] = substream->runtime->rate;
     }
-    //mt6631_debug("-mt63xx_codec_startup name = %s number = %d\n", substream->name, substream->number);
+    //printk("-mt63xx_codec_startup name = %s number = %d\n", substream->name, substream->number);
     return 0;
 }
 
 static int mt63xx_codec_prepare(struct snd_pcm_substream *substream , struct snd_soc_dai *Daiport)
 {
-    //mt6631_debug("mt63xx_codec_prepare set up  rate = %d\n", substream->runtime->rate);
+    //printk("mt63xx_codec_prepare set up  rate = %d\n", substream->runtime->rate);
     if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
     {
-        mt6631_debug("mt63xx_codec_prepare set up SNDRV_PCM_STREAM_CAPTURE rate = %d\n", substream->runtime->rate);
+        printk("mt63xx_codec_prepare set up SNDRV_PCM_STREAM_CAPTURE rate = %d\n", substream->runtime->rate);
         mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC] = substream->runtime->rate;
 
     }
     else if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
     {
-        mt6631_debug("mt63xx_codec_prepare set up SNDRV_PCM_STREAM_PLAYBACK rate = %d\n", substream->runtime->rate);
+        printk("mt63xx_codec_prepare set up SNDRV_PCM_STREAM_PLAYBACK rate = %d\n", substream->runtime->rate);
         mBlockSampleRate[AUDIO_ANALOG_DEVICE_OUT_DAC] = substream->runtime->rate;
     }
     return 0;
@@ -1130,7 +1126,7 @@ static int mt6323_codec_trigger(struct snd_pcm_substream *substream , int comman
             break;
     }
 
-    //mt6631_debug("mt6323_codec_trigger command = %d\n ", command);
+    //printk("mt6323_codec_trigger command = %d\n ", command);
     return 0;
 }
 
@@ -1355,7 +1351,7 @@ static struct snd_soc_dai_driver mtk_6331_dai_codecs[] =
 uint32 GetDLNewIFFrequency(unsigned int frequency)
 {
     uint32 Reg_value = 0;
-    //mt6631_debug("AudioPlatformDevice ApplyDLNewIFFrequency ApplyDLNewIFFrequency = %d", frequency);
+    //printk("AudioPlatformDevice ApplyDLNewIFFrequency ApplyDLNewIFFrequency = %d", frequency);
     switch (frequency)
     {
         case 8000:
@@ -1385,7 +1381,7 @@ uint32 GetDLNewIFFrequency(unsigned int frequency)
         case 48000:
             Reg_value = 8;
         default:
-            mt6631_debug("ApplyDLNewIFFrequency with frequency = %d", frequency);
+            printk("ApplyDLNewIFFrequency with frequency = %d", frequency);
     }
     return Reg_value;
 }
@@ -1405,7 +1401,7 @@ static bool GetDLStatus(void)
 
 static void TurnOnDacPower(void)
 {
-    mt6631_debug("TurnOnDacPower\n");
+    printk("TurnOnDacPower\n");
     audckbufEnable(true);
     ClsqEnable(true);
     Topck_Enable(true);
@@ -1435,7 +1431,17 @@ static void TurnOnDacPower(void)
 
 static void TurnOffDacPower(void)
 {
-    mt6631_debug("TurnOffDacPower\n");
+    printk("TurnOffDacPower\n");
+
+    Ana_Set_Reg(AFE_DL_SRC2_CON0_L , 0x0000 , 0xffff); //bit0, Turn off down-link
+    if (GetAdcStatus() == false)
+    {
+        Ana_Set_Reg(AFE_UL_DL_CON0, 0x0000, 0xffff);   //turn off afe
+    }
+    udelay(250);
+
+    Ana_Set_Reg(AFE_AUDIO_TOP_CON0, 0x0040, 0x0040); //down-link power down
+
     Ana_Set_Reg(AFE_CLASSH_CFG1, 0x24, 0xffff);
     Ana_Set_Reg(AFE_CLASSH_CFG0, 0xd518, 0xffff); // ClassH off
     Ana_Set_Reg(AUDLDO_NVREG_CFG0, 0x0, 0xffff); // NCP off
@@ -1448,12 +1454,12 @@ static void TurnOffDacPower(void)
 static void HeadsetVoloumeRestore(void)
 {
     int index = 0,oldindex = 0,offset =0,count =1;
-    mt6631_debug("%s\n", __func__);
+    printk("%s\n", __func__);
     index =   8 ;
     oldindex = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTR];
     if(index  > oldindex)
     {
-        mt6631_debug("index = %d oldindex = %d \n",index,oldindex);
+        printk("index = %d oldindex = %d \n",index,oldindex);
         offset = index - oldindex;
         while(offset >0)
         {
@@ -1465,7 +1471,7 @@ static void HeadsetVoloumeRestore(void)
     }
     else
     {
-        mt6631_debug("index = %d oldindex = %d \n",index,oldindex);
+        printk("index = %d oldindex = %d \n",index,oldindex);
         offset = oldindex - index;
         while(offset >0)
         {
@@ -1481,12 +1487,12 @@ static void HeadsetVoloumeRestore(void)
 static void HeadsetVoloumeSet(void)
 {
     int index = 0,oldindex = 0,offset =0, count =1;
-    mt6631_debug("%s\n", __func__);
+    printk("%s\n", __func__);
     index =   mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTR];
     oldindex = 8;
     if(index  > oldindex)
     {
-        mt6631_debug("index = %d oldindex = %d \n",index,oldindex);
+        printk("index = %d oldindex = %d \n",index,oldindex);
         offset = index - oldindex;
         while(offset >0)
         {
@@ -1498,7 +1504,7 @@ static void HeadsetVoloumeSet(void)
     }
     else
     {
-        mt6631_debug("index = %d oldindex = %d \n",index,oldindex);
+        printk("index = %d oldindex = %d \n",index,oldindex);
         offset = oldindex - index;
         while(offset >0)
         {
@@ -1523,7 +1529,7 @@ static void Audio_Amp_Change(int channels , bool enable)
         if (mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTL] == false &&
             mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTR] == false)
         {
-            mt6631_debug("%s \n", __func__);
+            printk("%s \n", __func__);
 
             OpenClassH();
 
@@ -1576,7 +1582,7 @@ static void Audio_Amp_Change(int channels , bool enable)
         if (mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTL] == false &&
             mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTR] == false)
         {
-            mt6631_debug("Audio_Amp_Change off amp\n");
+            printk("Audio_Amp_Change off amp\n");
             HeadsetVoloumeRestore();// Set HPR/HPL gain as 0dB, step by step
             //Ana_Set_Reg(ZCD_CON2,  0x0489 , 0xffff);
             Ana_Set_Reg(AUDBUF_CFG0, 0xE148, 0xffff); // Disable HPR/HPL
@@ -1611,7 +1617,7 @@ static void Audio_Amp_Change(int channels , bool enable)
 static int Audio_AmpL_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_AmpL_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTL]);
+    printk("Audio_AmpL_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTL]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTL];
     return 0;
 }
@@ -1620,7 +1626,7 @@ static int Audio_AmpL_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 {
     mutex_lock(&Ana_Ctrl_Mutex);
 
-    mt6631_debug("%s() gain = %ld \n ", __func__, ucontrol->value.integer.value[0]);
+    printk("%s() gain = %ld \n ", __func__, ucontrol->value.integer.value[0]);
     if ((ucontrol->value.integer.value[0]  == true) && (mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTL]  == false))
     {
         Audio_Amp_Change(AUDIO_ANALOG_CHANNELS_LEFT1 , true);
@@ -1638,7 +1644,7 @@ static int Audio_AmpL_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_AmpR_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_AmpR_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTR]);
+    printk("Audio_AmpR_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTR]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTR];
     return 0;
 }
@@ -1647,7 +1653,7 @@ static int Audio_AmpR_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 {
     mutex_lock(&Ana_Ctrl_Mutex);
 
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if ((ucontrol->value.integer.value[0]  == true) && (mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HPOUTR]  == false))
     {
         Audio_Amp_Change(AUDIO_ANALOG_CHANNELS_RIGHT1 , true);
@@ -1665,7 +1671,7 @@ static int Audio_AmpR_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static void  SetVoiceAmpVolume(void)
 {
     int index;
-    mt6631_debug("%s\n", __func__);
+    printk("%s\n", __func__);
     index =  mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HSOUTL];
     Ana_Set_Reg(ZCD_CON3, index , 0x001f);
 }
@@ -1674,13 +1680,13 @@ static void Voice_Amp_Change(bool enable)
 {
     if (enable)
     {
-        mt6631_debug("turn on ampL\n");
+        printk("turn on ampL\n");
         if (GetDLStatus() == false)
         {
             Ana_Set_Reg(0x0680, 0x0000, 0xffff); // Enable AUDGLB
             Ana_Set_Reg(TOP_CKSEL_CON_CLR, 0x0001, 0x0001); //use internal 26M
             TurnOnDacPower();
-            mt6631_debug("Voice_Amp_Change on amp\n");
+            printk("Voice_Amp_Change on amp\n");
             OpenClassAB();
             Ana_Set_Reg(AUDLDO_NVREG_CFG0,   0x0028, 0xffff); // Enable cap-less LDOs (1.6V)
             Ana_Set_Reg(AUDLDO_NVREG_CFG0,   0x0068, 0xffff); // Enable NV regulator (-1.6V)
@@ -1699,7 +1705,7 @@ static void Voice_Amp_Change(bool enable)
     }
     else
     {
-        mt6631_debug("turn off ampL\n");
+        printk("turn off ampL\n");
         if (GetDLStatus() == false)
         {
             TurnOffDacPower();
@@ -1716,7 +1722,7 @@ static void Voice_Amp_Change(bool enable)
 static int Voice_Amp_Get(struct snd_kcontrol *kcontrol,
                          struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Voice_Amp_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HSOUTL]);
+    printk("Voice_Amp_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HSOUTL]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HSOUTL];
     return 0;
 }
@@ -1724,7 +1730,7 @@ static int Voice_Amp_Get(struct snd_kcontrol *kcontrol,
 static int Voice_Amp_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     mutex_lock(&Ana_Ctrl_Mutex);
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if ((ucontrol->value.integer.value[0]  == true) && (mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_HSOUTL]  == false))
     {
         Voice_Amp_Change(true);
@@ -1747,7 +1753,7 @@ static void Speaker_Amp_Change(bool enable)
         {
             TurnOnDacPower();
         }
-        mt6631_debug("turn on Speaker_Amp_Change \n");
+        printk("turn on Speaker_Amp_Change \n");
         // here pmic analog control
         //Ana_Set_Reg(AUDNVREGGLB_CFG0  , 0x0000 , 0xffffffff);
         OpenClassAB();
@@ -1783,7 +1789,7 @@ static void Speaker_Amp_Change(bool enable)
     }
     else
     {
-        mt6631_debug("turn off Speaker_Amp_Change \n");
+        printk("turn off Speaker_Amp_Change \n");
 #ifdef CONFIG_MTK_SPEAKER
         if (Speaker_mode == AUDIO_SPEAKER_MODE_D)
         {
@@ -1816,7 +1822,7 @@ static void Speaker_Amp_Change(bool enable)
 static int Speaker_Amp_Get(struct snd_kcontrol *kcontrol,
                            struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_SPKL] ;
     return 0;
 }
@@ -1824,7 +1830,7 @@ static int Speaker_Amp_Get(struct snd_kcontrol *kcontrol,
 static int Speaker_Amp_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
 
-    mt6631_debug("%s() value = %ld \n ", __func__, ucontrol->value.integer.value[0]);
+    printk("%s() value = %ld \n ", __func__, ucontrol->value.integer.value[0]);
     if ((ucontrol->value.integer.value[0] == true) && (mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_SPKL]  == false))
     {
         Speaker_Amp_Change(true);
@@ -1846,7 +1852,7 @@ static void Headset_Speaker_Amp_Change(bool enable)
         {
             TurnOnDacPower();
         }
-        mt6631_debug("turn on Speaker_Amp_Change \n");
+        printk("turn on Speaker_Amp_Change \n");
         // here pmic analog control
         //Ana_Set_Reg(AUDNVREGGLB_CFG0  , 0x0000 , 0xffffffff);
         OpenClassAB();
@@ -1932,7 +1938,7 @@ static void Headset_Speaker_Amp_Change(bool enable)
         Ana_Set_Reg(AUDLDO_NVREG_CFG0  , 0x0028 , 0xffff); // Disable NV regulator (-1.6V)
         Ana_Set_Reg(AUDLDO_NVREG_CFG0  , 0x0000 , 0xffff); // Disable cap-less LDOs (1.6V)
 
-        mt6631_debug("turn off Speaker_Amp_Change \n");
+        printk("turn off Speaker_Amp_Change \n");
         if (GetDLStatus() == false)
         {
             Ana_Set_Reg(AFE_DL_SRC2_CON0_L , 0x1800 , 0xffff);
@@ -1950,7 +1956,7 @@ static void Headset_Speaker_Amp_Change(bool enable)
 static int Headset_Speaker_Amp_Get(struct snd_kcontrol *kcontrol,
                                    struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_SPEAKER_HEADSET_R] ;
     return 0;
 }
@@ -1959,7 +1965,7 @@ static int Headset_Speaker_Amp_Set(struct snd_kcontrol *kcontrol, struct snd_ctl
 {
     //struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
 
-    mt6631_debug("%s() gain = %lu \n ", __func__, ucontrol->value.integer.value[0]);
+    printk("%s() gain = %lu \n ", __func__, ucontrol->value.integer.value[0]);
     if ((ucontrol->value.integer.value[0]  == true) && (mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_VOLUME_SPEAKER_HEADSET_R]  == false))
     {
         Headset_Speaker_Amp_Change(true);
@@ -1973,6 +1979,43 @@ static int Headset_Speaker_Amp_Set(struct snd_kcontrol *kcontrol, struct snd_ctl
     return 0;
 }
 
+static bool Ext_Speaker_Mode = false;
+static int Audio_Ext_Speaker_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
+{
+    // add fpr ext speaker control , ex: GPIO pull high / low
+    Ext_Speaker_Mode = ucontrol->value.integer.value[0];
+    printk("%s Ext_Speaker_Mode = %d",__func__,Ext_Speaker_Mode);
+    if(Ext_Speaker_Mode == true) // on
+    {
+
+    }
+    else // off
+    {
+
+    }
+    return 0;
+}
+
+static int Audio_Ext_Speaker_Get(struct snd_kcontrol *kcontrol,
+                                   struct snd_ctl_elem_value *ucontrol)
+{
+    ucontrol->value.integer.value[0] = Ext_Speaker_Mode ;
+    return 0;
+}
+
+static const char *Ext_speaker_amp_function[] = {"Off", "On"};
+static const struct soc_enum Audio_Ext_dev_Enum[] =
+{
+    SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(Ext_speaker_amp_function), Ext_speaker_amp_function),
+};
+
+static const struct snd_kcontrol_new mt_ext_dev_controls[] =
+{
+    SOC_ENUM_EXT("Ext_Speaker_Amp_Switch", Audio_Ext_dev_Enum[0], Audio_Ext_Speaker_Get, Audio_Ext_Speaker_Set),
+};
+
+
+
 #ifdef CONFIG_MTK_SPEAKER
 static const char *speaker_amp_function[] = {"CALSSD", "CLASSAB", "RECEIVER"};
 static const char *speaker_PGA_function[] = {"0Db", "4Db", "5Db", "6Db", "7Db", "8Db", "9Db", "10Db",
@@ -2014,7 +2057,7 @@ static int Audio_Speaker_OcFlag_Get(struct snd_kcontrol *kcontrol,
 
 static int Audio_Speaker_OcFlag_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s is not support setting \n", __func__);
+    printk("%s is not support setting \n", __func__);
     return 0;
 }
 
@@ -2031,7 +2074,7 @@ static int Audio_Speaker_Current_Sensing_Set(struct snd_kcontrol *kcontrol, stru
 
     if (ucontrol->value.integer.value[0])
     {
-        mt6631_debug("enable Audio_Speaker_Current_Sensing_Set\n");
+        printk("enable Audio_Speaker_Current_Sensing_Set\n");
         //Ana_Set_Reg (SPK_CON12,  0x9300, 0xffff);CON12 invalid @ 6332
         Ana_Set_Reg(SPK_CON16,  0x8000, 0x8000); //[15]ISENSE enable
         Ana_Set_Reg(SPK_CON14,  0x0050, 0x0050); //[6]VSENSE enable
@@ -2041,7 +2084,7 @@ static int Audio_Speaker_Current_Sensing_Set(struct snd_kcontrol *kcontrol, stru
     }
     else
     {
-        mt6631_debug("disable Audio_Speaker_Current_Sensing_Set\n");
+        printk("disable Audio_Speaker_Current_Sensing_Set\n");
         //Ana_Set_Reg (SPK_CON12,  0x1300, 0xffff); CON12 invalid @ 6332
         Ana_Set_Reg(SPK_CON16,  0x0, 0x8000); //[15]ISENSE disable
         Ana_Set_Reg(SPK_CON14,  0x0, 0x0050); //[6]VSENSE enable
@@ -2156,7 +2199,7 @@ const uint32 I_Buffer_Table[HW_BUFFER_LENGTH] =
 
 int Audio_AuxAdcData_Get_ext(void)
 {
-    mt6631_debug("vibspk auxadc in+\n");
+    printk("vibspk auxadc in+\n");
     const int dRecCount = 1024;
     int dRecReadIndex = 0;
     int dValidCount = 0;
@@ -2200,7 +2243,7 @@ int Audio_AuxAdcData_Get_ext(void)
         Ana_Set_Reg(0x809E, 0x0004, 0xFFFF);
         while ((Ana_Get_Reg(0x809A) & 0x4) != 0)
         {
-            mt6631_debug("WAITING clock\n");
+            printk("WAITING clock\n");
         }
 
         Ana_Set_Reg(0x809A, 0x6023, 0xFFFF); //0x6027
@@ -2216,7 +2259,7 @@ int Audio_AuxAdcData_Get_ext(void)
         msleep(2);
         while ((Ana_Get_Reg(0x8CCE) & 0x8) != 0)
         {
-            mt6631_debug("WAITING FQMTR_CON0[3]\n");
+            printk("WAITING FQMTR_CON0[3]\n");
             //Do nothing;
         }
         //delay 1ms ，ensure Busy =1
@@ -2227,9 +2270,9 @@ int Audio_AuxAdcData_Get_ext(void)
         output_freq = (32768 * freq_meter_data) / (175);
         //output_freq = (32000*freq_meter_data)/(366*33);
         //output_freq = (12000000*freq_meter_data)/64;
-        mt6631_debug("freq_meter_data %d %d\n", freq_meter_data, output_freq);
+        printk("freq_meter_data %d %d\n", freq_meter_data, output_freq);
         output_freq = output_freq / 96000;
-        mt6631_debug("freq divider %d\n", output_freq);
+        printk("freq divider %d\n", output_freq);
     }
 #endif
     dMax = dCurValue = 0;
@@ -2255,10 +2298,10 @@ int Audio_AuxAdcData_Get_ext(void)
 
     //        Ana_Set_Reg(MT6332_AUXADC_CON33, 0, 0xFFFF);
 
-    //        mt6631_debug("hochi CON13 [%x] CON12 [%x]\n", Ana_Get_Reg(MT6332_AUXADC_CON13), Ana_Get_Reg(MT6332_AUXADC_CON12));
+    //        printk("hochi CON13 [%x] CON12 [%x]\n", Ana_Get_Reg(MT6332_AUXADC_CON13), Ana_Get_Reg(MT6332_AUXADC_CON12));
     Ana_Set_Reg(MT6332_AUXADC_CON13, 0x0200, 0x0200);     //[9]: enable
 
-    //        mt6631_debug("hochi while+ [%x]\n", Ana_Get_Reg(MT6332_AUXADC_CON33));
+    //        printk("hochi while+ [%x]\n", Ana_Get_Reg(MT6332_AUXADC_CON33));
 
     do
     {
@@ -2266,12 +2309,12 @@ int Audio_AuxAdcData_Get_ext(void)
         v_cnt = (iv_queue >> 8) & 0x3F;
         i_cnt = iv_queue & 0x3F;
         //ov_flag = iv_queue & 0x8000;
-        //            mt6631_debug("hochi o [%d] v [%d] i [%d] t [%d]\n",ov_flag,v_cnt,i_cnt,dRecReadIndex);
+        //            printk("hochi o [%d] v [%d] i [%d] t [%d]\n",ov_flag,v_cnt,i_cnt,dRecReadIndex);
         /*
             if (ov_flag != 0)
             {
-                mt6631_debug("hochi %s overflow \n", __func__);
-                mt6631_debug("hochi ov MT6332_AUXADC_CON33 [%x]\n", iv_queue);
+                printk("hochi %s overflow \n", __func__);
+                printk("hochi ov MT6332_AUXADC_CON33 [%x]\n", iv_queue);
                 break;
             }
             else
@@ -2279,7 +2322,7 @@ int Audio_AuxAdcData_Get_ext(void)
         {
             dCheckCount++;
         }
-        //mt6631_debug("o [%d] v [%d] i [%d]",ov_flag,v_cnt,i_cnt);
+        //printk("o [%d] v [%d] i [%d]",ov_flag,v_cnt,i_cnt);
 
         if (/*(v_cnt > 0) ||*/ (i_cnt > 0))
         {
@@ -2387,8 +2430,8 @@ int Audio_AuxAdcData_Get_ext(void)
                 /*
                 if ((v_tmp & 0x8000) == 0 || (i_tmp & 0x8000) == 0)
                 {
-                    mt6631_debug("hochi AUXADC_CON33=0x%x at %d\n\n", iv_queue, hw_read_idx);
-                    mt6631_debug("hochi v_tmp=0x%x i_tmp= 0x%x, hw_read_idx %d, V_Addr 0x%x, I_Addr 0x%x\n\n", v_tmp, i_tmp, hw_read_idx, I_Buffer_Table[hw_read_idx], V_Buffer_Table[hw_read_idx]);
+                    printk("hochi AUXADC_CON33=0x%x at %d\n\n", iv_queue, hw_read_idx);
+                    printk("hochi v_tmp=0x%x i_tmp= 0x%x, hw_read_idx %d, V_Addr 0x%x, I_Addr 0x%x\n\n", v_tmp, i_tmp, hw_read_idx, I_Buffer_Table[hw_read_idx], V_Buffer_Table[hw_read_idx]);
                 }
                 */
                 if (dCurValue > dMax)
@@ -2407,7 +2450,7 @@ int Audio_AuxAdcData_Get_ext(void)
             if (iov_flag)
             {
                 Ana_Set_Reg(MT6332_AUXADC_CON12, 0x0080, 0x0080);
-                mt6631_debug("vibspk auxadc skip io [%d] i [%d]\n", iov_flag, iov_cnt);
+                printk("vibspk auxadc skip io [%d] i [%d]\n", iov_flag, iov_cnt);
                 Ana_Set_Reg(MT6332_AUXADC_CON12, 0, 0x0080);
             }
         }
@@ -2417,9 +2460,9 @@ int Audio_AuxAdcData_Get_ext(void)
     while (dRecCount > dRecReadIndex/* && dValidCount > 0*/);
 
     // if (ov_flag)
-    //     mt6631_debug("hochi : overflow dRecReadIndex [%d] dValidCount [%d] dCheckCount [%d]\n",dRecReadIndex,dValidCount,dCheckCount);
+    //     printk("hochi : overflow dRecReadIndex [%d] dValidCount [%d] dCheckCount [%d]\n",dRecReadIndex,dValidCount,dCheckCount);
     // else
-    mt6631_debug("vibspk auxadc- : dMax = %d dRecReadIndex [%d] dValidCount [%d] dCheckCount [%d]\n", dMax, dRecReadIndex, dValidCount, dCheckCount);
+    printk("vibspk auxadc- : dMax = %d dRecReadIndex [%d] dValidCount [%d] dCheckCount [%d]\n", dMax, dRecReadIndex, dValidCount, dCheckCount);
 #if 0//0519
     Ana_Set_Reg(0x80be, 0x02, 0x02);
     Ana_Set_Reg(0x80c0, 0x02, 0x02);
@@ -2430,7 +2473,7 @@ int Audio_AuxAdcData_Get_ext(void)
 #endif
     Ana_Set_Reg(MT6332_AUXADC_CON13, 0, 0x0200);     //[9]: enable
     mEnableAuxAdc = 2;
-    mt6631_debug("vibspk auxadc-\n");
+    printk("vibspk auxadc-\n");
     return dMax;
 }
 
@@ -2451,7 +2494,7 @@ static int Audio_AuxAdcData_Get(struct snd_kcontrol *kcontrol,
 static int Audio_AuxAdcData_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     dAuxAdcChannel = ucontrol->value.integer.value[0];
-    mt6631_debug("%s dAuxAdcChannel = 0x%x \n", __func__, dAuxAdcChannel);
+    printk("%s dAuxAdcChannel = 0x%x \n", __func__, dAuxAdcChannel);
     return 0;
 }
 
@@ -2482,7 +2525,7 @@ static const char *Voice_Mux_function[] = {"Voice", "Speaker"};
 static int Lineout_PGAL_Get(struct snd_kcontrol *kcontrol,
                             struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Speaker_PGA_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_SPKL]);
+    printk("Speaker_PGA_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_SPKL]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_SPKL];
     return 0;
 }
@@ -2490,11 +2533,11 @@ static int Lineout_PGAL_Get(struct snd_kcontrol *kcontrol,
 static int Lineout_PGAL_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s(), index = %d\n", __func__, ucontrol->value.enumerated.item[0]);
+    printk("%s(), index = %d\n", __func__, ucontrol->value.enumerated.item[0]);
 
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(DAC_DL_PGA_Speaker_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -2510,7 +2553,7 @@ static int Lineout_PGAL_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_v
 static int Lineout_PGAR_Get(struct snd_kcontrol *kcontrol,
                             struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s  = %d\n", __func__, mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_SPKR]);
+    printk("%s  = %d\n", __func__, mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_SPKR]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_SPKR];
     return 0;
 }
@@ -2519,11 +2562,11 @@ static int Lineout_PGAR_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_v
 {
     //    struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
     int index = 0;
-    mt6631_debug("%s(), index = %d\n", __func__, ucontrol->value.enumerated.item[0]);
+    printk("%s(), index = %d\n", __func__, ucontrol->value.enumerated.item[0]);
 
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(DAC_DL_PGA_Speaker_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -2539,7 +2582,7 @@ static int Lineout_PGAR_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_v
 static int Handset_PGA_Get(struct snd_kcontrol *kcontrol,
                            struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Handset_PGA_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HSOUTL]);
+    printk("Handset_PGA_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HSOUTL]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HSOUTL];
     return 0;
 }
@@ -2549,11 +2592,11 @@ static int Handset_PGA_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_va
     //    struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
     int index = 0;
 
-    mt6631_debug("%s(), index = %d\n", __func__, ucontrol->value.enumerated.item[0]);
+    printk("%s(), index = %d\n", __func__, ucontrol->value.enumerated.item[0]);
 
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(DAC_DL_PGA_Handset_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -2570,7 +2613,7 @@ static int Handset_PGA_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_va
 static void HeadsetLVolumeSet(void)
 {
     int index = 0;
-    mt6631_debug("%s\n", __func__);
+    printk("%s\n", __func__);
     index =   mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTL];
     Ana_Set_Reg(ZCD_CON2, index , 0x001f);
 }
@@ -2578,7 +2621,7 @@ static void HeadsetLVolumeSet(void)
 static int Headset_PGAL_Get(struct snd_kcontrol *kcontrol,
                             struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Headset_PGAL_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTL]);
+    printk("Headset_PGAL_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTL]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTL];
     return 0;
 }
@@ -2588,11 +2631,11 @@ static int Headset_PGAL_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_v
     //    struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
     int index = 0;
 
-    mt6631_debug("%s(), index = %d arraysize = %d \n", __func__, ucontrol->value.enumerated.item[0], ARRAY_SIZE(DAC_DL_PGA_Headset_GAIN));
+    printk("%s(), index = %d arraysize = %d \n", __func__, ucontrol->value.enumerated.item[0], ARRAY_SIZE(DAC_DL_PGA_Headset_GAIN));
 
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(DAC_DL_PGA_Headset_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -2608,7 +2651,7 @@ static int Headset_PGAL_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_v
 static void HeadsetRVolumeSet(void)
 {
     int index = 0;
-    mt6631_debug("%s\n", __func__);
+    printk("%s\n", __func__);
     index =   mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTR];
     Ana_Set_Reg(ZCD_CON2, index << 7, 0x0f80);
 }
@@ -2616,7 +2659,7 @@ static void HeadsetRVolumeSet(void)
 static int Headset_PGAR_Get(struct snd_kcontrol *kcontrol,
                             struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Headset_PGAR_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTR]);
+    printk("Headset_PGAR_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTR]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_HPOUTR];
     return 0;
 }
@@ -2626,11 +2669,11 @@ static int Headset_PGAR_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_v
     //    struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
     int index = 0;
 
-    mt6631_debug("%s(), index = %d\n", __func__, ucontrol->value.enumerated.item[0]);
+    printk("%s(), index = %d\n", __func__, ucontrol->value.enumerated.item[0]);
 
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(DAC_DL_PGA_Headset_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -2647,7 +2690,7 @@ static int Headset_PGAR_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_v
 static int Voice_Mux_Get(struct snd_kcontrol *kcontrol,
                          struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Voice_Mux_Get = %d\n", mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_VOICE]);
+    printk("Voice_Mux_Get = %d\n", mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_VOICE]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_VOICE];
     return 0;
 }
@@ -2656,17 +2699,17 @@ static int Voice_Mux_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_valu
 {
 
     struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.integer.value[0])
     {
-        mt6631_debug("%s()\n", __func__);
+        printk("%s()\n", __func__);
         snd_soc_dapm_disable_pin(&codec->dapm, "SPEAKER");
         snd_soc_dapm_disable_pin(&codec->dapm, "RX_BIAS");
         snd_soc_dapm_sync(&codec->dapm);
     }
     else
     {
-        mt6631_debug("%s()\n", __func__);
+        printk("%s()\n", __func__);
         snd_soc_dapm_enable_pin(&codec->dapm, "SPEAKER");
         snd_soc_dapm_enable_pin(&codec->dapm, "RX_BIAS");
         snd_soc_dapm_sync(&codec->dapm);
@@ -2681,7 +2724,7 @@ static uint32 mHp_Impedance = 32;
 static int Audio_Hp_Impedance_Get(struct snd_kcontrol *kcontrol,
                                   struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_Hp_Impedance_Get = %d\n", mHp_Impedance);
+    printk("Audio_Hp_Impedance_Get = %d\n", mHp_Impedance);
     ucontrol->value.integer.value[0] = mHp_Impedance;
     return 0;
 
@@ -2690,14 +2733,14 @@ static int Audio_Hp_Impedance_Get(struct snd_kcontrol *kcontrol,
 static int Audio_Hp_Impedance_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     mHp_Impedance = ucontrol->value.integer.value[0];
-    mt6631_debug("%s Audio_Hp_Impedance_Set = 0x%x \n", __func__, mHp_Impedance);
+    printk("%s Audio_Hp_Impedance_Set = 0x%x \n", __func__, mHp_Impedance);
     return 0;
 }
 
 static int Aud_Clk_Buf_Get(struct snd_kcontrol *kcontrol,
                            struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("\%s n", __func__);
+    printk("\%s n", __func__);
     ucontrol->value.integer.value[0] = audck_buf_Count;
     return 0;
 }
@@ -2705,7 +2748,7 @@ static int Aud_Clk_Buf_Get(struct snd_kcontrol *kcontrol,
 static int Aud_Clk_Buf_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s(), value = %d\n", __func__, ucontrol->value.enumerated.item[0]);
+    printk("%s(), value = %d\n", __func__, ucontrol->value.enumerated.item[0]);
     if (ucontrol->value.integer.value[0])
     {
         audckbufEnable(true);
@@ -2797,7 +2840,7 @@ static bool GetDacStatus(void)
 
 static bool TurnOnADcPowerACC(int ADCType, bool enable)
 {
-    mt6631_debug("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
+    printk("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
     if (enable)
     {
         uint32 ULIndex = GetULFrequency(mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC]);
@@ -2917,6 +2960,10 @@ static bool TurnOnADcPowerACC(int ADCType, bool enable)
             Ana_Set_Reg(AUDPREAMP_CFG1, 0x0055, 0x007f);   //Enable ADC CH0_1 (PGA in)
             AudioPreAmp1_Sel(mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1]);
             Audio_ADC1_Set_Input(mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC1]);
+
+            Ana_Set_Reg(AFE_PMIC_NEWIF_CFG2, 0x302F | (GetULNewIFFrequency(mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC]) << 10), 0xffff); // config UL up8x_rxif adc voice mode
+            Ana_Set_Reg(AFE_UL_SRC0_CON0_H, (ULSampleRateTransform(SampleRate_VUL1) << 3 | ULSampleRateTransform(SampleRate_VUL1) << 1) , 0x001f);// ULsampling rate
+
             SetDCcoupleNP(AUDIO_ANALOG_DEVICE_IN_ADC1, mAudio_Analog_Mic1_mode);
         }
         else   if (ADCType == AUDIO_ANALOG_DEVICE_IN_ADC2)
@@ -2972,7 +3019,7 @@ static bool TurnOnADcPowerACC(int ADCType, bool enable)
         }
         else
         {
-            mt6631_debug("\n");
+            printk("\n");
         }
     }
     else
@@ -3031,7 +3078,7 @@ static bool TurnOnADcPowerACC(int ADCType, bool enable)
 
 static bool TurnOnADcPowerDmic(int ADCType, bool enable)
 {
-    mt6631_debug("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
+    printk("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
     if (enable)
     {
         uint32 ULIndex = GetULFrequency(mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC]);
@@ -3079,6 +3126,7 @@ static bool TurnOnADcPowerDmic(int ADCType, bool enable)
             Ana_Set_Reg(PMIC_AFE_TOP_CON0, (ULIndex << 7) | (ULIndex << 6), 0xffff); //configure ADC setting
             Ana_Set_Reg(AFE_UL_DL_CON0, 0x0001, 0xffff);   //turn on afe
             Ana_Set_Reg(AFE_UL_SRC0_CON0_H, (ULSampleRateTransform(SampleRate_VUL1) << 3 | ULSampleRateTransform(SampleRate_VUL1) << 1) , 0x001f); // ULsampling rate
+            Ana_Set_Reg(AFE_UL_SRC0_CON0_H, (1 << 7),(1<<7) ); // dmic open
             Ana_Set_Reg(AFE_UL_SRC0_CON0_H, (1 << 5) | (1 << 6), (1 << 5) | (1 << 6)); // dmic open
 
             Ana_Set_Reg(AFE_ADDA2_UL_SRC_CON0_H, (ULSampleRateTransform(SampleRate_VUL2) << 3 | ULSampleRateTransform(SampleRate_VUL2) << 1) , 0x001f); // ULsampling rate
@@ -3106,7 +3154,7 @@ static bool TurnOnADcPowerDmic(int ADCType, bool enable)
         }
         else
         {
-            mt6631_debug("\n");
+            printk("\n");
         }
     }
     else
@@ -3114,7 +3162,6 @@ static bool TurnOnADcPowerDmic(int ADCType, bool enable)
         if (GetAdcStatus() == false)
         {
 
-            //Ana_Set_Reg(AUDMICBIAS_CFG1, 0x2020, 0xffff);   //Enable MICBIAS2,3 (2.7V)
             SetMic2powermode(true);
             SetMic3powermode(true);
             OpenMicbias3(false);
@@ -3126,6 +3173,9 @@ static bool TurnOnADcPowerDmic(int ADCType, bool enable)
             Ana_Set_Reg(AUDDIGMI_CFG0, 0x0040, 0xffff);    //Disable DMIC0 (BIAS=10)
             Ana_Set_Reg(AUDDIGMI_CFG1, 0x0040, 0xffff);    //Disable DMIC1 (BIAS=10)
 
+            Ana_Set_Reg(AFE_UL_SRC0_CON0_H, (0 << 7),(1<<7) ); // dmic close
+            Ana_Set_Reg(AFE_UL_SRC0_CON0_H, (0 << 5) | (0 << 6), (1 << 5) | (1 << 6)); // dmic close
+
             Ana_Set_Reg(AFE_UL_SRC0_CON0_L, 0x0000, 0xffff);   //power on uplink
             Ana_Set_Reg(AFE_ADDA2_UL_SRC_CON0_L, 0x0000, 0xffff);   //power on uplink
             Ana_Set_Reg(AFE_ADDA2_UL_SRC_CON1_L, 0xa000, 0xffff);   //power off
@@ -3134,10 +3184,11 @@ static bool TurnOnADcPowerDmic(int ADCType, bool enable)
             ClsqEnable(false);
             NvregEnable(false);
             Topck_Enable(false);
+            audckbufEnable(false);
             if (GetDLStatus() == false)
             {
                 // check for if DL/UL will share same register
-
+                Ana_Set_Reg(AFE_UL_DL_CON0, 0x0000, 0xffff);   //turn off afe
             }
             else
             {
@@ -3169,7 +3220,7 @@ static bool TurnOnADcPowerDmic(int ADCType, bool enable)
 
 static bool TurnOnADcPowerDCC(int ADCType, bool enable)
 {
-    mt6631_debug("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
+    printk("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
     if (enable)
     {
         uint32 ULIndex = GetULFrequency(mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC]);
@@ -3302,6 +3353,10 @@ static bool TurnOnADcPowerDCC(int ADCType, bool enable)
             Audio_ADC1_Set_Input(mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC1]);
             SetDCcoupleNP(AUDIO_ANALOG_DEVICE_IN_ADC1, mAudio_Analog_Mic1_mode);
             AudioPreAmp1_Sel(mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1]);
+
+            Ana_Set_Reg(AFE_PMIC_NEWIF_CFG2, 0x302F | (GetULNewIFFrequency(mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC]) << 10), 0xffff); // config UL up8x_rxif adc voice mode
+            Ana_Set_Reg(AFE_UL_SRC0_CON0_H, (ULSampleRateTransform(SampleRate_VUL1) << 3 | ULSampleRateTransform(SampleRate_VUL1) << 1) , 0x001f);// ULsampling rate
+
         }
         else if (ADCType == AUDIO_ANALOG_DEVICE_IN_ADC2)
         {
@@ -3359,7 +3414,7 @@ static bool TurnOnADcPowerDCC(int ADCType, bool enable)
         }
         else
         {
-            mt6631_debug("\n");
+            printk("\n");
         }
     }
     else
@@ -3429,7 +3484,7 @@ static bool TurnOnADcPowerDCC(int ADCType, bool enable)
 
 static bool TurnOnADcPowerDCCECM(int ADCType, bool enable)
 {
-    mt6631_debug("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
+    printk("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
     if (enable)
     {
         uint32 ULIndex = GetULFrequency(mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC]);
@@ -3568,6 +3623,8 @@ static bool TurnOnADcPowerDCCECM(int ADCType, bool enable)
             AudioPreAmp1_Sel(mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1]);
             Audio_ADC1_Set_Input(mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC1]);
             SetDCcoupleNP(AUDIO_ANALOG_DEVICE_IN_ADC1, mAudio_Analog_Mic1_mode);
+            Ana_Set_Reg(AFE_PMIC_NEWIF_CFG2, 0x302F | (GetULNewIFFrequency(mBlockSampleRate[AUDIO_ANALOG_DEVICE_IN_ADC]) << 10), 0xffff); // config UL up8x_rxif adc voice mode
+            Ana_Set_Reg(AFE_UL_SRC0_CON0_H, (ULSampleRateTransform(SampleRate_VUL1) << 3 | ULSampleRateTransform(SampleRate_VUL1) << 1) , 0x001f);// ULsampling rate
 
         }
         else   if (ADCType == AUDIO_ANALOG_DEVICE_IN_ADC2)
@@ -3628,7 +3685,7 @@ static bool TurnOnADcPowerDCCECM(int ADCType, bool enable)
         }
         else
         {
-            mt6631_debug("\n");
+            printk("\n");
         }
     }
     else
@@ -3699,7 +3756,7 @@ static bool TurnOnADcPowerDCCECM(int ADCType, bool enable)
 
 static bool TurnOnVOWDigitalHW(bool enable)
 {
-    mt6631_debug("%s enable = %d \n", __func__, enable);
+    printk("%s enable = %d \n", __func__, enable);
     if (enable)
     {
         Ana_Set_Reg(AFE_VOW_TOP, 0x0810, 0xffff);   //VOW control (window mode)
@@ -3714,7 +3771,7 @@ static bool TurnOnVOWDigitalHW(bool enable)
 
 static bool TurnOnVOWADcPowerACC(int ADCType, bool enable)
 {
-    mt6631_debug("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
+    printk("%s ADCType = %d enable = %d \n", __func__, ADCType, enable);
     if (enable)
     {
 #if defined(VOW_TONE_TEST)
@@ -3866,14 +3923,14 @@ static const struct soc_enum Audio_UL_Enum[] =
 static int Audio_ADC1_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_ADC1_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC1]);
+    printk("Audio_ADC1_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC1]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC1];
     return 0;
 }
 
 static int Audio_ADC1_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     mutex_lock(&Ana_Power_Mutex);
     if (ucontrol->value.integer.value[0])
     {
@@ -3922,14 +3979,14 @@ static int Audio_ADC1_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_ADC2_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_ADC2_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC2]);
+    printk("Audio_ADC2_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC2]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC2];
     return 0;
 }
 
 static int Audio_ADC2_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     mutex_lock(&Ana_Power_Mutex);
     if (ucontrol->value.integer.value[0])
     {
@@ -3978,14 +4035,14 @@ static int Audio_ADC2_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_ADC3_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_ADC3_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC3]);
+    printk("Audio_ADC3_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC3]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC3];
     return 0;
 }
 
 static int Audio_ADC3_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     mutex_lock(&Ana_Power_Mutex);
     if (ucontrol->value.integer.value[0])
     {
@@ -4035,14 +4092,14 @@ static int Audio_ADC3_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_ADC4_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_ADC4_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC4]);
+    printk("Audio_ADC4_Get = %d\n", mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC4]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_IN_ADC4];
     return 0;
 }
 
 static int Audio_ADC4_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     mutex_lock(&Ana_Power_Mutex);
     if (ucontrol->value.integer.value[0])
     {
@@ -4091,7 +4148,7 @@ static int Audio_ADC4_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_ADC1_Sel_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC1]);
+    printk("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC1]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC1];
     return 0;
 }
@@ -4113,22 +4170,22 @@ static void Audio_ADC1_Set_Input(int Input)
     }
     else
     {
-        mt6631_debug("%s() warning \n ", __func__);
+        printk("%s() warning \n ", __func__);
     }
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
 }
 
 static int Audio_ADC1_Sel_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int input = ucontrol->value.integer.value[0] ;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Adc_Input_Sel))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     Audio_ADC1_Set_Input(input);
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
     mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC1] = ucontrol->value.integer.value[0];
     return 0;
 }
@@ -4136,7 +4193,7 @@ static int Audio_ADC1_Sel_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem
 static int Audio_ADC2_Sel_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC2]);
+    printk("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC2]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC2];
     return 0;
 }
@@ -4157,7 +4214,7 @@ static void Audio_ADC2_Set_Input(int Input)
     }
     else
     {
-        mt6631_debug("%s() warning \n ", __func__);
+        printk("%s() warning \n ", __func__);
     }
 }
 
@@ -4165,14 +4222,14 @@ static void Audio_ADC2_Set_Input(int Input)
 static int Audio_ADC2_Sel_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int input = ucontrol->value.integer.value[0];
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Adc_Input_Sel))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     Audio_ADC2_Set_Input(input);
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
     mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC2] = ucontrol->value.integer.value[0];
     return 0;
 }
@@ -4193,14 +4250,14 @@ static void Audio_ADC3_Set_Input(int Input)
     }
     else
     {
-        mt6631_debug("%s() warning \n ", __func__);
+        printk("%s() warning \n ", __func__);
     }
 }
 
 static int Audio_ADC3_Sel_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC3]);
+    printk("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC3]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC3];
     return 0;
 }
@@ -4208,15 +4265,15 @@ static int Audio_ADC3_Sel_Get(struct snd_kcontrol *kcontrol,
 static int Audio_ADC3_Sel_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int input = ucontrol->value.integer.value[0];
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
 
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Adc_Input_Sel))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     Audio_ADC3_Set_Input(input);
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
     mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC3] = ucontrol->value.integer.value[0];
     return 0;
 }
@@ -4224,7 +4281,7 @@ static int Audio_ADC3_Sel_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem
 static int Audio_ADC4_Sel_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC4]);
+    printk("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC4]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC4];
     return 0;
 }
@@ -4245,7 +4302,7 @@ static void Audio_ADC4_Set_Input(int Input)
     }
     else
     {
-        mt6631_debug("%s() warning \n ", __func__);
+        printk("%s() warning \n ", __func__);
     }
 }
 
@@ -4253,22 +4310,22 @@ static void Audio_ADC4_Set_Input(int Input)
 static int Audio_ADC4_Sel_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int input = ucontrol->value.integer.value[0];
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
 
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Adc_Input_Sel))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     Audio_ADC4_Set_Input(input);
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
     mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_MIC4] = ucontrol->value.integer.value[0];
     return 0;
 }
 
 static bool AudioPreAmp1_Sel(int Mul_Sel)
 {
-    mt6631_debug("%s Mul_Sel = %d ", __func__, Mul_Sel);
+    printk("%s Mul_Sel = %d ", __func__, Mul_Sel);
     if (Mul_Sel == 0)
     {
         Ana_Set_Reg(AUDPREAMP_CFG0, 0x0000, 0x0030);    // pinumx open
@@ -4284,7 +4341,7 @@ static bool AudioPreAmp1_Sel(int Mul_Sel)
     }
     else
     {
-        mt6631_debug("AnalogSetMux warning");
+        printk("AnalogSetMux warning");
     }
 
     return true;
@@ -4294,30 +4351,30 @@ static bool AudioPreAmp1_Sel(int Mul_Sel)
 static int Audio_PreAmp1_Get(struct snd_kcontrol *kcontrol,
                              struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1]; = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1]);
+    printk("%s() mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1]; = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1];
     return 0;
 }
 
 static int Audio_PreAmp1_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
 
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(PreAmp_Mux_function))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1] = ucontrol->value.integer.value[0];
     AudioPreAmp1_Sel(mCodec_data->mAudio_Ana_Mux[AUDIO_ANALOG_MUX_IN_PREAMP_1]);
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
     return 0;
 }
 
 static int Audio_PGA1_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_AmpR_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP1]);
+    printk("Audio_AmpR_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP1]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP1];
     return 0;
 }
@@ -4325,10 +4382,10 @@ static int Audio_PGA1_Get(struct snd_kcontrol *kcontrol,
 static int Audio_PGA1_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(ADC_UL_PGA_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -4341,7 +4398,7 @@ static int Audio_PGA1_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_PGA2_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_PGA2_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP2]);
+    printk("Audio_PGA2_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP2]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP2];
     return 0;
 }
@@ -4349,10 +4406,10 @@ static int Audio_PGA2_Get(struct snd_kcontrol *kcontrol,
 static int Audio_PGA2_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(ADC_UL_PGA_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -4365,7 +4422,7 @@ static int Audio_PGA2_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_PGA3_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_AmpR_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP3]);
+    printk("Audio_AmpR_Get = %d\n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP3]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP3];
     return 0;
 }
@@ -4373,10 +4430,10 @@ static int Audio_PGA3_Get(struct snd_kcontrol *kcontrol,
 static int Audio_PGA3_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(ADC_UL_PGA_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -4388,7 +4445,7 @@ static int Audio_PGA3_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_PGA4_Get(struct snd_kcontrol *kcontrol,
                           struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_AmpR_Get = %d \n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP4]);
+    printk("Audio_AmpR_Get = %d \n", mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP4]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP4];
     return 0;
 }
@@ -4396,10 +4453,10 @@ static int Audio_PGA4_Get(struct snd_kcontrol *kcontrol,
 static int Audio_PGA4_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(ADC_UL_PGA_GAIN))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
@@ -4411,7 +4468,7 @@ static int Audio_PGA4_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_val
 static int Audio_MicSource1_Get(struct snd_kcontrol *kcontrol,
                                 struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("Audio_MicSource1_Get = %d\n", mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_1]);
+    printk("Audio_MicSource1_Get = %d\n", mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_1]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_1];
     return 0;
 }
@@ -4419,14 +4476,14 @@ static int Audio_MicSource1_Get(struct snd_kcontrol *kcontrol,
 static int Audio_MicSource1_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Pmic_Digital_Mux))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() index = %d done \n", __func__, index);
+    printk("%s() index = %d done \n", __func__, index);
     Ana_Set_Reg(AFE_MIC_ARRAY_CFG, index | index << 8, 0x0303);
     mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_1] = ucontrol->value.integer.value[0];
     return 0;
@@ -4435,7 +4492,7 @@ static int Audio_MicSource1_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_el
 static int Audio_MicSource2_Get(struct snd_kcontrol *kcontrol,
                                 struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_2]);
+    printk("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_2]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_2];
     return 0;
 }
@@ -4443,14 +4500,14 @@ static int Audio_MicSource2_Get(struct snd_kcontrol *kcontrol,
 static int Audio_MicSource2_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Pmic_Digital_Mux))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
     Ana_Set_Reg(AFE_MIC_ARRAY_CFG, index << 2 | index << 10, 0x0c0c);
     mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_2] = ucontrol->value.integer.value[0];
     return 0;
@@ -4459,7 +4516,7 @@ static int Audio_MicSource2_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_el
 static int Audio_MicSource3_Get(struct snd_kcontrol *kcontrol,
                                 struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_3]);
+    printk("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_3]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_3];
     return 0;
 }
@@ -4467,14 +4524,14 @@ static int Audio_MicSource3_Get(struct snd_kcontrol *kcontrol,
 static int Audio_MicSource3_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Pmic_Digital_Mux))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
     Ana_Set_Reg(AFE_MIC_ARRAY_CFG, index << 4 | index << 12, 0x3030);
     mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_3] = ucontrol->value.integer.value[0];
     return 0;
@@ -4484,7 +4541,7 @@ static int Audio_MicSource3_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_el
 static int Audio_MicSource4_Get(struct snd_kcontrol *kcontrol,
                                 struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_4]);
+    printk("%s() = %d\n", __func__, mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_4]);
     ucontrol->value.integer.value[0] = mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_4];
     return 0;
 }
@@ -4492,14 +4549,14 @@ static int Audio_MicSource4_Get(struct snd_kcontrol *kcontrol,
 static int Audio_MicSource4_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
     int index = 0;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Pmic_Digital_Mux))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     index = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() done \n", __func__);
+    printk("%s() done \n", __func__);
     Ana_Set_Reg(AFE_MIC_ARRAY_CFG, index << 6 | index << 14, 0xc0c0);
     mCodec_data->mAudio_Ana_Mux[AUDIO_MICSOURCE_MUX_IN_4] = ucontrol->value.integer.value[0];
     return 0;
@@ -4509,42 +4566,42 @@ static int Audio_MicSource4_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_el
 static int Audio_Mic1_Mode_Select_Get(struct snd_kcontrol *kcontrol,
                                       struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s() mAudio_Analog_Mic1_mode = %d\n", __func__, mAudio_Analog_Mic1_mode);
+    printk("%s() mAudio_Analog_Mic1_mode = %d\n", __func__, mAudio_Analog_Mic1_mode);
     ucontrol->value.integer.value[0] = mAudio_Analog_Mic1_mode;
     return 0;
 }
 
 static int Audio_Mic1_Mode_Select_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Audio_AnalogMic_Mode))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     mAudio_Analog_Mic1_mode = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Analog_Mic1_mode);
+    printk("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Analog_Mic1_mode);
     return 0;
 }
 
 static int Audio_Mic2_Mode_Select_Get(struct snd_kcontrol *kcontrol,
                                       struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, mAudio_Analog_Mic2_mode);
+    printk("%s()  = %d\n", __func__, mAudio_Analog_Mic2_mode);
     ucontrol->value.integer.value[0] = mAudio_Analog_Mic2_mode;
     return 0;
 }
 
 static int Audio_Mic2_Mode_Select_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Audio_AnalogMic_Mode))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     mAudio_Analog_Mic2_mode = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Analog_Mic2_mode);
+    printk("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Analog_Mic2_mode);
     return 0;
 }
 
@@ -4552,63 +4609,63 @@ static int Audio_Mic2_Mode_Select_Set(struct snd_kcontrol *kcontrol, struct snd_
 static int Audio_Mic3_Mode_Select_Get(struct snd_kcontrol *kcontrol,
                                       struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, mAudio_Analog_Mic3_mode);
+    printk("%s()  = %d\n", __func__, mAudio_Analog_Mic3_mode);
     ucontrol->value.integer.value[0] = mAudio_Analog_Mic3_mode;
     return 0;
 }
 
 static int Audio_Mic3_Mode_Select_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Audio_AnalogMic_Mode))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     mAudio_Analog_Mic3_mode = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Analog_Mic3_mode);
+    printk("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Analog_Mic3_mode);
     return 0;
 }
 
 static int Audio_Mic4_Mode_Select_Get(struct snd_kcontrol *kcontrol,
                                       struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, mAudio_Analog_Mic4_mode);
+    printk("%s()  = %d\n", __func__, mAudio_Analog_Mic4_mode);
     ucontrol->value.integer.value[0] = mAudio_Analog_Mic4_mode;
     return 0;
 }
 
 static int Audio_Mic4_Mode_Select_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Audio_AnalogMic_Mode))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     mAudio_Analog_Mic4_mode = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Analog_Mic4_mode);
+    printk("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Analog_Mic4_mode);
     return 0;
 }
 
 static int Audio_Adc_Power_Mode_Get(struct snd_kcontrol *kcontrol,
                                     struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, mAdc_Power_Mode);
+    printk("%s()  = %d\n", __func__, mAdc_Power_Mode);
     ucontrol->value.integer.value[0] = mAdc_Power_Mode;
     return 0;
 }
 
 static int Audio_Adc_Power_Mode_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(ADC_power_mode))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
     mAdc_Power_Mode = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAdc_Power_Mode);
+    printk("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAdc_Power_Mode);
     return 0;
 }
 
@@ -4616,17 +4673,17 @@ static int Audio_Adc_Power_Mode_Set(struct snd_kcontrol *kcontrol, struct snd_ct
 static int Audio_Vow_ADC_Func_Switch_Get(struct snd_kcontrol *kcontrol,
                                          struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, mAudio_Vow_Analog_Func_Enable);
+    printk("%s()  = %d\n", __func__, mAudio_Vow_Analog_Func_Enable);
     ucontrol->value.integer.value[0] = mAudio_Vow_Analog_Func_Enable;
     return 0;
 }
 
 static int Audio_Vow_ADC_Func_Switch_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Audio_VOW_ADC_Function))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
 
@@ -4640,24 +4697,24 @@ static int Audio_Vow_ADC_Func_Switch_Set(struct snd_kcontrol *kcontrol, struct s
     }
 
     mAudio_Vow_Analog_Func_Enable = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Vow_Analog_Func_Enable);
+    printk("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Vow_Analog_Func_Enable);
     return 0;
 }
 
 static int Audio_Vow_Digital_Func_Switch_Get(struct snd_kcontrol *kcontrol,
                                              struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, mAudio_Vow_Digital_Func_Enable);
+    printk("%s()  = %d\n", __func__, mAudio_Vow_Digital_Func_Enable);
     ucontrol->value.integer.value[0] = mAudio_Vow_Digital_Func_Enable;
     return 0;
 }
 
 static int Audio_Vow_Digital_Func_Switch_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Audio_VOW_Digital_Function))
     {
-        mt6631_debug("return -EINVAL\n");
+        printk("return -EINVAL\n");
         return -EINVAL;
     }
 
@@ -4671,7 +4728,7 @@ static int Audio_Vow_Digital_Func_Switch_Set(struct snd_kcontrol *kcontrol, stru
     }
 
     mAudio_Vow_Digital_Func_Enable = ucontrol->value.integer.value[0];
-    mt6631_debug("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Vow_Digital_Func_Enable);
+    printk("%s() mAudio_Analog_Mic1_mode = %d \n", __func__, mAudio_Vow_Digital_Func_Enable);
     return 0;
 }
 
@@ -4680,7 +4737,7 @@ static int Audio_Vow_Cfg0_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
     int value = /*Ana_Get_Reg(AFE_MAD_CFG0)*/reg_AFE_VOW_CFG0;
-    mt6631_debug("%s()  = %d\n", __func__, value);
+    printk("%s()  = %d\n", __func__, value);
     ucontrol->value.integer.value[0] = value;
     return 0;
 }
@@ -4688,7 +4745,7 @@ static int Audio_Vow_Cfg0_Get(struct snd_kcontrol *kcontrol,
 static int Audio_Vow_Cfg0_Set(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
+    printk("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
     //Ana_Set_Reg(AFE_MAD_CFG0, ucontrol->value.integer.value[0], 0xffff);
     reg_AFE_VOW_CFG0 = ucontrol->value.integer.value[0];
     return 0;
@@ -4698,7 +4755,7 @@ static int Audio_Vow_Cfg1_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
     int value = /*Ana_Get_Reg(AFE_MAD_CFG1)*/reg_AFE_VOW_CFG1;
-    mt6631_debug("%s()  = %d\n", __func__, value);
+    printk("%s()  = %d\n", __func__, value);
     ucontrol->value.integer.value[0] = value;
     return 0;
 }
@@ -4706,7 +4763,7 @@ static int Audio_Vow_Cfg1_Get(struct snd_kcontrol *kcontrol,
 static int Audio_Vow_Cfg1_Set(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
+    printk("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
     //Ana_Set_Reg(AFE_MAD_CFG1, ucontrol->value.integer.value[0], 0xffff);
     reg_AFE_VOW_CFG1 = ucontrol->value.integer.value[0];
     return 0;
@@ -4716,7 +4773,7 @@ static int Audio_Vow_Cfg2_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
     int value = /*Ana_Get_Reg(AFE_MAD_CFG2)*/reg_AFE_VOW_CFG2;
-    mt6631_debug("%s()  = %d\n", __func__, value);
+    printk("%s()  = %d\n", __func__, value);
     ucontrol->value.integer.value[0] = value;
     return 0;
 }
@@ -4724,7 +4781,7 @@ static int Audio_Vow_Cfg2_Get(struct snd_kcontrol *kcontrol,
 static int Audio_Vow_Cfg2_Set(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
+    printk("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
     //Ana_Set_Reg(AFE_MAD_CFG2, ucontrol->value.integer.value[0], 0xffff);
     reg_AFE_VOW_CFG2 = ucontrol->value.integer.value[0];
     return 0;
@@ -4734,7 +4791,7 @@ static int Audio_Vow_Cfg3_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
     int value = /*Ana_Get_Reg(AFE_MAD_CFG3)*/reg_AFE_VOW_CFG3;
-    mt6631_debug("%s()  = %d\n", __func__, value);
+    printk("%s()  = %d\n", __func__, value);
     ucontrol->value.integer.value[0] = value;
     return 0;
 }
@@ -4742,7 +4799,7 @@ static int Audio_Vow_Cfg3_Get(struct snd_kcontrol *kcontrol,
 static int Audio_Vow_Cfg3_Set(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
+    printk("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
     //Ana_Set_Reg(AFE_MAD_CFG3, ucontrol->value.integer.value[0], 0xffff);
     reg_AFE_VOW_CFG3 = ucontrol->value.integer.value[0];
     return 0;
@@ -4752,7 +4809,7 @@ static int Audio_Vow_Cfg4_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
     int value = /*Ana_Get_Reg(AFE_MAD_CFG4)*/reg_AFE_VOW_CFG4;
-    mt6631_debug("%s()  = %d\n", __func__, value);
+    printk("%s()  = %d\n", __func__, value);
     ucontrol->value.integer.value[0] = value;
     return 0;
 }
@@ -4760,7 +4817,7 @@ static int Audio_Vow_Cfg4_Get(struct snd_kcontrol *kcontrol,
 static int Audio_Vow_Cfg4_Set(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
+    printk("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
     //Ana_Set_Reg(AFE_MAD_CFG4, ucontrol->value.integer.value[0], 0xffff);
     reg_AFE_VOW_CFG4 = ucontrol->value.integer.value[0];
     return 0;
@@ -4770,7 +4827,7 @@ static int Audio_Vow_Cfg5_Get(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
     int value = /*Ana_Get_Reg(AFE_MAD_CFG5)*/reg_AFE_VOW_CFG5;
-    mt6631_debug("%s()  = %d\n", __func__, value);
+    printk("%s()  = %d\n", __func__, value);
     ucontrol->value.integer.value[0] = value;
     return 0;
 }
@@ -4778,7 +4835,7 @@ static int Audio_Vow_Cfg5_Get(struct snd_kcontrol *kcontrol,
 static int Audio_Vow_Cfg5_Set(struct snd_kcontrol *kcontrol,
                               struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
+    printk("%s()  = %d\n", __func__, ucontrol->value.integer.value[0]);
     //Ana_Set_Reg(AFE_MAD_CFG5, ucontrol->value.integer.value[0], 0xffff);
     reg_AFE_VOW_CFG5 = ucontrol->value.integer.value[0];
     return 0;
@@ -4808,7 +4865,7 @@ static int SineTable_UL2_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_
 static int SineTable_UL2_Get(struct snd_kcontrol *kcontrol,
                              struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     ucontrol->value.integer.value[0] = SineTable_UL2_flag;
     return 0;
 }
@@ -4816,18 +4873,18 @@ static int SineTable_UL2_Get(struct snd_kcontrol *kcontrol,
 static int SineTable_DAC_HP_Get(struct snd_kcontrol *kcontrol,
                                 struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     ucontrol->value.integer.value[0] = SineTable_DAC_HP_flag;
     return 0;
 }
 
 static int SineTable_DAC_HP_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.integer.value[0])
     {
         SineTable_DAC_HP_flag = ucontrol->value.integer.value[0];
-        mt6631_debug("TurnOnDacPower\n");
+        printk("TurnOnDacPower\n");
         audckbufEnable(true);
         ClsqEnable(true);
         Topck_Enable(true);
@@ -5001,14 +5058,14 @@ static bool DAC_LOOP_DAC_HS_flag = false;
 static int ADC_LOOP_DAC_HS_Get(struct snd_kcontrol *kcontrol,
                                struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     ucontrol->value.integer.value[0] = DAC_LOOP_DAC_HS_flag;
     return 0;
 }
 
 static int ADC_LOOP_DAC_HS_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.integer.value[0])
     {
         DAC_LOOP_DAC_HS_flag = ucontrol->value.integer.value[0];
@@ -5026,7 +5083,7 @@ static bool DAC_LOOP_DAC_HP_flag = false;
 static int ADC_LOOP_DAC_HP_Get(struct snd_kcontrol *kcontrol,
                                struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     ucontrol->value.integer.value[0] = DAC_LOOP_DAC_HP_flag;
     return 0;
 }
@@ -5034,7 +5091,7 @@ static int ADC_LOOP_DAC_HP_Get(struct snd_kcontrol *kcontrol,
 static int ADC_LOOP_DAC_HP_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
 
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.integer.value[0])
     {
         DAC_LOOP_DAC_HP_flag = ucontrol->value.integer.value[0];
@@ -5052,14 +5109,14 @@ static bool Voice_Call_DAC_DAC_HS_flag = false;
 static int Voice_Call_DAC_DAC_HS_Get(struct snd_kcontrol *kcontrol,
                                      struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     ucontrol->value.integer.value[0] = Voice_Call_DAC_DAC_HS_flag;
     return 0;
 }
 
 static int Voice_Call_DAC_DAC_HS_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (ucontrol->value.integer.value[0])
     {
         Voice_Call_DAC_DAC_HS_flag = ucontrol->value.integer.value[0];
@@ -5177,7 +5234,7 @@ static int Voice_Call_DAC_DAC_HS_Set(struct snd_kcontrol *kcontrol, struct snd_c
 
 static bool GetLoopbackStatus(void)
 {
-    mt6631_debug("%s DAC_LOOP_DAC_HP_flag = %d DAC_LOOP_DAC_HP_flag = %d \n", __func__, DAC_LOOP_DAC_HP_flag, DAC_LOOP_DAC_HP_flag);
+    printk("%s DAC_LOOP_DAC_HP_flag = %d DAC_LOOP_DAC_HP_flag = %d \n", __func__, DAC_LOOP_DAC_HP_flag, DAC_LOOP_DAC_HP_flag);
     return (DAC_LOOP_DAC_HP_flag || DAC_LOOP_DAC_HP_flag);
 }
 
@@ -5240,24 +5297,24 @@ static const struct snd_kcontrol_new mt6331_UL_Codec_controls[] =
 static void speaker_event(struct snd_soc_dapm_widget *w,
                           struct snd_kcontrol *kcontrol, int event)
 {
-    mt6631_debug("speaker_event = %d\n", event);
+    printk("speaker_event = %d\n", event);
     switch (event)
     {
         case SND_SOC_DAPM_PRE_PMU:
-            mt6631_debug("%s SND_SOC_DAPM_PRE_PMU", __func__);
+            printk("%s SND_SOC_DAPM_PRE_PMU", __func__);
             break;
         case SND_SOC_DAPM_POST_PMU:
-            mt6631_debug("%s SND_SOC_DAPM_POST_PMU", __func__);
+            printk("%s SND_SOC_DAPM_POST_PMU", __func__);
             break;
         case SND_SOC_DAPM_PRE_PMD:
-            mt6631_debug("%s SND_SOC_DAPM_PRE_PMD", __func__);
+            printk("%s SND_SOC_DAPM_PRE_PMD", __func__);
             break;
         case SND_SOC_DAPM_POST_PMD:
-            mt6631_debug("%s SND_SOC_DAPM_POST_PMD", __func__);
+            printk("%s SND_SOC_DAPM_POST_PMD", __func__);
         case SND_SOC_DAPM_PRE_REG:
-            mt6631_debug("%s SND_SOC_DAPM_PRE_REG", __func__);
+            printk("%s SND_SOC_DAPM_PRE_REG", __func__);
         case SND_SOC_DAPM_POST_REG:
-            mt6631_debug("%s SND_SOC_DAPM_POST_REG", __func__);
+            printk("%s SND_SOC_DAPM_POST_REG", __func__);
             break;
     }
 }
@@ -5267,24 +5324,24 @@ static void speaker_event(struct snd_soc_dapm_widget *w,
 static int codec_enable_rx_bias(struct snd_soc_dapm_widget *w,
                                 struct snd_kcontrol *kcontrol, int event)
 {
-    mt6631_debug("codec_enable_rx_bias = %d\n", event);
+    printk("codec_enable_rx_bias = %d\n", event);
     switch (event)
     {
         case SND_SOC_DAPM_PRE_PMU:
-            mt6631_debug("%s SND_SOC_DAPM_PRE_PMU", __func__);
+            printk("%s SND_SOC_DAPM_PRE_PMU", __func__);
             break;
         case SND_SOC_DAPM_POST_PMU:
-            mt6631_debug("%s SND_SOC_DAPM_POST_PMU", __func__);
+            printk("%s SND_SOC_DAPM_POST_PMU", __func__);
             break;
         case SND_SOC_DAPM_PRE_PMD:
-            mt6631_debug("%s SND_SOC_DAPM_PRE_PMD", __func__);
+            printk("%s SND_SOC_DAPM_PRE_PMD", __func__);
             break;
         case SND_SOC_DAPM_POST_PMD:
-            mt6631_debug("%s SND_SOC_DAPM_POST_PMD", __func__);
+            printk("%s SND_SOC_DAPM_POST_PMD", __func__);
         case SND_SOC_DAPM_PRE_REG:
-            mt6631_debug("%s SND_SOC_DAPM_PRE_REG", __func__);
+            printk("%s SND_SOC_DAPM_PRE_REG", __func__);
         case SND_SOC_DAPM_POST_REG:
-            mt6631_debug("%s SND_SOC_DAPM_POST_REG", __func__);
+            printk("%s SND_SOC_DAPM_POST_REG", __func__);
             break;
     }
     return 0;
@@ -5311,7 +5368,7 @@ static const struct snd_soc_dapm_route mtk_audio_map[] =
 
 static void mt6331_codec_init_reg(struct snd_soc_codec *codec)
 {
-    mt6631_debug("%s  \n", __func__);
+    printk("%s  \n", __func__);
     Ana_Set_Reg(TOP_CLKSQ, 0x0 , 0xffff);
     Ana_Set_Reg(AUDNVREGGLB_CFG0, 0x0001, 0xffff);
     Ana_Set_Reg(TOP_CKPDN_CON0_SET, 0x3000, 0x3000);
@@ -5325,7 +5382,7 @@ static void mt6331_codec_init_reg(struct snd_soc_codec *codec)
 
 void InitCodecDefault(void)
 {
-    mt6631_debug("%s\n", __func__);
+    printk("%s\n", __func__);
     mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP1] = 3;
     mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP2] = 3;
     mCodec_data->mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_MICAMP3] = 3;
@@ -5342,7 +5399,7 @@ void InitCodecDefault(void)
 static int mt6331_codec_probe(struct snd_soc_codec *codec)
 {
     struct snd_soc_dapm_context *dapm = &codec->dapm;
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     if (mInitCodec == true)
     {
         return 0;
@@ -5367,6 +5424,8 @@ static int mt6331_codec_probe(struct snd_soc_codec *codec)
     snd_soc_add_codec_controls(codec, mt6331_snd_Speaker_controls,
                                ARRAY_SIZE(mt6331_snd_Speaker_controls));
 #endif
+    snd_soc_add_codec_controls(codec,mt_ext_dev_controls,
+                               ARRAY_SIZE(mt_ext_dev_controls));
 
     snd_soc_add_codec_controls(codec, Audio_snd_auxadc_controls,
                                ARRAY_SIZE(Audio_snd_auxadc_controls));
@@ -5375,7 +5434,7 @@ static int mt6331_codec_probe(struct snd_soc_codec *codec)
     mCodec_data = kzalloc(sizeof(mt6331_Codec_Data_Priv), GFP_KERNEL);
     if (!mCodec_data)
     {
-        mt6631_debug("Failed to allocate private data\n");
+        printk("Failed to allocate private data\n");
         return -ENOMEM;
     }
     snd_soc_codec_set_drvdata(codec, mCodec_data);
@@ -5390,14 +5449,14 @@ static int mt6331_codec_probe(struct snd_soc_codec *codec)
 
 static int mt6331_codec_remove(struct snd_soc_codec *codec)
 {
-    mt6631_debug("%s()\n", __func__);
+    printk("%s()\n", __func__);
     return 0;
 }
 
 static unsigned int mt6331_read(struct snd_soc_codec *codec,
                                 unsigned int reg)
 {
-    mt6631_debug("mt6331_read reg = 0x%x", reg);
+    printk("mt6331_read reg = 0x%x", reg);
     Ana_Get_Reg(reg);
     return 0;
 }
@@ -5405,7 +5464,7 @@ static unsigned int mt6331_read(struct snd_soc_codec *codec,
 static int mt6331_write(struct snd_soc_codec *codec, unsigned int reg,
                         unsigned int value)
 {
-    mt6631_debug("mt6331_write reg = 0x%x  value= 0x%x\n", reg, value);
+    printk("mt6331_write reg = 0x%x  value= 0x%x\n", reg, value);
     Ana_Set_Reg(reg , value , 0xffffffff);
     return 0;
 }
@@ -5459,7 +5518,7 @@ static int mtk_mt6331_codec_dev_probe(struct platform_device *pdev)
 
 static int mtk_mt6331_codec_dev_remove(struct platform_device *pdev)
 {
-    mt6631_debug("%s:\n", __func__);
+    printk("%s:\n", __func__);
 
     snd_soc_unregister_codec(&pdev->dev);
     return 0;
@@ -5481,7 +5540,7 @@ static struct platform_device *soc_mtk_codec6331_dev;
 static int __init mtk_mt6331_codec_init(void)
 {
     int ret = 0;
-    mt6631_debug("%s:\n", __func__);
+    printk("%s:\n", __func__);
 
     soc_mtk_codec6331_dev = platform_device_alloc(MT_SOC_CODEC_NAME, -1);
     if (!soc_mtk_codec6331_dev)
@@ -5502,7 +5561,7 @@ module_init(mtk_mt6331_codec_init);
 
 static void __exit mtk_mt6331_codec_exit(void)
 {
-    mt6631_debug("%s:\n", __func__);
+    printk("%s:\n", __func__);
 
     platform_driver_unregister(&mtk_codec_6331_driver);
 }
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_capture2.c b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_capture2.c
index e40b18a..5eb5f11 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_capture2.c
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_capture2.c
@@ -59,15 +59,6 @@
 #include "mt_soc_pcm_common.h"
 
 //information about
-static int pcm_debug = 0;
-module_param(pcm_debug, int, 0644);
-#define pcm_debug(fmt, args...) \
-       do \
-		{ \
-			if(pcm_debug){ \
-				printk(fmt, ##args); \
-			} \
-		}while(0);
 AFE_MEM_CONTROL_T  *VUL2_Control_context;
 static struct snd_dma_buffer *Capture_dma_buf  = NULL;
 static AudioDigtalI2S *mAudioDigitalI2S = NULL;
@@ -107,7 +98,7 @@ static struct snd_pcm_hardware mtk_capture2_hardware =
 
 static void StopAudioCaptureHardware(struct snd_pcm_substream *substream)
 {
-    pcm_debug("StopAudioCaptureHardware \n");
+    printk("StopAudioCaptureHardware \n");
 
     // here to set interrupt
     SetIrqEnable(Soc_Aud_IRQ_MCU_MODE_IRQ2_MCU_MODE, false);
@@ -142,7 +133,7 @@ static void ConfigAdcI2S(struct snd_pcm_substream *substream)
 
 static void StartAudioCaptureHardware(struct snd_pcm_substream *substream)
 {
-    pcm_debug("StartAudioCaptureHardware \n");
+    printk("StartAudioCaptureHardware \n");
 
     ConfigAdcI2S(substream);
     Set2ndI2SAdcIn(mAudioDigitalI2S);//To do, JY
@@ -177,14 +168,14 @@ static void StartAudioCaptureHardware(struct snd_pcm_substream *substream)
 
 static int mtk_capture2_pcm_prepare(struct snd_pcm_substream *substream)
 {
-    pcm_debug("mtk_capture2_pcm_prepare substream->rate = %d  substream->channels = %d \n", substream->runtime->rate, substream->runtime->channels);
+    printk("mtk_capture2_pcm_prepare substream->rate = %d  substream->channels = %d \n", substream->runtime->rate, substream->runtime->channels);
     return 0;
 }
 
 static int mtk_capture2_alsa_stop(struct snd_pcm_substream *substream)
 {
     AFE_BLOCK_T *Vul_Block = &(VUL2_Control_context->rBlock);
-    pcm_debug("mtk_capture2_alsa_stop \n");
+    printk("mtk_capture2_alsa_stop \n");
     StopAudioCaptureHardware(substream);
     Vul_Block->u4DMAReadIdx  = 0;
     Vul_Block->u4WriteIdx  = 0;
@@ -228,7 +219,7 @@ static void SetVULBuffer(struct snd_pcm_substream *substream,
 {
     struct snd_pcm_runtime *runtime = substream->runtime;
     AFE_BLOCK_T *pblock = &VUL2_Control_context->rBlock;
-    pcm_debug("SetVULBuffer\n");
+    printk("SetVULBuffer\n");
     pblock->pucPhysBufAddr =  runtime->dma_addr;
     pblock->pucVirtBufAddr =  runtime->dma_area;
     pblock->u4BufferSize = runtime->dma_bytes;
@@ -238,7 +229,7 @@ static void SetVULBuffer(struct snd_pcm_substream *substream,
     pblock->u4DataRemained  = 0;
     pblock->u4fsyncflag     = false;
     pblock->uResetFlag      = true;
-    pcm_debug("u4BufferSize = %d pucVirtBufAddr = %p pucPhysBufAddr = 0x%x\n",
+    printk("u4BufferSize = %d pucVirtBufAddr = %p pucPhysBufAddr = 0x%x\n",
            pblock->u4BufferSize, pblock->pucVirtBufAddr, pblock->pucPhysBufAddr);
     // set dram address top hardware
     Afe_Set_Reg(AFE_VUL_D2_BASE , pblock->pucPhysBufAddr , 0xffffffff);
@@ -252,23 +243,23 @@ static int mtk_capture2_pcm_hw_params(struct snd_pcm_substream *substream,
     struct snd_pcm_runtime *runtime = substream->runtime;
     struct snd_dma_buffer *dma_buf = &substream->dma_buffer;
     int ret = 0;
-    pcm_debug("mtk_capture2_pcm_hw_params \n");
+    printk("mtk_capture2_pcm_hw_params \n");
 
     dma_buf->dev.type = SNDRV_DMA_TYPE_DEV;
     dma_buf->dev.dev = substream->pcm->card->dev;
     dma_buf->private_data = NULL;
-    pcm_debug("Capture2_dma_buf = %p Capture2_dma_buf->area = %p\n", Capture_dma_buf, Capture_dma_buf->area);
+    printk("Capture2_dma_buf = %p Capture2_dma_buf->area = %p\n", Capture_dma_buf, Capture_dma_buf->area);
 
     if (mUL2UseSram == true)
     {
         runtime->dma_bytes = params_buffer_bytes(hw_params);
-        pcm_debug("mtk_capture2_pcm_hw_params mUL2UseSram dma_bytes = %d \n", runtime->dma_bytes);
+        printk("mtk_capture2_pcm_hw_params mUL2UseSram dma_bytes = %d \n", runtime->dma_bytes);
         substream->runtime->dma_area = (unsigned char *)Get_Afe_SramSphUL2Base_Pointer();
         substream->runtime->dma_addr = Get_Afe_Sram_SphUL2_Phys_Addr();
     }
     else if (Capture_dma_buf->area)
     {
-        pcm_debug("mtk_capture2_pcm_hw_params Capture_dma_buf->area\n");
+        printk("mtk_capture2_pcm_hw_params Capture_dma_buf->area\n");
         runtime->dma_bytes = Capture_dma_buf->bytes;
         runtime->dma_area = Capture_dma_buf->area;
         runtime->dma_addr = Capture_dma_buf->addr;
@@ -276,23 +267,23 @@ static int mtk_capture2_pcm_hw_params(struct snd_pcm_substream *substream,
     }
     else
     {
-        pcm_debug("mtk_capture2_pcm_hw_params snd_pcm_lib_malloc_pages\n");
+        printk("mtk_capture2_pcm_hw_params snd_pcm_lib_malloc_pages\n");
         ret =  snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(hw_params));
     }
-    pcm_debug("mtk_capture2_pcm_hw_params dma_bytes = %d dma_area = %p dma_addr = 0x%x\n",
+    printk("mtk_capture2_pcm_hw_params dma_bytes = %d dma_area = %p dma_addr = 0x%x\n",
            runtime->dma_bytes, runtime->dma_area, runtime->dma_addr);
 
-    pcm_debug("runtime->hw.buffer_bytes_max = 0x%x \n", runtime->hw.buffer_bytes_max);
+    printk("runtime->hw.buffer_bytes_max = 0x%x \n", runtime->hw.buffer_bytes_max);
     SetVULBuffer(substream, hw_params);
 
-    pcm_debug("dma_bytes = %d dma_area = %p dma_addr = 0x%x\n",
+    printk("dma_bytes = %d dma_area = %p dma_addr = 0x%x\n",
            substream->runtime->dma_bytes, substream->runtime->dma_area, substream->runtime->dma_addr);
     return ret;
 }
 
 static int mtk_capture2_pcm_hw_free(struct snd_pcm_substream *substream)
 {
-    pcm_debug("mtk_capture2_pcm_hw_free \n");
+    printk("mtk_capture2_pcm_hw_free \n");
     if (Capture_dma_buf->area)
     {
         return 0;
@@ -316,7 +307,7 @@ static int mtk_capture2_pcm_open(struct snd_pcm_substream *substream)
     AudDrv_Clk_On();
     AudDrv_ADC2_Clk_On();
 
-    pcm_debug("%s \n", __func__);
+    printk("%s \n", __func__);
     VUL2_Control_context = Get_Mem_ControlT(Soc_Aud_Digital_Block_MEM_VUL_DATA2);
 
     // can allocate sram_dbg
@@ -324,32 +315,33 @@ static int mtk_capture2_pcm_open(struct snd_pcm_substream *substream)
     if ((GetAudioSpeakerProtectSram() == true) && ((GetSramState() & SRAM_STATE_CAPTURE) == 0))
     {
         mtk_capture2_hardware.buffer_bytes_max = UL2_MAX_BUFFER_SIZE;
-        pcm_debug("mtk_capture2_pcm_open use sram %d\n", mtk_capture2_hardware.buffer_bytes_max);
+        printk("mtk_capture2_pcm_open use sram %d\n", mtk_capture2_hardware.buffer_bytes_max);
         SetSramState(SRAM_STATE_SPH_SPK_MNTR_SENSE_IV);
         mUL2UseSram = true;
     }
     else
     {
-        pcm_debug("mtk_capture2_pcm_open use dram \n");
+        printk("mtk_capture2_pcm_open use dram \n");
         mtk_capture2_hardware.buffer_bytes_max = UL2_MAX_BUFFER_SIZE;
     }
     AfeControlSramUnLock();
+    
     runtime->hw = mtk_capture2_hardware;
     memcpy((void *)(&(runtime->hw)), (void *)&mtk_capture2_hardware , sizeof(struct snd_pcm_hardware));
-    pcm_debug("runtime->hw->rates = 0x%x \n ", runtime->hw.rates);
+    printk("runtime->hw->rates = 0x%x \n ", runtime->hw.rates);
 
     ret = snd_pcm_hw_constraint_list(runtime, 0, SNDRV_PCM_HW_PARAM_RATE,
                                      &constraints_sample_rates);
     ret = snd_pcm_hw_constraint_integer(runtime, SNDRV_PCM_HW_PARAM_PERIODS);
     if (ret < 0)
     {
-        pcm_debug("snd_pcm_hw_constraint_integer failed\n");
+        printk("snd_pcm_hw_constraint_integer failed\n");
     }
 
-    pcm_debug("mtk_capture2_pcm_open runtime rate = %d channels = %d \n", runtime->rate, runtime->channels);
+    printk("mtk_capture2_pcm_open runtime rate = %d channels = %d \n", runtime->rate, runtime->channels);
     if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
     {
-        pcm_debug("SNDRV_PCM_STREAM_CAPTURE mtkalsa_capture_constraints\n");
+        printk("SNDRV_PCM_STREAM_CAPTURE mtkalsa_capture_constraints\n");
     }
     else
     {
@@ -358,7 +350,7 @@ static int mtk_capture2_pcm_open(struct snd_pcm_substream *substream)
 
     if (ret < 0)
     {
-        pcm_debug("mtk_capture2_pcm_close\n");
+        printk("mtk_capture2_pcm_close\n");
         mtk_capture2_pcm_close(substream);
         return ret;
     }
@@ -366,7 +358,7 @@ static int mtk_capture2_pcm_open(struct snd_pcm_substream *substream)
     {
         AudDrv_Emi_Clk_On();
     }
-    pcm_debug("mtk_capture2_pcm_open return\n");
+    printk("mtk_capture2_pcm_open return\n");
     return 0;
 }
 
@@ -390,7 +382,7 @@ static int mtk_capture2_pcm_close(struct snd_pcm_substream *substream)
 
 static int mtk_capture2_alsa_start(struct snd_pcm_substream *substream)
 {
-    pcm_debug("mtk_capture2_alsa_start \n");
+    printk("mtk_capture2_alsa_start \n");
     SetMemifSubStream(Soc_Aud_Digital_Block_MEM_VUL_DATA2, substream);
     StartAudioCaptureHardware(substream);
     return 0;
@@ -398,7 +390,7 @@ static int mtk_capture2_alsa_start(struct snd_pcm_substream *substream)
 
 static int mtk_capture2_pcm_trigger(struct snd_pcm_substream *substream, int cmd)
 {
-    pcm_debug("mtk_capture2_pcm_trigger cmd = %d\n", cmd);
+    printk("mtk_capture2_pcm_trigger cmd = %d\n", cmd);
 
     switch (cmd)
     {
@@ -416,7 +408,7 @@ static bool CheckNullPointer(void *pointer)
 {
     if (pointer == NULL)
     {
-        pcm_debug("CheckNullPointer pointer = NULL");
+        printk("CheckNullPointer pointer = NULL");
         return true;
     }
     return false;
@@ -443,7 +435,7 @@ static int mtk_capture2_pcm_copy(struct snd_pcm_substream *substream,
 
     if (pVUL_MEM_ConTrol == NULL)
     {
-        pcm_debug("cannot find MEM control !!!!!!!\n");
+        printk("cannot find MEM control !!!!!!!\n");
         msleep(50);
         return 0;
     }
@@ -451,13 +443,13 @@ static int mtk_capture2_pcm_copy(struct snd_pcm_substream *substream,
     if (Vul_Block->u4BufferSize <= 0)
     {
         msleep(50);
-        pcm_debug("Vul_Block->u4BufferSize <= 0  =%d\n", Vul_Block->u4BufferSize);
+        printk("Vul_Block->u4BufferSize <= 0  =%d\n", Vul_Block->u4BufferSize);
         return 0;
     }
 
     if (CheckNullPointer((void *)Vul_Block->pucVirtBufAddr))
     {
-        pcm_debug("CheckNullPointer  pucVirtBufAddr = %p\n", Vul_Block->pucVirtBufAddr);
+        printk("CheckNullPointer  pucVirtBufAddr = %p\n", Vul_Block->pucVirtBufAddr);
         return 0;
     }
 
@@ -487,14 +479,14 @@ static int mtk_capture2_pcm_copy(struct snd_pcm_substream *substream,
     {
         if (DMA_Read_Ptr != Vul_Block->u4DMAReadIdx)
         {
-            pcm_debug("mtk_capture2_pcm_copy 1, read_size:%x, DataRemained:%x, DMA_Read_Ptr:0x%x, DMAReadIdx:%x \r\n",
+            printk("mtk_capture2_pcm_copy 1, read_size:%x, DataRemained:%x, DMA_Read_Ptr:0x%x, DMAReadIdx:%x \r\n",
                    read_size, Vul_Block->u4DataRemained, DMA_Read_Ptr, Vul_Block->u4DMAReadIdx);
         }
 
         if (copy_to_user((void __user *)Read_Data_Ptr, (Vul_Block->pucVirtBufAddr + DMA_Read_Ptr), read_size))
         {
 
-            pcm_debug("mtk_capture2_pcm_copy Fail 1 copy to user Read_Data_Ptr:%p, pucVirtBufAddr:%p, u4DMAReadIdx:0x%x, DMA_Read_Ptr:0x%x,read_size:%x", Read_Data_Ptr, Vul_Block->pucVirtBufAddr, Vul_Block->u4DMAReadIdx, DMA_Read_Ptr, read_size);
+            printk("mtk_capture2_pcm_copy Fail 1 copy to user Read_Data_Ptr:%p, pucVirtBufAddr:%p, u4DMAReadIdx:0x%x, DMA_Read_Ptr:0x%x,read_size:%x", Read_Data_Ptr, Vul_Block->pucVirtBufAddr, Vul_Block->u4DMAReadIdx, DMA_Read_Ptr, read_size);
             return 0;
         }
 
@@ -521,13 +513,13 @@ static int mtk_capture2_pcm_copy(struct snd_pcm_substream *substream,
         if (DMA_Read_Ptr != Vul_Block->u4DMAReadIdx)
         {
 
-            pcm_debug("mtk_capture2_pcm_copy 2, read_size1:%x, DataRemained:%x, DMA_Read_Ptr:0x%x, DMAReadIdx:%x \r\n",
+            printk("mtk_capture2_pcm_copy 2, read_size1:%x, DataRemained:%x, DMA_Read_Ptr:0x%x, DMAReadIdx:%x \r\n",
                    size_1, Vul_Block->u4DataRemained, DMA_Read_Ptr, Vul_Block->u4DMAReadIdx);
         }
         if (copy_to_user((void __user *)Read_Data_Ptr, (Vul_Block->pucVirtBufAddr + DMA_Read_Ptr), size_1))
         {
 
-            pcm_debug("mtk_capture2_pcm_copy Fail 2 copy to user Read_Data_Ptr:%p, pucVirtBufAddr:%p, u4DMAReadIdx:0x%x, DMA_Read_Ptr:0x%x,read_size:%x",
+            printk("mtk_capture2_pcm_copy Fail 2 copy to user Read_Data_Ptr:%p, pucVirtBufAddr:%p, u4DMAReadIdx:0x%x, DMA_Read_Ptr:0x%x,read_size:%x",
                    Read_Data_Ptr, Vul_Block->pucVirtBufAddr, Vul_Block->u4DMAReadIdx, DMA_Read_Ptr, read_size);
             return 0;
         }
@@ -547,13 +539,13 @@ static int mtk_capture2_pcm_copy(struct snd_pcm_substream *substream,
         if (DMA_Read_Ptr != Vul_Block->u4DMAReadIdx)
         {
 
-            pcm_debug("mtk_capture2_pcm_copy 3, read_size2:%x, DataRemained:%x, DMA_Read_Ptr:0x%x, DMAReadIdx:%x \r\n",
+            printk("mtk_capture2_pcm_copy 3, read_size2:%x, DataRemained:%x, DMA_Read_Ptr:0x%x, DMAReadIdx:%x \r\n",
                    size_2, Vul_Block->u4DataRemained, DMA_Read_Ptr, Vul_Block->u4DMAReadIdx);
         }
         if (copy_to_user((void __user *)(Read_Data_Ptr + size_1), (Vul_Block->pucVirtBufAddr + DMA_Read_Ptr), size_2))
         {
 
-            pcm_debug("mtk_capture2_pcm_copy Fail 3 copy to user Read_Data_Ptr:%p, pucVirtBufAddr:%p, u4DMAReadIdx:0x%x , DMA_Read_Ptr:0x%x, read_size:%x", Read_Data_Ptr, Vul_Block->pucVirtBufAddr, Vul_Block->u4DMAReadIdx, DMA_Read_Ptr, read_size);
+            printk("mtk_capture2_pcm_copy Fail 3 copy to user Read_Data_Ptr:%p, pucVirtBufAddr:%p, u4DMAReadIdx:0x%x , DMA_Read_Ptr:0x%x, read_size:%x", Read_Data_Ptr, Vul_Block->pucVirtBufAddr, Vul_Block->u4DMAReadIdx, DMA_Read_Ptr, read_size);
             return read_count << 2;
         }
 
@@ -578,7 +570,7 @@ static int mtk_capture2_pcm_silence(struct snd_pcm_substream *substream,
                                    int channel, snd_pcm_uframes_t pos,
                                    snd_pcm_uframes_t count)
 {
-    pcm_debug("dummy_pcm_silence \n");
+    printk("dummy_pcm_silence \n");
     return 0; /* do nothing */
 }
 
@@ -588,7 +580,7 @@ static void *dummy_page[2];
 static struct page *mtk_capture2_pcm_page(struct snd_pcm_substream *substream,
                                          unsigned long offset)
 {
-    pcm_debug("%s \n", __func__);
+    printk("%s \n", __func__);
     return virt_to_page(dummy_page[substream->stream]); /* the same page */
 }
 
@@ -617,13 +609,13 @@ static struct snd_soc_platform_driver mtk_soc_platform =
 
 static int mtk_capture2_probe(struct platform_device *pdev)
 {
-    pcm_debug("mtk_capture2_probe\n");
+    printk("mtk_capture2_probe\n");
     if (pdev->dev.of_node)
     {
         dev_set_name(&pdev->dev, "%s", MT_SOC_UL2_PCM);
     }
 
-    pcm_debug("%s: dev name %s\n", __func__, dev_name(&pdev->dev));
+    printk("%s: dev name %s\n", __func__, dev_name(&pdev->dev));
     return snd_soc_register_platform(&pdev->dev,
                                      &mtk_soc_platform);
 }
@@ -641,14 +633,14 @@ static int mtk_asoc_capture2_pcm_new(struct snd_soc_pcm_runtime *rtd)
     {
         card->dev->coherent_dma_mask = DMA_BIT_MASK(32);
     }
-    pcm_debug("mtk_asoc_capture2_pcm_new \n");
+    printk("mtk_asoc_capture2_pcm_new \n");
     return ret;
 }
 
 
 static int mtk_afe_capture2_probe(struct snd_soc_platform *platform)
 {
-    pcm_debug("mtk_afe_capture2_probe\n");
+    printk("mtk_afe_capture2_probe\n");
     AudDrv_Allocate_mem_Buffer(Soc_Aud_Digital_Block_MEM_VUL_DATA2, UL2_MAX_BUFFER_SIZE);
     Capture_dma_buf =  Get_Mem_Buffer(Soc_Aud_Digital_Block_MEM_VUL_DATA2);
     mAudioDigitalI2S =  kzalloc(sizeof(AudioDigtalI2S), GFP_KERNEL);
@@ -678,7 +670,7 @@ static struct platform_device *soc_mtkafe_capture2_dev;
 static int __init mtk_soc_capture2_platform_init(void)
 {
     int ret = 0;
-    pcm_debug("%s\n", __func__);
+    printk("%s\n", __func__);
     soc_mtkafe_capture2_dev = platform_device_alloc(MT_SOC_UL2_PCM, -1);
     if (!soc_mtkafe_capture2_dev)
     {
@@ -700,7 +692,7 @@ module_init(mtk_soc_capture2_platform_init);
 static void __exit mtk_soc_capture2_platform_exit(void)
 {
 
-    pcm_debug("%s\n", __func__);
+    printk("%s\n", __func__);
     platform_driver_unregister(&mtk_afe_capture2_driver);
 }
 
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_common.h b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_common.h
index 4e29da2..9c0c5a2 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_common.h
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_common.h
@@ -130,9 +130,9 @@ define for PCM settings
 #define AWB_MAX_PERIOD_SIZE     AWB_MAX_BUFFER_SIZE
 
 
-#define HDMI_MAX_BUFFER_SIZE     (192*1024)
+#define HDMI_MAX_BUFFER_SIZE     (192*1024*8)
 
-#define HDMI_MULTI_MAX_BUFFER_SIZE     (192*1024)
+#define HDMI_MULTI_MAX_BUFFER_SIZE     (192*1024*8)
 #define HDMI_STEREO_MAX_BUFFER_SIZE     (24*1024)
 
 
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_dl1_i2s0.c b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_dl1_i2s0.c
index 866e3a8..27435c4 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_dl1_i2s0.c
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_dl1_i2s0.c
@@ -94,15 +94,18 @@ static int Audio_i2s0_SideGen_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_
 {
     uint32 u32AudioI2S = 0, MclkDiv0, MclkDiv3, REG448 = 0, REG44C = 0;
     uint32 samplerate = 0;
+    uint32 PreState  = mi2s0_sidegen_control;
     AudDrv_Clk_On();
 
-    printk("%s() mi2s0_hdoutput_control = %d\n", __func__, mi2s0_hdoutput_control);
     if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(i2s0_SIDEGEN))
     {
         printk("return -EINVAL\n");
         return -EINVAL;
     }
+
     mi2s0_sidegen_control = ucontrol->value.integer.value[0];
+    printk("%s() mi2s0_hdoutput_control = %d PreState = %d \n", __func__, mi2s0_hdoutput_control,PreState);
+
     if (mi2s0_sidegen_control == 1)
     {
         samplerate = 48000;
@@ -149,7 +152,8 @@ static int Audio_i2s0_SideGen_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_
         REG44C = Afe_Get_Reg(AFE_GAIN1_CONN3);
         printk("%s() AFE_GAIN1_CONN3 (0X44C) =0x%x\n",  __func__, REG44C);
         // Set HW_GAIN1
-        SetHwDigitalGainMode(Soc_Aud_Hw_Digital_Gain_HW_DIGITAL_GAIN1, samplerate, 0x80);
+        SetHwDigitalGainMode(Soc_Aud_Hw_Digital_Gain_HW_DIGITAL_GAIN1, samplerate, 0x1F);
+        Afe_Set_Reg(AFE_GAIN1_CUR, 0x80000, 0xfffff);
         SetHwDigitalGainEnable(Soc_Aud_Hw_Digital_Gain_HW_DIGITAL_GAIN1, true);
         SetHwDigitalGain(0x80000, Soc_Aud_Hw_Digital_Gain_HW_DIGITAL_GAIN1);
 
@@ -160,9 +164,11 @@ static int Audio_i2s0_SideGen_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_
     if (mi2s0_sidegen_control != 0)
     {
         printk("%s() mi2s0_sidegen_control=%d, mi2s0_hdoutput_control=%d\n",  __func__, mi2s0_sidegen_control, mi2s0_hdoutput_control);
-        AudDrv_Clk_On();
-        Afe_Set_Reg(AUDIO_TOP_CON1, 0x2,  0x2);  // I2S_SOFT_Reset
-        Afe_Set_Reg(AUDIO_TOP_CON1, 0x1 << 4,  0x1 << 4); // I2S_SOFT_Reset
+        if( (mi2s0_sidegen_control == false) || (PreState == false) )  // prevent open twice
+        {
+            AudDrv_Clk_On();
+        }
+        Afe_Set_Reg(AUDIO_TOP_CON1, 0x2,  0x2);  // I2S0_SOFT_Reset
         uint32 Audio_I2S_Dac = 0;
         SetSampleRate(Soc_Aud_Digital_Block_MEM_I2S,  samplerate);
         Audio_I2S_Dac |= (Soc_Aud_LR_SWAP_NO_SWAP << 31);
@@ -200,25 +206,30 @@ static int Audio_i2s0_SideGen_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_
         {
             printk("%s(), mi2s0_sidegen_control=%d, write AFE_I2S_CON (0x%x), AFE_I2S_CON3(0x%x)\n", __func__, mi2s0_sidegen_control, Audio_I2S_Dac, u32AudioI2S);
             Afe_Set_Reg(AFE_I2S_CON, 0x0, 0x1);
+            Afe_Set_Reg(AFE_I2S_CON3, 0x0, 0x1);
+            udelay(200);
             SetMemoryPathEnable(Soc_Aud_Digital_Block_I2S_OUT_2, true);
             Afe_Set_Reg(AFE_I2S_CON, Audio_I2S_Dac | 0x1, MASK_ALL);
             Afe_Set_Reg(AFE_I2S_CON3, u32AudioI2S | 1, AFE_MASK_ALL);
-            Afe_Set_Reg(AUDIO_TOP_CON1, 0x0 << 4, 0x1 << 4);
-            Afe_Set_Reg(AUDIO_TOP_CON1, 0x0, 0x2); // I2S_SOFT_Reset
+            udelay(200);
+            Afe_Set_Reg(AUDIO_TOP_CON1, 0x0, 0x2); // I2S0_SOFT_Reset
+            msleep(1);
             EnableAfe(true);
         }
         else
         {
             printk("%s(), mi2s0_sidegen_control=%d, write AFE_I2S_CON (0x%x), AFE_I2S_CON3(0x%x)\n", __func__, mi2s0_sidegen_control, Audio_I2S_Dac, u32AudioI2S);
             Afe_Set_Reg(AFE_I2S_CON, 0x0, 0x1);
+            Afe_Set_Reg(AFE_I2S_CON3, 0x0, 0x1);
+            udelay(200);
             SetMemoryPathEnable(Soc_Aud_Digital_Block_I2S_OUT_2, true);
             Afe_Set_Reg(AFE_I2S_CON, Audio_I2S_Dac | 0x1, MASK_ALL);
             Afe_Set_Reg(AFE_I2S_CON3, u32AudioI2S | 1, AFE_MASK_ALL);
-            Afe_Set_Reg(AUDIO_TOP_CON1, 0x0 << 4, 0x1 << 4);
-            Afe_Set_Reg(AUDIO_TOP_CON1, 0x0, 0x2); // I2S_SOFT_Reset
+            udelay(200);
+            Afe_Set_Reg(AUDIO_TOP_CON1, 0x0, 0x2); // I2S0_SOFT_Reset
+            msleep(1);
             EnableAfe(true);
         }
-
     }
     else
     {
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_hdmi.c b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_hdmi.c
index 3e85f68..096d26c 100755
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_hdmi.c
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_hdmi.c
@@ -139,14 +139,9 @@ static int mtk_afe_hdmi_probe(struct snd_soc_platform *platform);
 //#define HDMI_MAX_BUFFER_SIZE     (192*1024)
 //#define MIN_PERIOD_SIZE       64
 //#define MAX_PERIOD_SIZE     HDMI_MAX_BUFFER_SIZE
-#define USE_FORMATS         (SNDRV_PCM_FMTBIT_U8 | SNDRV_PCM_FMTBIT_S16_LE)
-#define USE_RATE        SNDRV_PCM_RATE_CONTINUOUS | SNDRV_PCM_RATE_8000_192000
-#define USE_RATE_MIN        8000
-#define USE_RATE_MAX        192000
 #define HDMI_USE_CHANNELS_MIN     1
 #define HDMI_USE_CHANNELS_MAX    8
-#define USE_PERIODS_MIN     512
-#define USE_PERIODS_MAX     16384
+
 
 static kal_int32 Previous_Hw_cur = 0;
 
@@ -1065,7 +1060,6 @@ static int mtk_pcm_hdmi_prepare(struct snd_pcm_substream *substream)
         Afe_Set_Reg(AFE_TDM_CON2, 1 << 20, 0x00100000); // enable TDM to I2S path
 #endif 
 #endif
-//        copyzerowavetohdmi(2);
         mHDMIPrepareDone = true;
 
     }
@@ -1104,8 +1098,6 @@ static int mtk_pcm_hdmi_start(struct snd_pcm_substream *substream)
 #if 0
     copysinewavetohdmi(runtime->channels);
 #endif
-
-
     // here to set interrupt
 
     if (runtime->channels == 2)
@@ -1169,18 +1161,6 @@ static int mtk_pcm_hdmi_copy(struct snd_pcm_substream *substream,
     // check which memif nned to be write
     Afe_Block = &(pMemControl->rBlock);
 
-#if 0
-    if (zerocopycnt  < 8)
-    {
-        PRINTK_AUD_HDMI("[mtk_pcm_hdmi_copy]copyzerowavetohdmi[%d]\n",zerocopycnt);
-    
-        copyzerowavetohdmi(2);
-        zerocopycnt++;      
-        return 0;
-    }
-#endif
-
-
     // handle for buffer management
 
     PRINTK_AUD_HDMI("[mtk_pcm_hdmi_copy] count = %d WriteIdx=%x, ReadIdx=%x, DataRemained=%x \n",
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_routing.c b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_routing.c
index d59e67f..b403546 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_routing.c
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_routing.c
@@ -79,6 +79,11 @@ static int mtk_routing_pcm_close(struct snd_pcm_substream *substream);
 static int mtk_asoc_routing_pcm_new(struct snd_soc_pcm_runtime *rtd);
 static int mtk_afe_routing_platform_probe(struct snd_soc_platform *platform);
 extern int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd);
+#ifdef CONFIG_MTK_NXP_TFA9890
+extern void NxpSpkGpioInit(void );
+extern void NxpSpkGpioDeInit(void);
+#endif
+
 
 static int mDac_Sinegen = 27;
 static const char *DAC_DL_SIDEGEN[] = {"I0I1", "I2", "I3I4", "I5I6", "I7I8", "I9", "I10I11", "I12I13", "I14", "I15I16", "I17I18", "I19I20", "I21I22",
@@ -99,11 +104,9 @@ static const char *ANDROID_AUDIO_MODE[] = {"Normal_Mode", "Ringtone_Mode", "Inca
 static const char *InterModemPcm_ASRC_Switch[] = {"Off", "On"};
 static const char *Audio_Debug_Setting[] = {"Off", "On"};
 static const char *Audio_IPOH_State[] = {"Off", "On"};
-
-
+static const char *Audio_I2S0_GPIO_State[] = {"Off", "On"};
 static bool AudDrvSuspendStatus = false;
 static bool mModemPcm_ASRC_on = false;
-
 static bool mHplCalibrated = false;
 static int  mHplOffset = 0;
 static bool mHprCalibrated = false;
@@ -605,7 +608,7 @@ static const struct soc_enum Audio_Routing_Enum[] =
     SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(InterModemPcm_ASRC_Switch), InterModemPcm_ASRC_Switch),
     SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(Audio_Debug_Setting), Audio_Debug_Setting),
     SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(Audio_IPOH_State), Audio_IPOH_State),
-};
+ };
 
 static const struct snd_kcontrol_new Audio_snd_routing_controls[] =
 {
@@ -623,6 +626,52 @@ static const struct snd_kcontrol_new Audio_snd_routing_controls[] =
     SOC_ENUM_EXT("Audio_Ipoh_Setting", Audio_Routing_Enum[7], Audio_Ipoh_Setting_Get, Audio_Ipoh_Setting_Set),
 };
 
+static bool bI2S0GpioState = false;
+static int Audio_I2S0_Gpio_Get(struct snd_kcontrol *kcontrol,
+                                        struct snd_ctl_elem_value *ucontrol)
+{
+    printk("%s\n", __func__);
+    ucontrol->value.integer.value[0] = bI2S0GpioState;
+    return 0;
+}
+
+static int Audio_I2S0_Gpio_Set(struct snd_kcontrol *kcontrol, struct snd_ctl_elem_value *ucontrol)
+{
+    printk("%s()\n", __func__);
+
+    if (ucontrol->value.enumerated.item[0] > ARRAY_SIZE(Audio_I2S0_GPIO_State))
+    {
+        printk("return -EINVAL\n");
+        return -EINVAL;
+    }
+    bI2S0GpioState = ucontrol->value.integer.value[0];
+    if(bI2S0GpioState == true)
+    {
+        #ifdef CONFIG_MTK_NXP_TFA9890
+        NxpSpkGpioInit();
+        #endif
+    }
+    else
+    {
+        #ifdef CONFIG_MTK_NXP_TFA9890
+        NxpSpkGpioDeInit();
+        #endif
+    }
+    return 0;
+}
+
+static const struct soc_enum Audio_Gpio_Enum[] =
+{
+    SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(Audio_I2S0_GPIO_State), Audio_I2S0_GPIO_State),
+ };
+
+static const struct snd_kcontrol_new Audio_snd_gpio_controls[] =
+{
+    SOC_ENUM_EXT("Audio_I2S0_GPIO_Setting", Audio_Gpio_Enum[0], Audio_I2S0_Gpio_Get, Audio_I2S0_Gpio_Set),
+};
+
+
+
 
 void EnAble_Anc_Path(int state)
 {
@@ -857,6 +906,8 @@ static int mtk_afe_routing_platform_probe(struct snd_soc_platform *platform)
                                   ARRAY_SIZE(Audio_snd_routing_controls));
     snd_soc_add_platform_controls(platform, Afe_Anc_controls,
                                   ARRAY_SIZE(Afe_Anc_controls));
+    snd_soc_add_platform_controls(platform, Audio_snd_gpio_controls,
+                                  ARRAY_SIZE(Audio_snd_gpio_controls));
     return 0;
 }
 
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_uldlloopback.c b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_uldlloopback.c
index 998fcf2..3c2006f 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_uldlloopback.c
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_uldlloopback.c
@@ -101,14 +101,14 @@ static int mtk_uldlloopback_open(struct snd_pcm_substream *substream)
     int ret = 0;
 
     printk("%s \n", __func__);
-    AudDrv_Clk_On();
-    AudDrv_ADC_Clk_On(); // add by ted 2014-11-25
     if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
     {
         printk("%s  with mtk_uldlloopback_open \n", __func__);
         runtime->rate = 16000;
         return 0;
     }
+    AudDrv_Clk_On();
+    AudDrv_ADC_Clk_On();
 
     runtime->hw = mtk_uldlloopback_hardware;
     memcpy((void *)(&(runtime->hw)), (void *)&mtk_uldlloopback_hardware , sizeof(struct snd_pcm_hardware));
@@ -163,13 +163,16 @@ static int mtk_uldlloopbackpcm_close(struct snd_pcm_substream *substream)
 
     // stop I2S
     Afe_Set_Reg(AFE_I2S_CON3, 0x0, 0x1);
+    Afe_Set_Reg(AFE_I2S_CON1, 0x0, 0x1);
+    Afe_Set_Reg(AFE_I2S_CON, 0x0, 0x1);
+
     SetMemoryPathEnable(Soc_Aud_Digital_Block_I2S_OUT_DAC, false);
     SetMemoryPathEnable(Soc_Aud_Digital_Block_I2S_IN_ADC, false);
 
     EnableAfe (false);
 
     AudDrv_Clk_Off();
-    AudDrv_ADC_Clk_Off(); // add by ted 2014-11-25
+    AudDrv_ADC_Clk_Off();
     return 0;
 }
 
@@ -222,15 +225,15 @@ static int mtk_uldlloopback_pcm_prepare(struct snd_pcm_substream *substream)
     uint32 Audio_I2S_Dac = 0;
     uint32 u32AudioI2S = 0;
 
-    SetMemoryPathEnable(Soc_Aud_Digital_Block_I2S_OUT_DAC, true);
-    SetMemoryPathEnable(Soc_Aud_Digital_Block_I2S_IN_ADC, true);
-
     if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
     {
         printk("%s  with mtk_uldlloopback_pcm_prepare \n", __func__);
         return 0;
     }
 
+    SetMemoryPathEnable(Soc_Aud_Digital_Block_I2S_OUT_DAC, true);
+    SetMemoryPathEnable(Soc_Aud_Digital_Block_I2S_IN_ADC, true);
+
     printk("%s rate = %d\n", __func__, runtime->rate);
 
     Afe_Set_Reg(AFE_TOP_CON0, 0x00000000, 0xffffffff);
diff --git a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_voice_bt.c b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_voice_bt.c
index b418620..c32ead6 100644
--- a/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_voice_bt.c
+++ b/kernel/sound/soc/mediatek/mt_soc_audio_v1/mt_soc_pcm_voice_bt.c
@@ -73,7 +73,7 @@ static AudioDigtalI2S mAudioDigitalI2S;
 
 bool get_voice_bt_status(void)
 {
-    return voice_bt_Status;
+    return voice_bt_Status | GetExternalModemStatus();
 }
 
 EXPORT_SYMBOL(get_voice_bt_status);
-- 
1.9.1

