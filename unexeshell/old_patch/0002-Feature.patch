From ba36c7863beded24763822008dc2ae59a1f2d32a Mon Sep 17 00:00:00 2001
From: "haolong.zhang" <haolong.zhang@ck-telecom.com>
Date: Fri, 22 Aug 2014 17:38:15 +0800
Subject: [PATCH 2/3] [Feature]
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

	Implementatio soft AP switch function [also should read read commit: 9a7ad0fc3b2f8d2bc03e7c2b30a6ddc]
    [id]:N/A
    [TYPE]
       FEATURE
    [Products]
       hicam_baseline
    [Requirement]
       N/A
    [Solution Description]
       N/A
    [Other info]
 要提交的变更：
	修改:         frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
	修改:         frameworks/base/services/java/com/android/server/wifi/WifiService.java

Change-Id: I3cfa82764d4a87638a29d4275d60197a3c54e960
Signed-off-by: haolong.zhang <haolong.zhang@ck-telecom.com>
---
 .../internal/policy/impl/PhoneWindowManager.java   | 65 ++++++++++++++++++++++
 .../java/com/android/server/wifi/WifiService.java  | 26 +++++++++
 2 files changed, 91 insertions(+)

diff --git a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index f47cb8a..faeb2b8 100755
--- a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -449,6 +449,15 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private boolean mSecureDismissingKeyguard;
     /// @}
 
+    /**
+    *Broadcast Action:  This broadcast use to distinction switch SoftAp from key  or  from APK
+    *
+    */
+    public static final String ACTION_SWTICH_SOTFAP_FROM_KEY_OPEN =
+            "android.intent.action.SWTICH_SOTFAP_FROM_KEY_OPEN";
+    public static final String ACTION_SWTICH_SOTFAP_FROM_KEY_CLOSE=
+            "android.intent.action.SWTICH_SOTFAP_FROM_KEY_CLOSE";
+
     boolean mShowingLockscreen;
     boolean mShowingDream;
     boolean mDreamingLockscreen;
@@ -2155,6 +2164,59 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             WindowManager.LayoutParams.TYPE_SYSTEM_ERROR,
         };
 
+    public int KeySetSoftapSwith() {
+	boolean enable = true;
+	WifiManager mWifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);
+        final ContentResolver cr = mContext.getContentResolver();
+        /**
+         * Disable Wifi if enabling tethering
+         */
+        int wifiState = mWifiManager.getWifiState();
+	int wifiApState = mWifiManager.getWifiApState();
+	if((wifiApState == WifiManager.WIFI_AP_STATE_ENABLING) ||
+		(wifiApState == WifiManager.WIFI_AP_STATE_DISABLING) ) {
+		Log.d(TAG,"Please wait : ENANLING OR DISABLING .......");
+		return -1;
+	}
+	if(wifiApState == WifiManager.WIFI_AP_STATE_ENABLED)
+		enable = !enable;
+        if (enable && ((wifiState == WifiManager.WIFI_STATE_ENABLING) ||
+                    (wifiState == WifiManager.WIFI_STATE_ENABLED))) {
+            mWifiManager.setWifiEnabled(false);
+            Settings.Global.putInt(cr, Settings.Global.WIFI_SAVED_STATE, 1);
+        }
+	if(enable){
+		Intent intent = new Intent(ACTION_SWTICH_SOTFAP_FROM_KEY_OPEN);
+		mContext.sendBroadcast(intent);
+	}else{
+		Intent intent = new Intent(ACTION_SWTICH_SOTFAP_FROM_KEY_CLOSE);
+		mContext.sendBroadcast(intent);
+	}
+        if (mWifiManager.setWifiApEnabled(null, enable)) {
+            /* Disable here, enabled on receiving success broadcast */
+        } else {
+		/* do nothing*/
+        }
+        /**
+         *  If needed, restore Wifi on tether disable
+         */
+        if (!enable) {
+            int wifiSavedState = 0;
+            try {
+                wifiSavedState = Settings.Global.getInt(cr, Settings.Global.WIFI_SAVED_STATE);
+            } catch (Settings.SettingNotFoundException e) {
+               Log.d(TAG,"SettingNotFoundException");
+            }
+            if (wifiSavedState == 1) {
+                mWifiManager.setWifiEnabled(true);
+                Settings.Global.putInt(cr, Settings.Global.WIFI_SAVED_STATE, 0);
+            }
+        }
+		return 1;
+    }
+
+
+
     /** {@inheritDoc} */
     @Override
     public long interceptKeyBeforeDispatching(WindowState win, KeyEvent event, int policyFlags) {
@@ -2179,6 +2241,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 return -1;
             }
         }
+	//// this test hotpots key 
+	if(keyCode == KeyEvent.KEYCODE_HOTSPOT)
+		KeySetSoftapSwith();
 
         // If we think we might have a volume down & power key chord on the way
         // but we're not sure, then tell the dispatcher to wait a little while and
diff --git a/frameworks/base/services/java/com/android/server/wifi/WifiService.java b/frameworks/base/services/java/com/android/server/wifi/WifiService.java
index e659432..521e980 100644
--- a/frameworks/base/services/java/com/android/server/wifi/WifiService.java
+++ b/frameworks/base/services/java/com/android/server/wifi/WifiService.java
@@ -55,6 +55,7 @@ import android.os.AsyncTask;
 import android.provider.Settings;
 import android.util.Log;
 import android.util.Slog;
+import android.widget.Toast;
 
 import java.io.FileNotFoundException;
 import java.io.BufferedReader;
@@ -162,6 +163,10 @@ public final class WifiService extends IWifiManager.Stub {
      */
     private AsyncChannel mWifiStateMachineChannel;
 
+    public static final String ACTION_SWTICH_SOTFAP_FROM_KEY_OPEN =
+            "android.intent.action.SWTICH_SOTFAP_FROM_KEY_OPEN";
+    public static final String ACTION_SWTICH_SOTFAP_FROM_KEY_CLOSE=
+            "android.intent.action.SWTICH_SOTFAP_FROM_KEY_CLOSE";
     /**
      * Handles client connections
      */
@@ -388,6 +393,27 @@ public final class WifiService extends IWifiManager.Stub {
         // can result in race conditions when apps toggle wifi in the background
         // without active user involvement. Always receive broadcasts.
         registerForBroadcasts();
+	//add below for hotap switch from key
+        mContext.registerReceiver(
+                new BroadcastReceiver() {
+                    @Override
+                    public void onReceive(Context context, Intent intent) {
+                        SXlog.i(TAG, "ACTION_SWTICH_SOTFAP_FROM_KEY_OPEN  " + intent.getAction());
+			Toast.makeText(mContext, "WiFi Hot Ap Enabling.......", Toast.LENGTH_SHORT).show();
+                    }
+                },
+                new IntentFilter(ACTION_SWTICH_SOTFAP_FROM_KEY_OPEN));
+        registerForBroadcasts();
+        mContext.registerReceiver(
+                new BroadcastReceiver() {
+                    @Override
+                    public void onReceive(Context context, Intent intent) {
+                        SXlog.i(TAG, "ACTION_SWTICH_SOTFAP_FROM_KEY_CLOSE  " + intent.getAction());
+			Toast.makeText(mContext, "WiFi Hot Ap Disabling.......", Toast.LENGTH_SHORT).show();
+                    }
+                },
+                new IntentFilter(ACTION_SWTICH_SOTFAP_FROM_KEY_CLOSE));
+        registerForBroadcasts();
 
         ///M:
         initializeExtra();
-- 
1.9.1

