From a6ad381163ad03459fe7fb6a45791681ac8623b6 Mon Sep 17 00:00:00 2001
From: "haolong.zhang" <haolong.zhang@ck-telecom.com>
Date: Fri, 8 Jan 2016 18:15:34 +0800
Subject: [PATCH 1/4] enable kgdb step 1

Change-Id: I2d600354a301d4ff615572f5ade1b30741846897
---
 arch/arm64/configs/mobeeplus00b_msm_defconfig | 214 +++++---------------------
 drivers/tty/serial/kgdboc.c                   |  11 ++
 drivers/tty/serial/msm_serial_hs.c            |  94 +++++++++++
 drivers/tty/serial/msm_serial_hs_lite.c       |  93 +++++++++++
 drivers/tty/sysrq.c                           |  11 +-
 drivers/tty/tty_io.c                          |  18 +++
 kernel/debug/debug_core.c                     |   5 +-
 7 files changed, 266 insertions(+), 180 deletions(-)

diff --git a/arch/arm64/configs/mobeeplus00b_msm_defconfig b/arch/arm64/configs/mobeeplus00b_msm_defconfig
index 45b0f73..5589ac9 100755
--- a/arch/arm64/configs/mobeeplus00b_msm_defconfig
+++ b/arch/arm64/configs/mobeeplus00b_msm_defconfig
@@ -1,12 +1,11 @@
 CONFIG_SYSVIPC=y
+CONFIG_AUDIT=y
 CONFIG_NO_HZ=y
 CONFIG_HIGH_RES_TIMERS=y
-CONFIG_AUDIT=y
 CONFIG_RCU_FAST_NO_HZ=y
 CONFIG_IKCONFIG=y
-# CONFIG_IKCONFIG_PROC is not set
+CONFIG_IKCONFIG_PROC=y
 CONFIG_CGROUPS=y
-# CONFIG_CGROUP_DEBUG is not set
 CONFIG_CGROUP_FREEZER=y
 CONFIG_CGROUP_CPUACCT=y
 CONFIG_RESOURCE_COUNTERS=y
@@ -17,17 +16,13 @@ CONFIG_NAMESPACES=y
 # CONFIG_UTS_NS is not set
 # CONFIG_IPC_NS is not set
 # CONFIG_PID_NS is not set
-# CONFIG_LEGACY_PTYS is not set
-# CONFIG_INPUT_MOUSE is not set
-CONFIG_RELAY=n
 CONFIG_BLK_DEV_INITRD=y
 CONFIG_RD_BZIP2=y
 CONFIG_RD_LZMA=y
 CONFIG_CC_OPTIMIZE_FOR_SIZE=y
 CONFIG_PANIC_TIMEOUT=5
-# CONFIG_KALLSYMS_ALL is not set
 CONFIG_EMBEDDED=y
-# CONFIG_PROFILING is not set
+# CONFIG_SLUB_DEBUG is not set
 CONFIG_CC_STACKPROTECTOR_REGULAR=y
 CONFIG_MODULES=y
 CONFIG_MODULE_UNLOAD=y
@@ -40,7 +35,6 @@ CONFIG_PARTITION_ADVANCED=y
 CONFIG_DEFAULT_ROW=y
 CONFIG_ARCH_MSM=y
 CONFIG_ARCH_MSM8916=y
-CONFIG_LEDS_MSM_GPIO_FLASH=y
 CONFIG_SMP=y
 CONFIG_SCHED_MC=y
 CONFIG_PREEMPT=y
@@ -65,8 +59,8 @@ CONFIG_CPU_IDLE_MULTIPLE_DRIVERS=y
 CONFIG_NET=y
 CONFIG_PACKET=y
 CONFIG_UNIX=y
-CONFIG_XFRM=y
 CONFIG_XFRM_USER=y
+CONFIG_NET_KEY=y
 CONFIG_INET=y
 CONFIG_IP_ADVANCED_ROUTER=y
 CONFIG_IP_MULTIPLE_TABLES=y
@@ -75,10 +69,6 @@ CONFIG_IP_PNP=y
 CONFIG_IP_PNP_DHCP=y
 CONFIG_INET_AH=y
 CONFIG_INET_ESP=y
-CONFIG_INET_XFRM_TUNNEL=y
-CONFIG_INET_XFRM_MODE_TRANSPORT=y
-CONFIG_INET_XFRM_MODE_TUNNEL=y
-# CONFIG_INET_XFRM_MODE_BEET is not set
 # CONFIG_INET_LRO is not set
 CONFIG_IPV6=y
 CONFIG_IPV6_PRIVACY=y
@@ -111,17 +101,17 @@ CONFIG_NF_CT_NETLINK=y
 CONFIG_NETFILTER_TPROXY=y
 CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
 CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
-CONFIG_NETFILTER_XT_TARGET_HARDIDLETIMER=y
-CONFIG_NETFILTER_XT_TARGET_IDLETIMER=y
 CONFIG_NETFILTER_XT_TARGET_CONNSECMARK=y
+CONFIG_NETFILTER_XT_TARGET_IDLETIMER=y
+CONFIG_NETFILTER_XT_TARGET_HARDIDLETIMER=y
 CONFIG_NETFILTER_XT_TARGET_LOG=y
 CONFIG_NETFILTER_XT_TARGET_MARK=y
 CONFIG_NETFILTER_XT_TARGET_NFLOG=y
 CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
 CONFIG_NETFILTER_XT_TARGET_NOTRACK=y
-CONFIG_NETFILTER_XT_TARGET_SECMARK=y
 CONFIG_NETFILTER_XT_TARGET_TPROXY=y
 CONFIG_NETFILTER_XT_TARGET_TRACE=y
+CONFIG_NETFILTER_XT_TARGET_SECMARK=y
 CONFIG_NETFILTER_XT_MATCH_COMMENT=y
 CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
 CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
@@ -195,7 +185,6 @@ CONFIG_NET_EMATCH_TEXT=y
 CONFIG_NET_CLS_ACT=y
 CONFIG_RMNET_DATA=y
 CONFIG_RMNET_DATA_FC=y
-CONFIG_RMNET_DATA_DEBUG_PKT=n
 CONFIG_BT=y
 CONFIG_BT_RFCOMM=y
 CONFIG_BT_RFCOMM_TTY=y
@@ -240,46 +229,15 @@ CONFIG_PHYLIB=y
 CONFIG_PPP=y
 CONFIG_PPP_BSDCOMP=y
 CONFIG_PPP_DEFLATE=y
-CONFIG_PPPOE=y
-CONFIG_PPP_ASYNC=y
-CONFIG_PPP_SYNC_TTY=y
-#Add PP2P VPN and L2TP/IPsec VPN feature
-CONFIG_PPP=y
-CONFIG_PPP_MULTILINK=y
 CONFIG_PPP_FILTER=y
-CONFIG_PPP_ASYNC=y
-CONFIG_PPP_SYNC_TTY=y
-CONFIG_PPP_DEFLATE=y
-CONFIG_PPP_BSDCOMP=y
 CONFIG_PPP_MPPE=y
 CONFIG_PPP_MULTILINK=y
 CONFIG_PPPOE=y
-CONFIG_PPPOATM=m
 CONFIG_PPPOL2TP=y
 CONFIG_PPPOLAC=y
 CONFIG_PPPOPNS=y
-CONFIG_L2TP=y
-CONFIG_L2TP_DEBUGFS=y
-CONFIG_L2TP_V3=y
-CONFIG_L2TP_IP=y
-CONFIG_L2TP_ETH=y
-CONFIG_PPPOL2TP=y
-CONFIG_NET_KEY=y
-CONFIG_INET_AH=y
-CONFIG_INET_ESP=y
-CONFIG_INET_XFRM_MODE_TRANSPORT=y
-CONFIG_INET_XFRM_TUNNEL=y
-CONFIG_INET_XFRM_MODE_TUNNEL=y
-CONFIG_INET_XFRM_MODE_BEET=y
-#L2TP/IPSec PSK 01171053
-CONFIG_NET_KEY=y
-CONFIG_INET_AH=y
-CONFIG_INET_ESP=y
-#CONFIG_XFRM_USER is not set
-CONFIG_INET_XFRM_TUNNEL=y
-#CONFIG_CIFS is not set
-#CONFIG_XFRM_MIGRATE is not set
-#CONFIG_NET_KEY_MIGRATE is not set
+CONFIG_PPP_ASYNC=y
+CONFIG_PPP_SYNC_TTY=y
 CONFIG_WCNSS_CORE=y
 CONFIG_WCNSS_CORE_PRONTO=y
 CONFIG_WCNSS_MEM_PRE_ALLOC=y
@@ -287,30 +245,26 @@ CONFIG_WCNSS_REGISTER_DUMP_ON_BITE=y
 CONFIG_INPUT_EVDEV=y
 CONFIG_INPUT_EVBUG=m
 CONFIG_KEYBOARD_GPIO=y
+# CONFIG_INPUT_MOUSE is not set
 CONFIG_INPUT_TOUCHSCREEN=y
-#CONFIG_TOUCHSCREEN_ELAN_EKTF3XXX=y
-CONFIG_TOUCHSCREEN_MELFAS_MMS449=y
 CONFIG_TOUCHSCREEN_GEN_VKEYS=y
 CONFIG_TOUCHSCREEN_BU21150=y
+CONFIG_TOUCHSCREEN_MELFAS_MMS449=y
 CONFIG_INPUT_MT_WRAPPER=y
 CONFIG_INPUT_MISC=y
 CONFIG_INPUT_HBTP_INPUT=y
-#CONFIG_SENSORS_MPU6050=y
-#CONFIG_SENSORS_LIS3DH=y
 CONFIG_INPUT_UINPUT=y
 CONFIG_INPUT_GPIO=m
+CONFIG_SENSORS_LTR553_MOBEE_PLUS=y
 CONFIG_SENSORS_MMC3416X=y
-#CONFIG_SENSORS_AKM09911=y
-#CONFIG_SENSORS_AKM8963=y
 CONFIG_SENSORS_ST480_MOBEE_PLUS=y
-#CONFIG_INPUT_LSM6DX0_MOBEE_PLUS=y
 CONFIG_INPUT_LSM6DS3=y
-CONFIG_SENSORS_LTR553_MOBEE_PLUS=y
 # CONFIG_SERIO_I8042 is not set
 # CONFIG_VT is not set
+# CONFIG_LEGACY_PTYS is not set
 CONFIG_SERIAL_MSM_HS=y
-CONFIG_SERIAL_MSM_HSL=n
-CONFIG_SERIAL_MSM_HSL_CONSOLE=n
+CONFIG_SERIAL_MSM_HSL=y
+CONFIG_SERIAL_MSM_HSL_CONSOLE=y
 CONFIG_SERIAL_MSM_SMD=y
 CONFIG_DIAG_CHAR=y
 CONFIG_HW_RANDOM=y
@@ -321,9 +275,6 @@ CONFIG_I2C=y
 CONFIG_I2C_CHARDEV=y
 CONFIG_I2C_MSM_V2=y
 CONFIG_SLIMBUS_MSM_NGD=y
-CONFIG_DMADEVICES=y
-CONFIG_HAS_DMA=y
-CONFIG_QCOM_SPS_DMA=y
 CONFIG_SPI=y
 CONFIG_SPI_QUP=y
 CONFIG_SPI_SPIDEV=m
@@ -337,7 +288,6 @@ CONFIG_GPIO_QPNP_PIN=y
 CONFIG_SMB135X_CHARGER=y
 CONFIG_SMB1360_CHARGER_FG=y
 CONFIG_BATTERY_BCL=y
-#CONFIG_QPNP_VM_BMS=y
 CONFIG_QPNP_LINEAR_CHARGER=y
 CONFIG_POWER_RESET_MSM=y
 CONFIG_MSM_DLOAD_MODE=y
@@ -451,10 +401,16 @@ CONFIG_MMC_BLOCK_TEST=m
 CONFIG_MMC_SDHCI=y
 CONFIG_MMC_SDHCI_PLTFM=y
 CONFIG_MMC_SDHCI_MSM=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LEDS_QPNP=y
+CONFIG_LEDS_MSM_GPIO_FLASH=y
+CONFIG_LEDS_aw2013rgb=y
 CONFIG_LEDS_TRIGGERS=y
 CONFIG_SWITCH=y
 CONFIG_RTC_CLASS=y
 CONFIG_RTC_DRV_QPNP=y
+CONFIG_DMADEVICES=y
+CONFIG_QCOM_SPS_DMA=y
 CONFIG_UIO=y
 CONFIG_UIO_MSM_SHAREDMEM=y
 CONFIG_STAGING=y
@@ -474,14 +430,10 @@ CONFIG_USB_BAM=y
 CONFIG_SPS_SUPPORT_NDP_BAM=y
 CONFIG_QPNP_POWER_ON=y
 CONFIG_QPNP_VIBRATOR=y
-CONFIG_LEDS_GPIO=y
-CONFIG_LEDS_QPNP=y
-CONFIG_LEDS_TRIGGERS=y
-CONFIG_LEDS_aw2013rgb=y
 CONFIG_QPNP_REVID=y
 CONFIG_QPNP_COINCELL=y
-CONFIG_PFT=y
 CONFIG_MSM_AVTIMER=y
+CONFIG_PFT=y
 CONFIG_MSM_BUS_SCALING=y
 CONFIG_BUS_TOPOLOGY_ADHOC=y
 CONFIG_MSM_MDSS_PLL=y
@@ -489,28 +441,14 @@ CONFIG_REMOTE_SPINLOCK_MSM=y
 CONFIG_MSM_IOMMU_V1=y
 CONFIG_PWM=y
 CONFIG_PWM_QPNP=y
-CONFIG_CORESIGHT=n
-CONFIG_CORESIGHT_EVENT=n
-CONFIG_CORESIGHT_FUSE=n
-CONFIG_CORESIGHT_CTI=n
-CONFIG_CORESIGHT_TMC=n
-CONFIG_CORESIGHT_TPIU=n
-CONFIG_CORESIGHT_FUNNEL=n
-CONFIG_CORESIGHT_REPLICATOR=n
-CONFIG_CORESIGHT_STM=n
-CONFIG_CORESIGHT_HWEVENT=n
-CONFIG_CORESIGHT_ETMV4=n
-CONFIG_CORESIGHT_MODEM_ETM=n
-CONFIG_CORESIGHT_WCN_ETM=n
-CONFIG_CORESIGHT_RPM_ETM=n
+CONFIG_MOBICORE_SUPPORT=m
+CONFIG_MOBICORE_API=m
 CONFIG_SENSORS=y
 CONFIG_SENSORS_SSC=y
-CONFIG_CP_ACCESS64=n
 CONFIG_MSM_BAM_DMUX=y
 CONFIG_MSM_IPC_ROUTER_SMD_XPRT=y
 CONFIG_MSM_QMI_INTERFACE=y
 CONFIG_MSM_SMD=y
-CONFIG_MSM_SMD_DEBUG=n
 CONFIG_MSM_RPM_SMD=y
 CONFIG_MSM_RPM_LOG=y
 CONFIG_MSM_RPM_STATS_LOG=y
@@ -523,77 +461,49 @@ CONFIG_MSM_SPM=y
 CONFIG_MSM_L2_SPM=y
 CONFIG_MSM_ADSP_LOADER=y
 CONFIG_MSM_MEMORY_DUMP_V2=y
-CONFIG_MSM_DEBUG_LAR_UNLOCK=n
+CONFIG_MSM_COMMON_LOG=y
 CONFIG_MSM_WATCHDOG_V2=y
-CONFIG_MSM_FORCE_WDOG_BITE_ON_PANIC=n
 CONFIG_MSM_SUBSYSTEM_RESTART=y
-CONFIG_MSM_COMMON_LOG=y
 CONFIG_MSM_SYSMON_COMM=y
 CONFIG_MSM_PIL=y
 CONFIG_MSM_PIL_SSR_GENERIC=y
 CONFIG_MSM_PIL_MSS_QDSP6V5=y
 CONFIG_MSM_OCMEM=y
 CONFIG_MSM_OCMEM_LOCAL_POWER_CTRL=y
-CONFIG_MSM_OCMEM_DEBUG=n
-CONFIG_MSM_OCMEM_NONSECURE=n
 CONFIG_MSM_SCM=y
+CONFIG_MSM_CORE_CTL_HELPER=y
+CONFIG_MSM_PERFORMANCE=y
 CONFIG_MEM_SHARE_QMI_SERVICE=y
-CONFIG_MSM_TZ_LOG=n
-CONFIG_EXT2_FS=n
-CONFIG_EXT2_FS_XATTR=n
-CONFIG_EXT3_FS=n
-# CONFIG_EXT3_DEFAULTS_TO_ORDERED is not set
 CONFIG_EXT4_FS=y
 CONFIG_EXT4_FS_SECURITY=y
 CONFIG_FUSE_FS=y
+CONFIG_ISO9660_FS=y
 CONFIG_VFAT_FS=y
 CONFIG_TMPFS=y
+CONFIG_PSTORE=y
+CONFIG_PSTORE_CONSOLE=y
+CONFIG_PSTORE_RAM=y
 CONFIG_NLS_CODEPAGE_437=y
 CONFIG_NLS_ASCII=y
 CONFIG_NLS_ISO8859_1=y
 CONFIG_PRINTK_TIME=y
-CONFIG_MAGIC_SYSRQ=y
-CONFIG_PAGE_OWNER=n
-CONFIG_LOCKUP_DETECTOR=n
-CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC=y
-# CONFIG_DETECT_HUNG_TASK is not set
 CONFIG_PANIC_ON_RECURSIVE_FAULT=y
-CONFIG_SCHEDSTATS=y
-CONFIG_TIMER_STATS=y
-CONFIG_SLUB_DEBUG_ON=n
-CONFIG_DEBUG_KMEMLEAK=n
-CONFIG_DEBUG_KMEMLEAK_DEFAULT_OFF=n
-CONFIG_DEBUG_SPINLOCK=n
-CONFIG_DEBUG_MUTEXES=n
-CONFIG_DEBUG_ATOMIC_SLEEP=n
-CONFIG_DEBUG_STACK_USAGE=n
+# CONFIG_SCHED_DEBUG is not set
+# CONFIG_DEBUG_PREEMPT is not set
+# CONFIG_DEBUG_BUGVERBOSE is not set
 CONFIG_DEBUG_INFO=y
-CONFIG_DEBUG_MEMORY_INIT=n
-CONFIG_DEBUG_LIST=n
-CONFIG_FAULT_INJECTION=n
-CONFIG_FAIL_PAGE_ALLOC=n
-CONFIG_FAULT_INJECTION_DEBUG_FS=n
-CONFIG_FAULT_INJECTION_STACKTRACE_FILTER=n
-CONFIG_SLUB_DEBUG_PANIC_ON=n
-CONFIG_MSM_RTB=n
-CONFIG_MSM_RTB_SEPARATE_CPUS=y
+# CONFIG_RCU_CPU_STALL_VERBOSE is not set
 CONFIG_IPC_LOGGING=y
 CONFIG_DYNAMIC_DEBUG=y
-CONFIG_PANIC_ON_DATA_CORRUPTION=n
-CONFIG_FREE_PAGES_RDONLY=n
-CONFIG_KERNEL_TEXT_RDONLY=y
-CONFIG_KEYS=y
+CONFIG_KGDB=y
 CONFIG_SECURITY=y
 CONFIG_SECURITY_NETWORK=y
 CONFIG_LSM_MMAP_MIN_ADDR=4096
 CONFIG_SECURITY_SELINUX=y
-CONFIG_CRYPTO=y
 CONFIG_CRYPTO_NULL=y
-CONFIG_CRYPTO_XTS=y
-CONFIG_CRYPTO_XCBC=y
 CONFIG_CRYPTO_CTR=y
+CONFIG_CRYPTO_XCBC=y
 CONFIG_CRYPTO_MD4=y
-CONFIG_CRYPTO_ARC4=y
 CONFIG_CRYPTO_TWOFISH=y
 CONFIG_CRYPTO_DEV_QCRYPTO=y
 CONFIG_CRYPTO_DEV_QCE=y
@@ -607,53 +517,3 @@ CONFIG_CRYPTO_AES_ARM64_CE_CCM=y
 CONFIG_CRYPTO_AES_ARM64_CE_BLK=y
 CONFIG_CRYPTO_AES_ARM64_NEON_BLK=y
 CONFIG_QMI_ENCDEC=y
-#CONFIG_STRICT_MEMORY_RWX=y
-CONFIG_MSM_PERFORMANCE=y
-CONFIG_ISO9660_FS=y
-
-#sms4470,ck-changjun.li
-#Siano module components
-#CONFIG_SMS_SIANO_MDTV=m
-#added by tinypi for dtv fm switch
-#CONFIG_DTV_FM_SW=y
-#added by tinypi for dtv fm switch
-#CONFIG_SMS_RC_SUPPORT_SUBSYS is not set
-#CONFIG_SMS_HOSTLIB_SUBSYS=y
-#CONFIG_SMS_DVB_API_SUBSYS is not set
-#CONFIG_SMS_NET_SUBSYS is not set 
-#CONFIG_SMS_USB_DRV is not set
-#CONFIG_SMS_SDIO_DRV=y
-#CONFIG_SMS_SPI_DRV is not set
-#CONFIG_SMS_I2C_DRV is not set
-#CONFIG_SMS_POWER is not set
-#CONFIG_SMS_POWER_CUSTOMER=y
-#pstore
-CONFIG_PSTORE=y
-CONFIG_PSTORE_CONSOLE=y
-CONFIG_PSTORE_RAM=y
-CONFIG_PSTORE_FTRACE=y
-#CONFIG_SWAP=y
-CONFIG_MEMCG=n
-CONFIG_MEMCG_SWAP=n
-CONFIG_MEMCG_SWAP_ENABLED=n
-CONFIG_DEBUG_FS=y
-CONFIG_FUNCTION_TRACER=n
-CONFIG_DEBUG_PAGEALLOC=n
-CONFIG_SLUB_DEBUG=n
-CONFIG_DEFAULT_MESSAGE_LOGLEVEL=4
-CONFIG_SCHED_DEBUG=n
-CONFIG_SCHEDSTATS=n
-CONFIG_SYSRQ_SCHED_DEBUG=n
-CONFIG_TIMER_STATS=n
-#CONFIG_MSDOS_PARTITION=n
-CONFIG_DEBUG_PREEMPT=n
-CONFIG_PAGE_POISONING=n
-CONFIG_TRACEPOINTS=n
-CONFIG_RCU_CPU_STALL_VERBOSE=n
-#CONFIG_RCU_CPU_STALL_TIMEOUT is not set
-CONFIG_MM_OWNER=n
-CONFIG_DEBUG_BUGVERBOSE=n
-CONFIG_DYNAMIC_FTRACE=n
-CONFIG_MOBICORE_SUPPORT=m
-CONFIG_MOBICORE_API=m
-CONFIG_MSM_CORE_CTL_HELPER=y
diff --git a/drivers/tty/serial/kgdboc.c b/drivers/tty/serial/kgdboc.c
index 1002054..c7f2a99 100644
--- a/drivers/tty/serial/kgdboc.c
+++ b/drivers/tty/serial/kgdboc.c
@@ -163,8 +163,12 @@ static int configure_kgdboc(void)
 
 	err = kgdboc_option_setup(config);
 	if (err || !strlen(config) || isspace(config[0]))
+	{
+		printk("%s:[%d]----\n", __func__, __LINE__);
 		goto noconfig;
 
+	}
+
 	err = -ENODEV;
 	kgdboc_io_ops.is_console = 0;
 	kgdb_tty_driver = NULL;
@@ -176,11 +180,17 @@ static int configure_kgdboc(void)
 	}
 
 	if (kgdboc_register_kbd(&cptr))
+	{
+		printk("%s:[%d]----\n", __func__, __LINE__);
 		goto do_register;
+	}
 
 	p = tty_find_polling_driver(cptr, &tty_line);
 	if (!p)
+	{
+		printk("%s:[%d]----\n", __func__, __LINE__);
 		goto noconfig;
+	}
 
 	cons = console_drivers;
 	while (cons) {
@@ -226,6 +236,7 @@ static int __init init_kgdboc(void)
 	if (configured == 1)
 		return 0;
 
+	printk("%s ----\n", __func__);
 	return configure_kgdboc();
 }
 
diff --git a/drivers/tty/serial/msm_serial_hs.c b/drivers/tty/serial/msm_serial_hs.c
index 95c4c2f..31f738c 100644
--- a/drivers/tty/serial/msm_serial_hs.c
+++ b/drivers/tty/serial/msm_serial_hs.c
@@ -3391,6 +3391,7 @@ unmap_memory:
 static int __init msm_serial_hs_init(void)
 {
 	int ret;
+	printk("%s:[%d].....\n", __func__, __LINE__);
 
 	ipc_msm_hs_log_ctxt = ipc_log_context_create(IPC_MSM_HS_LOG_PAGES,
 							"msm_serial_hs", 0);
@@ -3523,6 +3524,93 @@ static void __exit msm_serial_hs_exit(void)
 	uart_unregister_driver(&msm_hs_driver);
 }
 
+ #ifdef CONFIG_CONSOLE_POLL
+ static int msm_poll_get_char_dm(struct uart_port *port)
+ {
+         int c;
+         static u32 slop;
+         static int count;
+         unsigned char *sp = (unsigned char *)&slop;
+
+         /* Check if a previous read had more than one char */
+         if (count) {
+                 c = sp[sizeof(slop) - count];
+                 count--;
+         /* Or if FIFO is empty */
+         } else if (!(msm_hs_read(port, UARTDM_SR) & (1 << 0))) {
+                 /*
+                  * If RX packing buffer has less than a word, force stale to
+                  * push contents into RX FIFO
+                  */
+                 count = msm_hs_read(port, UARTDM_RXFS);
+                // count = (count >> UARTDM_RXFS_BUF_SHIFT) & UARTDM_RXFS_BUF_MASK;
+                 if (count) {
+                         msm_hs_write(port, FORCE_STALE_EVENT, UARTDM_CR);
+                         slop = msm_hs_read(port, UARTDM_RF);
+                         c = sp[0];
+                         count--;
+                         msm_hs_write(port, RESET_STALE_INT, UARTDM_CR);
+                         msm_hs_write(port, 0xFFFFFF, UARTDM_DMRX);
+                         msm_hs_write(port, STALE_EVENT_ENABLE,
+                                   UARTDM_CR);
+                 } else {
+                         c = 0x00ff0000;
+                 }
+         /* FIFO has a word */
+         } else {
+                 slop = msm_hs_read(port, UARTDM_RF);
+                 c = sp[0];
+                 count = sizeof(slop) - 1;
+         }
+
+         return c;
+ }
+
+ static int msm_poll_get_char(struct uart_port *port)
+ {
+         u32 imr;
+         int c;
+
+         /* Disable all interrupts */
+         imr = msm_hs_read(port, UARTDM_IMR);
+         msm_hs_write(port, 0, UARTDM_IMR);
+		 c = msm_poll_get_char_dm(port);
+
+         /* Enable interrupts */
+         msm_hs_write(port, imr, UARTDM_IMR);
+
+         return c;
+ }
+
+ static int msm_poll_init(struct uart_port *port)
+ {
+	 printk("%s:[%d].....\n", __func__, __LINE__);
+         return 0;
+ }
+ static void msm_poll_put_char(struct uart_port *port, unsigned char c)
+ {
+         u32 imr;
+
+         /* Disable all interrupts */
+         imr = msm_hs_read(port, UARTDM_IMR);
+         msm_hs_write(port, 0, UARTDM_IMR);
+		 //reset_dm_count(port, 1);
+
+         /* Wait until FIFO is empty */
+         while (!(msm_hs_read(port, UARTDM_SR) & UARTDM_SR_TXRDY_BMSK))
+                 cpu_relax();
+
+         /* Write a character */
+         msm_hs_write(port, c, UARTDM_TF);
+
+         /* Wait until FIFO is empty */
+         while (!(msm_hs_read(port, UARTDM_SR) & UARTDM_SR_TXRDY_BMSK))
+                 cpu_relax();
+
+         /* Enable interrupts */
+         msm_hs_write(port, imr, UARTDM_IMR);
+ }
+ #endif
 static const struct dev_pm_ops msm_hs_dev_pm_ops = {
 	.runtime_suspend = msm_hs_runtime_suspend,
 	.runtime_resume = msm_hs_runtime_resume,
@@ -3565,6 +3653,12 @@ static struct uart_ops msm_hs_ops = {
 	.config_port = msm_hs_config_port,
 	.flush_buffer = NULL,
 	.ioctl = msm_hs_ioctl,
+#ifdef CONFIG_CONSOLE_POLL
+	.poll_get_char  = msm_poll_get_char,
+	.poll_put_char  = msm_poll_put_char,
+	.poll_init = msm_poll_init,
+
+#endif
 };
 
 module_init(msm_serial_hs_init);
diff --git a/drivers/tty/serial/msm_serial_hs_lite.c b/drivers/tty/serial/msm_serial_hs_lite.c
index ab4ff68..edfe86b 100644
--- a/drivers/tty/serial/msm_serial_hs_lite.c
+++ b/drivers/tty/serial/msm_serial_hs_lite.c
@@ -1297,6 +1297,93 @@ static void msm_hsl_power(struct uart_port *port, unsigned int state,
 	}
 }
 
+ #ifdef CONFIG_CONSOLE_POLL
+ static int msm_poll_get_char_dm(struct uart_port *port)
+ {
+         int c;
+         static u32 slop;
+         static int count;
+         unsigned char *sp = (unsigned char *)&slop;
+
+         /* Check if a previous read had more than one char */
+         if (count) {
+                 c = sp[sizeof(slop) - count];
+                 count--;
+         /* Or if FIFO is empty */
+         } else if (!(msm_hs_read(port, UARTDM_SR) & (1 << 0))) {
+                 /*
+                  * If RX packing buffer has less than a word, force stale to
+                  * push contents into RX FIFO
+                  */
+                 count = msm_hs_read(port, UARTDM_RXFS);
+                // count = (count >> UARTDM_RXFS_BUF_SHIFT) & UARTDM_RXFS_BUF_MASK;
+                 if (count) {
+                         msm_hs_write(port, FORCE_STALE_EVENT, UARTDM_CR);
+                         slop = msm_hs_read(port, UARTDM_RF);
+                         c = sp[0];
+                         count--;
+                         msm_hs_write(port, RESET_STALE_INT, UARTDM_CR);
+                         msm_hs_write(port, 0xFFFFFF, UARTDM_DMRX);
+                         msm_hs_write(port, STALE_EVENT_ENABLE,
+                                   UARTDM_CR);
+                 } else {
+                         c = 0x00ff0000;
+                 }
+         /* FIFO has a word */
+         } else {
+                 slop = msm_hs_read(port, UARTDM_RF);
+                 c = sp[0];
+                 count = sizeof(slop) - 1;
+         }
+
+         return c;
+ }
+
+ static int msm_poll_get_char(struct uart_port *port)
+ {
+         u32 imr;
+         int c;
+
+         /* Disable all interrupts */
+         imr = msm_hs_read(port, UARTDM_IMR);
+         msm_hs_write(port, 0, UARTDM_IMR);
+		 c = msm_poll_get_char_dm(port);
+
+         /* Enable interrupts */
+         msm_hs_write(port, imr, UARTDM_IMR);
+
+         return c;
+ }
+
+ static int msm_poll_init(struct uart_port *port)
+ {
+	 printk("%s:[%d]..2...\n", __func__, __LINE__);
+         return 0;
+ }
+ static void msm_poll_put_char(struct uart_port *port, unsigned char c)
+ {
+         u32 imr;
+
+         /* Disable all interrupts */
+         imr = msm_hs_read(port, UARTDM_IMR);
+         msm_hs_write(port, 0, UARTDM_IMR);
+		 //reset_dm_count(port, 1);
+
+         /* Wait until FIFO is empty */
+         while (!(msm_hs_read(port, UARTDM_SR) & UARTDM_SR_TXRDY_BMSK))
+                 cpu_relax();
+
+         /* Write a character */
+         msm_hs_write(port, c, UARTDM_TF);
+
+         /* Wait until FIFO is empty */
+         while (!(msm_hs_read(port, UARTDM_SR) & UARTDM_SR_TXRDY_BMSK))
+                 cpu_relax();
+
+         /* Enable interrupts */
+         msm_hs_write(port, imr, UARTDM_IMR);
+ }
+ #endif
 static struct uart_ops msm_hsl_uart_pops = {
 	.tx_empty = msm_hsl_tx_empty,
 	.set_mctrl = msm_hsl_set_mctrl,
@@ -1315,6 +1402,12 @@ static struct uart_ops msm_hsl_uart_pops = {
 	.config_port = msm_hsl_config_port,
 	.verify_port = msm_hsl_verify_port,
 	.pm = msm_hsl_power,
+#ifdef CONFIG_CONSOLE_POLL
+	.poll_get_char  = msm_poll_get_char,
+	.poll_put_char  = msm_poll_put_char,
+	.poll_init = msm_poll_init,
+
+#endif
 };
 
 static struct msm_hsl_port msm_hsl_uart_ports[] = {
diff --git a/drivers/tty/sysrq.c b/drivers/tty/sysrq.c
index b51c154..465aceb83b 100644
--- a/drivers/tty/sysrq.c
+++ b/drivers/tty/sysrq.c
@@ -489,6 +489,7 @@ struct sysrq_key_op *__sysrq_get_key_op(int key)
         int i;
 
 	i = sysrq_key_table_key2index(key);
+	printk("%s:[%d] i = %d\n", __func__, __LINE__, i);
 	if (i != -1)
 	        op_p = sysrq_key_table[i];
 
@@ -498,9 +499,15 @@ struct sysrq_key_op *__sysrq_get_key_op(int key)
 static void __sysrq_put_key_op(int key, struct sysrq_key_op *op_p)
 {
         int i = sysrq_key_table_key2index(key);
+		printk("%s i = %d\n", __func__, i);
+
 
         if (i != -1)
-                sysrq_key_table[i] = op_p;
+		{
+			printk("%s\n", __func__);
+			sysrq_key_table[i] = op_p;
+
+		}
 }
 
 void __handle_sysrq(int key, bool check_mask)
@@ -519,7 +526,7 @@ void __handle_sysrq(int key, bool check_mask)
 	 */
 	orig_log_level = console_loglevel;
 	console_loglevel = 7;
-	printk(KERN_INFO "SysRq : ");
+	printk(KERN_INFO "SysRq :come key = %d\n ", key);
 
         op_p = __sysrq_get_key_op(key);
         if (op_p) {
diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index 8db4419..09494c6 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -359,26 +359,44 @@ struct tty_driver *tty_find_polling_driver(char *name, int *line)
 	int len;
 	char *str, *stp;
 
+	printk("%s:[%d]  name = %s..\n", __func__, __LINE__, name);
 	for (str = name; *str; str++)
 		if ((*str >= '0' && *str <= '9') || *str == ',')
 			break;
 	if (!*str)
 		return NULL;
 
+	printk("%s:[%d]  name = %s..\n", __func__, __LINE__, name);
 	len = str - name;
 	tty_line = simple_strtoul(str, &str, 10);
 
 	mutex_lock(&tty_mutex);
 	/* Search through the tty devices to look for a match */
 	list_for_each_entry(p, &tty_drivers, tty_drivers) {
+		printk("---%d---\n", len);
 		if (strncmp(name, p->name, len) != 0)
+		{
+			printk("%s:[%d]  name = %s, p->name = %s..\n", __func__, __LINE__, name, p->name);
 			continue;
+
+		}
+		printk("%s:[%d]  name = %s, p->name = %s..\n", __func__, __LINE__, name, p->name);
 		stp = str;
 		if (*stp == ',')
 			stp++;
 		if (*stp == '\0')
 			stp = NULL;
 
+		printk("%s:[%d]  name = %s, p->name = %s..\n", __func__, __LINE__, name, p->name);
+		printk("tty_line = %d, p->num = %d\n", tty_line, p->num);
+		if (p->ops)
+		{
+			printk("has p->ops\n");
+		}
+		if (p->ops->poll_init)
+		{
+			printk("has p->ops->poll_init ret = %d\n", p->ops->poll_init(p, tty_line, stp));
+		}
 		if (tty_line >= 0 && tty_line < p->num && p->ops &&
 		    p->ops->poll_init && !p->ops->poll_init(p, tty_line, stp)) {
 			res = tty_driver_kref_get(p);
diff --git a/kernel/debug/debug_core.c b/kernel/debug/debug_core.c
index d9e098d..c2f16af 100644
--- a/kernel/debug/debug_core.c
+++ b/kernel/debug/debug_core.c
@@ -848,6 +848,7 @@ static struct notifier_block dbg_reboot_notifier = {
 
 static void kgdb_register_callbacks(void)
 {
+	int ret;
 	if (!kgdb_io_module_registered) {
 		kgdb_io_module_registered = 1;
 		kgdb_arch_init();
@@ -858,7 +859,8 @@ static void kgdb_register_callbacks(void)
 		atomic_notifier_chain_register(&panic_notifier_list,
 					       &kgdb_panic_event_nb);
 #ifdef CONFIG_MAGIC_SYSRQ
-		register_sysrq_key('g', &sysrq_dbg_op);
+		ret = register_sysrq_key('g', &sysrq_dbg_op);
+		printk("%s:[%d] ret = %d\n", __func__, __LINE__, ret);
 #endif
 		if (kgdb_use_con && !kgdb_con_registered) {
 			register_console(&kgdbcons);
@@ -934,6 +936,7 @@ int kgdb_register_io_module(struct kgdb_io *new_dbg_io_ops)
 {
 	int err;
 
+	printk("%s -----\n", __func__);
 	spin_lock(&kgdb_registration_lock);
 
 	if (dbg_io_ops) {
-- 
1.9.1

