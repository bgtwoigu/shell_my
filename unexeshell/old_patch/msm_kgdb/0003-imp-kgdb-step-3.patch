From b38da2e3274b930012ab66bc9b77a8ef7cb3e6bd Mon Sep 17 00:00:00 2001
From: "haolong.zhang" <haolong.zhang@ck-telecom.com>
Date: Mon, 11 Jan 2016 15:04:57 +0800
Subject: [PATCH 3/4] imp kgdb step 3

Change-Id: Ia28ba43d1683aafb11b390a52c014fafa4263d3e
---
 drivers/tty/serial/kgdboc.c             |  36 ++++-
 drivers/tty/serial/msm_serial_hs_lite.c | 244 +++++++++++++++++++-------------
 2 files changed, 175 insertions(+), 105 deletions(-)

diff --git a/drivers/tty/serial/kgdboc.c b/drivers/tty/serial/kgdboc.c
index c7f2a99..0526a2c 100644
--- a/drivers/tty/serial/kgdboc.c
+++ b/drivers/tty/serial/kgdboc.c
@@ -29,6 +29,7 @@ static struct kgdb_io		kgdboc_io_ops;
 static int configured		= -1;
 
 static char config[MAX_CONFIG_LEN];
+static int config_retry_time = 0;
 static struct kparam_string kps = {
 	.string			= config,
 	.maxlen			= MAX_CONFIG_LEN,
@@ -153,6 +154,28 @@ static void cleanup_kgdboc(void)
 		kgdb_unregister_io_module(&kgdboc_io_ops);
 }
 
+static int kgdbretry_option_setup(char *opt)
+{
+	if (strlen(opt) > MAX_CONFIG_LEN) {
+		printk(KERN_ERR "kgdbretry: config string too long\n");
+		return -ENOSPC;
+	}
+	config_retry_time = simple_strtoul(opt, NULL, 10);
+
+	return 0;
+}
+
+__setup("kgdbretry=", kgdbretry_option_setup);
+
+static int configure_kgdboc(void);
+static void ttycheck_func(struct work_struct *work)
+{
+	config_retry_time = 0;
+	configure_kgdboc();
+}
+
+static DECLARE_DELAYED_WORK(ttycheck_work, ttycheck_func);
+
 static int configure_kgdboc(void)
 {
 	struct tty_driver *p;
@@ -186,9 +209,13 @@ static int configure_kgdboc(void)
 	}
 
 	p = tty_find_polling_driver(cptr, &tty_line);
-	if (!p)
-	{
-		printk("%s:[%d]----\n", __func__, __LINE__);
+	if (!p) {
+		printk(KERN_INFO "kgdb will retry in %d secs\n", config_retry_time);
+		if (config_retry_time > 0) {
+			INIT_DELAYED_WORK(&ttycheck_work, ttycheck_func);
+			schedule_delayed_work(&ttycheck_work, config_retry_time * HZ);
+			return -ENODEV;
+		}
 		goto noconfig;
 	}
 
@@ -222,6 +249,7 @@ do_register:
 nmi_con_failed:
 	kgdb_unregister_io_module(&kgdboc_io_ops);
 noconfig:
+    printk(KERN_ERR "kgdb failed to initialise\n");
 	kgdboc_unregister_kbd();
 	config[0] = 0;
 	configured = 0;
@@ -236,7 +264,6 @@ static int __init init_kgdboc(void)
 	if (configured == 1)
 		return 0;
 
-	printk("%s ----\n", __func__);
 	return configure_kgdboc();
 }
 
@@ -346,5 +373,6 @@ module_init(init_kgdboc);
 module_exit(cleanup_kgdboc);
 module_param_call(kgdboc, param_set_kgdboc_var, param_get_string, &kps, 0644);
 MODULE_PARM_DESC(kgdboc, "<serial_device>[,baud]");
+MODULE_PARM_DESC(kgdbretry, "<delay in seconds> before retrying tty");
 MODULE_DESCRIPTION("KGDB Console TTY Driver");
 MODULE_LICENSE("GPL");
diff --git a/drivers/tty/serial/msm_serial_hs_lite.c b/drivers/tty/serial/msm_serial_hs_lite.c
index e74fda8..e640d47 100644
--- a/drivers/tty/serial/msm_serial_hs_lite.c
+++ b/drivers/tty/serial/msm_serial_hs_lite.c
@@ -1296,104 +1296,147 @@ static void msm_hsl_power(struct uart_port *port, unsigned int state,
 		pr_err("Unknown PM state %d\n", state);
 	}
 }
-static inline unsigned int msm_hs_read(struct uart_port *uport,
-				       unsigned int index)
-{
-	return readl_relaxed(uport->membase + index);
-}
-
-static inline void msm_hs_write(struct uart_port *uport, unsigned int index,
-				 unsigned int value)
-{
-	writel_relaxed(value, uport->membase + index);
-}
- #ifdef CONFIG_CONSOLE_POLL
- static int msm_poll_get_char_dm(struct uart_port *port)
- {
-         int c;
-         static u32 slop;
-         static int count;
-         unsigned char *sp = (unsigned char *)&slop;
-
-         /* Check if a previous read had more than one char */
-         if (count) {
-                 c = sp[sizeof(slop) - count];
-                 count--;
-         /* Or if FIFO is empty */
-         } else if (!(msm_hs_read(port, UARTDM_SR) & (1 << 0))) {
-                 /*
-                  * If RX packing buffer has less than a word, force stale to
-                  * push contents into RX FIFO
-                  */
-                 count = msm_hs_read(port, UARTDM_RXFS);
-                // count = (count >> UARTDM_RXFS_BUF_SHIFT) & UARTDM_RXFS_BUF_MASK;
-                 if (count) {
-                         msm_hs_write(port, FORCE_STALE_EVENT, UARTDM_CR);
-                         slop = msm_hs_read(port, UARTDM_RF);
-                         c = sp[0];
-                         count--;
-                         msm_hs_write(port, RESET_STALE_INT, UARTDM_CR);
-                         msm_hs_write(port, 0xFFFFFF, UARTDM_DMRX);
-                         msm_hs_write(port, STALE_EVENT_ENABLE,
-                                   UARTDM_CR);
-                 } else {
-                         c = 0x00ff0000;
-                 }
-         /* FIFO has a word */
-         } else {
-                 slop = msm_hs_read(port, UARTDM_RF);
-                 c = sp[0];
-                 count = sizeof(slop) - 1;
-         }
-
-         return c;
- }
-
- static int msm_poll_get_char(struct uart_port *port)
- {
-         u32 imr;
-         int c;
-
-         /* Disable all interrupts */
-         imr = msm_hs_read(port, UARTDM_IMR);
-         msm_hs_write(port, 0, UARTDM_IMR);
-		 c = msm_poll_get_char_dm(port);
-
-         /* Enable interrupts */
-         msm_hs_write(port, imr, UARTDM_IMR);
-
-         return c;
- }
-
- static int msm_poll_init(struct uart_port *port)
- {
-	 printk("%s:[%d]..2...\n", __func__, __LINE__);
-         return 0;
- }
- static void msm_poll_put_char(struct uart_port *port, unsigned char c)
- {
-         u32 imr;
-
-         /* Disable all interrupts */
-         imr = msm_hs_read(port, UARTDM_IMR);
-         msm_hs_write(port, 0, UARTDM_IMR);
-		 //reset_dm_count(port, 1);
-
-         /* Wait until FIFO is empty */
-         while (!(msm_hs_read(port, UARTDM_SR) & UARTDM_SR_TXRDY_BMSK))
-                 cpu_relax();
-
-         /* Write a character */
-         msm_hs_write(port, c, UARTDM_TF);
-
-         /* Wait until FIFO is empty */
-         while (!(msm_hs_read(port, UARTDM_SR) & UARTDM_SR_TXRDY_BMSK))
-                 cpu_relax();
-
-         /* Enable interrupts */
-         msm_hs_write(port, imr, UARTDM_IMR);
- }
- #endif
+
+
+
+
+
+
+#ifdef CONFIG_CONSOLE_POLL
+
+/* defines from msm_serial.h */
+#define UARTDM_DMEN_RX_SC_ENABLE BIT(5)
+#define UARTDM_DMEN_TX_SC_ENABLE BIT(4)
+
+#define UARTDM_RXFS_BUF_SHIFT	0x7
+#define UARTDM_RXFS_BUF_MASK	0x7
+
+static int msm_poll_init(struct uart_port *port)
+{
+	unsigned int vid;
+
+	vid = UART_TO_MSM(port)->ver_id;
+
+	/* Enable single character mode on RX FIFO */
+    /* A later patch from David Boyd suggests this causes problems... */
+    /*msm_hsl_write(port, UARTDM_DMEN_RX_SC_ENABLE, regmap[vid][UARTDM_DMEN]);*/
+
+	return 0;
+}
+
+static int msm_poll_get_char_dm(struct uart_port *port)
+{
+	int c;
+	static u32 slop;
+	static int count;
+	unsigned char *sp = (unsigned char *)&slop;
+    unsigned int vid;
+
+    vid = UART_TO_MSM(port)->ver_id;
+
+	/* Check if a previous read had more than one char */
+	if (count) {
+		c = sp[sizeof(slop) - count];
+		count--;
+	/* Or if FIFO is empty */
+	} else if (!(msm_hsl_read(port, regmap[vid][UARTDM_SR]) & UARTDM_SR_RXRDY_BMSK)) { /* bit 0  */
+		/*
+		 * If RX packing buffer has less than a word, force stale to
+		 * push contents into RX FIFO
+		 */
+		count = msm_hsl_read(port, regmap[vid][UARTDM_RXFS]);
+
+		count = (count >> UARTDM_RXFS_BUF_SHIFT) & UARTDM_RXFS_BUF_MASK;
+		if (count) {
+			msm_hsl_write(port, FORCE_STALE_EVENT, regmap[vid][UARTDM_CR]);
+			slop = msm_hsl_read(port, regmap[vid][UARTDM_RF]);
+			c = sp[0];
+			count--;
+
+            msm_hsl_write(port, RESET_STALE_INT, regmap[vid][UARTDM_CR]);
+            msm_hsl_write(port, 0xFF, regmap[vid][UARTDM_DMRX]);
+            msm_hsl_write(port, STALE_EVENT_ENABLE, regmap[vid][UARTDM_CR]);
+
+		} else {
+			c = NO_POLL_CHAR;
+		}
+	/* FIFO has a word */
+	} else {
+		slop = msm_hsl_read(port, regmap[vid][UARTDM_RF]);
+		c = sp[0];
+		count = sizeof(slop) - 1;
+	}
+
+	return c;
+}
+
+
+static int msm_poll_get_char(struct uart_port *port)
+{
+	u32 imr;
+	int c;
+	unsigned int vid;
+
+	vid = UART_TO_MSM(port)->ver_id;
+
+	/* Disable all interrupts */
+	imr = msm_hsl_read(port, regmap[vid][UARTDM_IMR]);
+	msm_hsl_write(port, 0, regmap[vid][UARTDM_IMR]);
+
+
+    c = msm_poll_get_char_dm(port);
+
+
+	/* Enable interrupts */
+	msm_hsl_write(port, imr, regmap[vid][UARTDM_IMR]);
+
+	return c;
+}
+
+static void reset_dm_count(struct uart_port *port, int count)
+{
+	unsigned int vid;
+
+	vid = UART_TO_MSM(port)->ver_id;
+
+    wait_for_xmitr(port);
+    msm_hsl_write(port, count, regmap[vid][UARTDM_NCF_TX]);
+    msm_hsl_read(port, regmap[vid][UARTDM_NCF_TX]);
+}
+
+static void msm_poll_put_char(struct uart_port *port, unsigned char c)
+{
+	u32 imr;
+	unsigned int vid;
+
+	vid = UART_TO_MSM(port)->ver_id;
+
+	/* Disable all interrupts */
+	imr = msm_hsl_read(port, regmap[vid][UARTDM_IMR]);
+	msm_hsl_write(port, 0, regmap[vid][UARTDM_IMR]);
+
+	/*if (msm_port->is_uartdm)*/
+		reset_dm_count(port, 1);
+
+	/* Wait until FIFO is empty */
+	while (!(msm_hsl_read(port, regmap[vid][UARTDM_SR]) & UARTDM_SR_TXRDY_BMSK))
+		cpu_relax();
+
+	/* Write a character */
+	msm_hsl_write(port, c, regmap[vid][UARTDM_TF]);
+
+	/* Wait until FIFO is empty */
+	while (!(msm_hsl_read(port, regmap[vid][UARTDM_SR]) & UARTDM_SR_TXRDY_BMSK))
+		cpu_relax();
+
+	/* Enable interrupts */
+	msm_hsl_write(port, imr, regmap[vid][UARTDM_IMR]);
+
+	return;
+}
+#endif
+
+
 static struct uart_ops msm_hsl_uart_pops = {
 	.tx_empty = msm_hsl_tx_empty,
 	.set_mctrl = msm_hsl_set_mctrl,
@@ -1413,10 +1456,9 @@ static struct uart_ops msm_hsl_uart_pops = {
 	.verify_port = msm_hsl_verify_port,
 	.pm = msm_hsl_power,
 #ifdef CONFIG_CONSOLE_POLL
-	.poll_get_char  = msm_poll_get_char,
-	.poll_put_char  = msm_poll_put_char,
 	.poll_init = msm_poll_init,
-
+	.poll_get_char	= msm_poll_get_char,
+	.poll_put_char	= msm_poll_put_char,
 #endif
 };
 
-- 
1.9.1

