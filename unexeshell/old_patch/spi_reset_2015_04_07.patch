diff --git a/mediatek/platform/mt6595/kernel/drivers/spi/spi.c b/mediatek/platform/mt6595/kernel/drivers/spi/spi.c
index 2fc123d..8b3ab0d 100755
--- a/mediatek/platform/mt6595/kernel/drivers/spi/spi.c
+++ b/mediatek/platform/mt6595/kernel/drivers/spi/spi.c
@@ -52,7 +52,7 @@ enum spi_fifo {
 };
 
 #define INVALID_DMA_ADDRESS 0xffffffff
-
+static int is_resume = 0;
 
 struct mt_spi_t {
 	struct platform_device *pdev;
@@ -72,7 +72,6 @@ struct mt_spi_t {
 };
 /*open time record debug, log can't affect transfer*/
 //	#define SPI_REC_DEBUG
-
 #ifdef SPI_DEBUG
 	#define SPI_DBG(fmt, args...)  printk(KERN_ALERT "spi.c:%5d: <%s>" fmt, __LINE__,__func__,##args )
 
@@ -744,10 +743,25 @@ static void mt_spi_next_message(struct mt_spi_t *ms)
 {
 	struct spi_message	*msg;
 	struct mt_chip_conf *chip_config;
+	static struct mt_chip_conf *old_config = NULL;
 	char msg_addr[16];
+	int is_need_reset_spi_controller = 0;
 
+	if(NULL == old_config)
+	{
+		printk("malloc mem\n");
+		old_config = kmalloc(sizeof(struct mt_chip_conf), GFP_KERNEL);
+	}
 	msg = list_entry(ms->queue.next, struct spi_message, queue);
 	chip_config = (struct mt_chip_conf *)msg->state;
+
+	if (memcmp(old_config, chip_config, sizeof(struct mt_chip_conf)))
+	{
+		memcpy(old_config, chip_config, sizeof(struct mt_chip_conf));
+		is_need_reset_spi_controller = 1;
+	}else{
+		is_need_reset_spi_controller = 0;
+	}
 	
 #ifdef SPI_REC_DEBUG
 		spi_speed = SPI_CLOCK_PERIED/(chip_config->low_time + chip_config->high_time);
@@ -774,8 +788,13 @@ static void mt_spi_next_message(struct mt_spi_t *ms)
 //		spi_rec_time("clke");
 //		t_rec[1] = sched_clock();
 //		printk(KERN_ALERT"clke rec consume time%lld",t_rec[1] - t_rec[0]);
+
+	if(is_need_reset_spi_controller || is_resume)
+	{
 		reset_spi(ms);
-	mt_do_spi_setup(ms, chip_config);	
+		mt_do_spi_setup(ms, chip_config);
+		is_resume = 0;
+	}
 	mt_spi_next_xfer(ms, msg);
 	
 }
@@ -1254,6 +1273,7 @@ mt_spi_suspend(struct platform_device *pdev, pm_message_t message )
 static int mt_spi_resume ( struct platform_device *pdev )
 {
 //	printk(KERN_ALERT"spi resume.\n" );
+	is_resume = 1;
 	return 0;
 }
 #else
