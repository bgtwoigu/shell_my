diff --git a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index ae404f5..ac4ff43 100755
--- a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -125,7 +125,9 @@ import java.lang.Thread;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
-
+import java.io.PrintStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
 import static android.view.WindowManager.LayoutParams.*;
 import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_ABSENT;
 import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_OPEN;
@@ -457,7 +459,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             "android.intent.action.SWTICH_SOTFAP_FROM_KEY_OPEN";
     public static final String ACTION_SWTICH_SOTFAP_FROM_KEY_CLOSE=
             "android.intent.action.SWTICH_SOTFAP_FROM_KEY_CLOSE";
-
+	private static final String blueLedControlNode = "/sys/bus/platform/drivers/mtk-kpd/led_wifi_flicker";
+	/**
+	*for blueLedStatus charge
+	*/
+	private static boolean isHotSpotLedOpenTheadRunning = false;
+	private static boolean isHotSpotLedCloseTheadRunning = false;
+	//end add for blueLedStatus charge
     boolean mShowingLockscreen;
     boolean mShowingDream;
     boolean mDreamingLockscreen;
@@ -2163,7 +2171,22 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             WindowManager.LayoutParams.TYPE_SYSTEM_ALERT,
             WindowManager.LayoutParams.TYPE_SYSTEM_ERROR,
         };
-
+	public void blueLedControlFunc(int status, int count, int frequency, int duty) {
+
+		Log.i(TAG, "into blueLedControlFunc status = " + status + " count= " + count + " frequency = " + frequency + " duty = " + duty);
+		try{
+				FileOutputStream mFileOutputStream = new FileOutputStream(blueLedControlNode);
+				PrintStream mPrintStream = new PrintStream(mFileOutputStream);
+				mPrintStream.println(status + " " + count + " " + frequency + " " + duty);
+			try{
+				mFileOutputStream.close();
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		} catch (FileNotFoundException e){
+			e.printStackTrace();
+		}
+	}
     public int KeySetSoftapSwith() {
 	boolean enable = true;
 	WifiManager mWifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);
@@ -2188,9 +2211,64 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 	if(enable){
 		Intent intent = new Intent(ACTION_SWTICH_SOTFAP_FROM_KEY_OPEN);
 		mContext.sendBroadcast(intent);
+		new Thread() {
+			public void run() {
+				if(isHotSpotLedCloseTheadRunning){
+					Log.i(TAG, "isHotSpotLedCloseTheadRunning = ture first disable it");
+					blueLedControlFunc(0, 0, 0, 0);
+					isHotSpotLedCloseTheadRunning = false;
+				}
+				if(isHotSpotLedOpenTheadRunning){
+					Log.i(TAG, "isHotSpotLedOpenTheadRunning = ture, so just return");
+					return;
+				}else{
+					Log.i(TAG, "into hotspot openning blueLed control");
+					isHotSpotLedOpenTheadRunning = true;
+					blueLedControlFunc(0, 4, 50, 50);
+				//sleep 2.5s
+					try{
+						sleep(2500);
+					} catch (InterruptedException e) {
+						e.printStackTrace();
+					}
+					if(isHotSpotLedOpenTheadRunning){
+						//set new status
+						blueLedControlFunc(1, 0, 200, 5);
+					}
+					isHotSpotLedOpenTheadRunning = false;
+				}
+			}
+		}.start();
 	}else{
 		Intent intent = new Intent(ACTION_SWTICH_SOTFAP_FROM_KEY_CLOSE);
 		mContext.sendBroadcast(intent);
+		new Thread() {
+			public void run() {
+				if(isHotSpotLedOpenTheadRunning){
+					Log.i(TAG, "isHotSpotLedOpenTheadRunning = ture first disable it");
+					blueLedControlFunc(0, 0, 0, 0);
+					isHotSpotLedOpenTheadRunning = false;
+				}
+				if(isHotSpotLedCloseTheadRunning){
+					Log.i(TAG, "isHotSpotLedCloseTheadRunning = ture, so just return");
+					return;
+				}else{
+					Log.i(TAG, "into hotspot close blueLed control");
+					isHotSpotLedCloseTheadRunning = true;
+					blueLedControlFunc(0, 4, 50, 50);
+				//sleep 2s
+					try{
+						sleep(2000);
+					} catch (InterruptedException e) {
+						e.printStackTrace();
+					}
+					if(isHotSpotLedCloseTheadRunning){
+						blueLedControlFunc(0, 0, 0, 0);
+					}
+					isHotSpotLedCloseTheadRunning = false;
+				}
+			}
+		}.start();
 	}
         if (mWifiManager.setWifiApEnabled(null, enable)) {
             /* Disable here, enabled on receiving success broadcast */
