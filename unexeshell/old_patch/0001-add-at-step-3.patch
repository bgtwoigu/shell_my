From de5e2f275c8b0ddb486d8797f66cb8be90070b5d Mon Sep 17 00:00:00 2001
From: "haolong.zhang" <haolong.zhang@ck-telecom.com>
Date: Fri, 19 Sep 2014 17:25:05 +0800
Subject: [PATCH] add at step 3

Change-Id: Ib4c4d6b78e9903d983b58dc0c3d2d943d69ad4a3
---
 build/target/product/common.mk                     |   3 +-
 external/acmmode/Android.mk                        |   8 ++
 external/acmmode/acmmode.c                         |  66 +++++++++++
 kernel/drivers/power/power_supply_sysfs.c          |   4 +-
 mediatek/config/ckt95_lw_kk/init.project.rc        |   6 +-
 mediatek/external/atcid/atci/src/atcid_cust_cmd.c  | 121 ++++++++++++++++++++-
 mediatek/external/atcid/atci/src/atcid_cust_cmd.h  |   4 +-
 .../atcid/atci/src/atcid_cust_cmd_process.h        |   1 +
 mediatek/external/atcid/atci/src/atcid_util.h      |   9 ++
 mediatek/kernel/drivers/power/battery_common.c     |  36 +++++-
 10 files changed, 250 insertions(+), 8 deletions(-)
 create mode 100644 external/acmmode/Android.mk
 create mode 100644 external/acmmode/acmmode.c

diff --git a/build/target/product/common.mk b/build/target/product/common.mk
index 3003945..50671fd 100644
--- a/build/target/product/common.mk
+++ b/build/target/product/common.mk
@@ -565,7 +565,8 @@ PRODUCT_PACKAGES := \
     libpalsecurity \
     libpalwlan_mtk \
     pal \
-    downloader
+    downloader \
+	acmmode
 
 ifeq ($(strip $(GMT_FOTA_SUPPORT)), yes)
   PRODUCT_PACKAGES += rb_ua
diff --git a/external/acmmode/Android.mk b/external/acmmode/Android.mk
new file mode 100644
index 0000000..90ef9f0
--- /dev/null
+++ b/external/acmmode/Android.mk
@@ -0,0 +1,8 @@
+LOCAL_PATH := $(call my-dir)
+include $(CLEAR_VARS)
+LOCAL_SHARED_LIBRARIES += \
+libcutils libutils
+LOCAL_LDLIBS := -llog
+LOCAL_MODULE    := acmmode
+LOCAL_SRC_FILES := acmmode.c
+include $(BUILD_EXECUTABLE)
diff --git a/external/acmmode/acmmode.c b/external/acmmode/acmmode.c
new file mode 100644
index 0000000..94f35f7
--- /dev/null
+++ b/external/acmmode/acmmode.c
@@ -0,0 +1,66 @@
+#include <stdio.h>
+#include <unistd.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+#include <android/log.h>
+#include <cutils/log.h>
+#include <cutils/xlog.h>
+#include <linux/delay.h>
+#include "cutils/properties.h"
+#include <string.h>
+#include <stdio.h>
+
+#define LOG_TAG "[acmmode]"
+#define FIRST_TIME_SLEEP 3
+#define SLEEP_COUNT 200 // wait pc tool 10 S
+#define PROP_SIZE 512
+#define ACMMODE_MSG(fmt, arg ...) XLOGD("%s: " fmt, __FUNCTION__ ,##arg) 
+#define ACMMODE_ERR(fmt, arg ...) XLOGE("%s: " fmt, __FUNCTION__ ,##arg)
+int main()
+{
+	char usb_mode_store[PROP_SIZE], hicam_keep_atmode[PROP_SIZE], add_acm[PROP_SIZE], prop_verify[PROP_SIZE];
+	char android_boot[PROP_SIZE];
+	int i, ret;
+
+	//wait android finish boot
+	do{
+		property_get("service.bootanim.exit", android_boot, "0");
+		//ACMMODE_MSG("service.bootanim.exit = %d...\n", android_boot[0]);
+		sleep(1);
+	}while(android_boot[0] == 48);
+	for(i = 0; i < FIRST_TIME_SLEEP; i++)
+	{
+		ACMMODE_MSG("Need sleep i = %d...\n", i);	
+		sleep(1);
+	}
+	//store old usb config
+	property_get("sys.usb.config", usb_mode_store, "mass_storage,adb");
+	ACMMODE_MSG("old sys.usb.config = %s\n", usb_mode_store);
+	ACMMODE_MSG("New add acm mode 10S begin...\n");
+	strcpy(add_acm, usb_mode_store);
+	strcat(add_acm, ",acm");
+	property_set("sys.usb.config", add_acm);
+	property_get("sys.usb.config", prop_verify, "------");
+	ACMMODE_MSG("Verify prop sys.usb.config = %s\n", prop_verify);
+	//begin check "hicam.keep.atmode" property
+	for(i = 0; i < SLEEP_COUNT; i++)
+	{
+		property_get("hicam.keep.atmode", hicam_keep_atmode, "false");
+		ret = strncmp(hicam_keep_atmode, "ture", 4);
+		if(ret == 0)
+		{
+			ACMMODE_MSG("hicam.keep.atmode = %s; find pc AT tool ,now keep atmode\n", hicam_keep_atmode);
+			return 0; //exit service
+		}
+		usleep(50 * 1000);
+		if(i == SLEEP_COUNT -1)
+			ACMMODE_MSG("debug hicam_keep_atmode = %s, need sleep NOW cont = %d\n", hicam_keep_atmode, i);
+	}
+	ACMMODE_MSG("we can not find pc AT tool in 10 Seconds, now backup old usb config");
+	property_set("sys.usb.config", usb_mode_store);
+	property_get("sys.usb.config", prop_verify, "------");
+	ACMMODE_MSG("Verify prop sys.usb.config = %s\n", prop_verify);
+	return 0; // exit service 
+}
diff --git a/kernel/drivers/power/power_supply_sysfs.c b/kernel/drivers/power/power_supply_sysfs.c
index a7a85ef..a18b02c 100644
--- a/kernel/drivers/power/power_supply_sysfs.c
+++ b/kernel/drivers/power/power_supply_sysfs.c
@@ -237,8 +237,8 @@ static umode_t power_supply_attr_is_visible(struct kobject *kobj,
 		int property = psy->properties[i];
 
 		if (property == attrno) {
-			if (psy->property_is_writeable &&
-			    psy->property_is_writeable(psy, property) > 0)
+			if ((psy->set_property)||(psy->property_is_writeable &&
+			    psy->property_is_writeable(psy, property) > 0))
 				mode |= S_IWUSR;
 
 			return mode;
diff --git a/mediatek/config/ckt95_lw_kk/init.project.rc b/mediatek/config/ckt95_lw_kk/init.project.rc
index 9418a69..c895e6c 100644
--- a/mediatek/config/ckt95_lw_kk/init.project.rc
+++ b/mediatek/config/ckt95_lw_kk/init.project.rc
@@ -117,4 +117,8 @@ service ext_mdinit /system/bin/ext_mdinit  /dev/ttyMT1
 # Connectivity related services (End)
 #
 
-
+service acmmode /system/bin/acmmode
+    user root
+    group  root
+	oneshot
+start acmmode
diff --git a/mediatek/external/atcid/atci/src/atcid_cust_cmd.c b/mediatek/external/atcid/atci/src/atcid_cust_cmd.c
index da7e14b..80ecfea 100644
--- a/mediatek/external/atcid/atci/src/atcid_cust_cmd.c
+++ b/mediatek/external/atcid/atci/src/atcid_cust_cmd.c
@@ -45,10 +45,21 @@
 #include <private/android_filesystem_config.h>
 #include <stdlib.h>
 #include "libwifitest.h"
-
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
 #define ATCI_SIM "persist.service.atci.sim"
 #define ATCI_PS "persist.service.atci.ps"
 
+/*add for CKT customer AT command*/
+#define ATCI_SN "ro.serialno"
+#define CHARGE_ENABLE_NODE "/sys/class/power_supply/battery/charge_enabled"
+#define VOLTAGE_NODE "/sys/class/power_supply/battery/batt_vol"
+
 int wifiEnableState = -1;
 int wifiBand = -1;
 uint32_t wifiFreq = 0;
@@ -720,3 +731,111 @@ ATRESPONSE_t pas_wirpckg_handler(char* cmdline, ATOP_t opType, char* response) {
 	return AT_ERROR;
 }
 
+ATRESPONSE_t pas_ckt_customer_handler(char* cmdline, /*CKT_CUSTOMER_CMD*/ ATOP_t opType, char* response) {
+	int fd, err = 0, cmdID = 0, num = 0;
+	char SN_READ_BUF[PROPERTY_VALUE_MAX], voltage_val[4], charge_write_buf[8];
+
+	LOGATCI(LOG_DEBUG, "handle cmdline:%s", cmdline);
+	LOGATCI(LOG_DEBUG, "handle cmd: CMD = %d \n", opType);
+	switch(opType){
+		case AT_READ_OP:
+			sprintf(response, "%s", "wo do not imp read function");
+			return AT_OK;
+		case AT_TEST_OP:
+			sprintf(response, "%s", "usage:\nAT^HWCMD=?--help;AT^HWCMD=10---keep AT mode;AT^HWCMD=11---read sn;AT^HWCMD=12--enable charge;AT^HWCMD=13---disable charge;AT^HWCMD=14---read voltage\n");
+			return AT_OK;
+		case AT_SET_OP:
+			err = at_tok_nextint(&cmdline, &cmdID);
+			LOGATCI(LOG_DEBUG, "handle cktcmd: ret = %d;cktCMD = %d \n", err, cmdID);
+			if (err < 0) return -1;
+			switch(cmdID){
+				case AT_READY_OP:
+					LOGATCI(LOG_DEBUG, "into at_ready_op \n");
+					property_set("hicam.keep.atmode", "ture");
+					sprintf(response, "%s", "into at_ready_op ok and set property hicam.keep.atmode = true");
+					return AT_OK;
+				case AT_READSN_OP:
+					LOGATCI(LOG_DEBUG, "into at_readsn_op \n");
+					property_get(ATCI_SN, SN_READ_BUF, "0123456789");
+					sprintf(response, "%s", SN_READ_BUF);
+					return AT_OK;
+				case AT_ENABLE_CHARGE_OP:
+					num = 0;
+					char *p = charge_write_buf;
+					LOGATCI(LOG_DEBUG, "into at_enabel_charge_op \n");
+					fd = open(CHARGE_ENABLE_NODE, O_WRONLY);
+					if(fd == -1)
+					{
+						LOGATCI(LOG_DEBUG, "open CHARGE_ENABLE_NODE fd err \n");
+						sprintf(response, "%s", "enable charging err: open node fail");
+						return AT_ERROR;
+					}
+					num = sprintf(p, "%d", 1);
+					p=p+num;
+					*p = '\0';
+					if(write(fd, charge_write_buf, strlen(charge_write_buf) + 1) == -1)
+					{
+						LOGATCI(LOG_DEBUG, "write fd err \n");
+						sprintf(response, "%s", "enable charging err: write node fail");
+						return AT_ERROR;
+					}
+					close(fd);
+					sprintf(response, "%s", "enable charging ok");
+					LOGATCI(LOG_DEBUG, "enable charging ok \n");
+					return AT_OK;
+				case AT_DISABLE_CHARGE_OP:
+					num = 0;
+					char *po = charge_write_buf;
+					LOGATCI(LOG_DEBUG, "into at_disbale_charge_op \n");
+					fd = open(CHARGE_ENABLE_NODE, O_WRONLY);
+					if(fd == -1)
+					{
+						LOGATCI(LOG_DEBUG, "open CHARGE_ENABLE_NODE fd err \n");
+						sprintf(response, "%s", "enable charging err: oepn node fail");
+						return AT_ERROR;
+					}
+					num = sprintf(po, "%d", 0);
+					po = po + num;
+					*po = '\0';
+					if(write(fd, charge_write_buf, strlen(charge_write_buf) + 1) == -1)
+					{
+						LOGATCI(LOG_DEBUG, "write fd err \n");
+						sprintf(response, "%s", "disable charging err: write node fail");
+						return AT_ERROR;
+					}
+					close(fd);
+					sprintf(response, "%s", "disable charging ok");
+					LOGATCI(LOG_DEBUG, "disable charging ok \n");
+					return AT_OK;
+				case AT_READ_VOLTAGE:
+					LOGATCI(LOG_DEBUG, "into at_read_voltage_op \n");
+					fd = open(VOLTAGE_NODE, O_RDONLY);
+					if(fd == -1)
+					{
+						LOGATCI(LOG_DEBUG, "open VOLTAGE_NODE fd err \n");
+						sprintf(response, "%s", "VOLTAGE_NODE err: open node fail");
+						return AT_ERROR;
+					}
+					if(read(fd, voltage_val , sizeof(voltage_val)) == -1)
+					{
+						LOGATCI(LOG_DEBUG, "read fd err \n");
+						sprintf(response, "%s", "read VOLTAGE_NODE err: READ node fail");
+						return AT_ERROR;
+					}
+					close(fd);
+					sprintf(response, "%s", voltage_val);
+					LOGATCI(LOG_DEBUG, "read VOLTAGE ok voltage_val = %d\n", voltage_val);
+					return AT_OK;
+				default:
+					LOGATCI(LOG_DEBUG, "can not handle cmdline:%s", cmdline);
+					LOGATCI(LOG_DEBUG, "can not find cmd: CMD = %d \n", opType);
+					break;
+
+				}
+		default:
+			LOGATCI(LOG_DEBUG, "can not handle cmdline:%s", cmdline);
+			LOGATCI(LOG_DEBUG, "can not find cmd: CMD = %d \n", opType);
+			break;
+	}
+	return AT_ERROR;
+}
diff --git a/mediatek/external/atcid/atci/src/atcid_cust_cmd.h b/mediatek/external/atcid/atci/src/atcid_cust_cmd.h
index c5e6b3d..194f8f7 100644
--- a/mediatek/external/atcid/atci/src/atcid_cust_cmd.h
+++ b/mediatek/external/atcid/atci/src/atcid_cust_cmd.h
@@ -55,7 +55,7 @@ ATRESPONSE_t pas_witx_handler(char* cmdline, ATOP_t opType, char* response);
 ATRESPONSE_t pas_wirx_handler(char* cmdline, ATOP_t opType, char* response);
 ATRESPONSE_t pas_wirpckg_handler(char* cmdline, ATOP_t opType, char* response);
 ATRESPONSE_t pas_pct_handler(char* cmdline, ATOP_t opType, char* response);
-
+ATRESPONSE_t pas_ckt_customer_handler(char* cmdline,/* CKT_CUSTOMER_CMD*/ATOP_t opType, char* response);
 
 #ifdef MTK_TC1_FEATURE
 ATRESPONSE_t pas_witestmode_handler(char* cmdline, ATOP_t opType, char* response); 
@@ -65,4 +65,4 @@ ATRESPONSE_t pas_wimac_handler(char* cmdline, ATOP_t opType, char* response);
 ATRESPONSE_t pas_wimacck_handler(char* cmdline, ATOP_t opType, char* response);
 #endif
 
-#endif
\ No newline at end of file
+#endif
diff --git a/mediatek/external/atcid/atci/src/atcid_cust_cmd_process.h b/mediatek/external/atcid/atci/src/atcid_cust_cmd_process.h
index 4cf413c..1c50566 100644
--- a/mediatek/external/atcid/atci/src/atcid_cust_cmd_process.h
+++ b/mediatek/external/atcid/atci/src/atcid_cust_cmd_process.h
@@ -73,6 +73,7 @@ static customcmd_type custom_cmd_table[] = {
         {"AT^WITX", AT_READ_OP | AT_TEST_OP | AT_SET_OP, pas_witx_handler},
         {"AT^WIRX", AT_READ_OP | AT_TEST_OP | AT_SET_OP, pas_wirx_handler},
         {"AT^WIRPCKG", AT_READ_OP | AT_TEST_OP | AT_SET_OP, pas_wirpckg_handler},
+		{"AT^HWCMD", AT_READ_OP | AT_TEST_OP | AT_SET_OP, pas_ckt_customer_handler},
         {"AT+PCT", AT_TEST_OP | AT_SET_OP | AT_READ_OP, pas_pct_handler},
 #ifdef MTK_TC1_FEATURE
         {"AT%WLAN", AT_ACTION_OP | AT_READ_OP | AT_SET_OP, pas_witestmode_handler},
diff --git a/mediatek/external/atcid/atci/src/atcid_util.h b/mediatek/external/atcid/atci/src/atcid_util.h
index d42d54a..ff323e4 100644
--- a/mediatek/external/atcid/atci/src/atcid_util.h
+++ b/mediatek/external/atcid/atci/src/atcid_util.h
@@ -93,6 +93,15 @@ typedef enum
   AT_NOT_IMPL       = 101,   /*  Not Implement     */
 } ATRESPONSE_t;
 
+typedef enum
+{
+	AT_READY_OP				= 10,
+	AT_READSN_OP			= 11,
+	AT_ENABLE_CHARGE_OP		= 12,
+	AT_DISABLE_CHARGE_OP	= 13,
+	AT_READ_VOLTAGE			= 14,
+} CKT_CUSTOMER_CMD;
+
 #define UCASE(A) (((A >= 'a') && (A <= 'z')) ? (A-0x20) : (A))
 
 void  convertToUpperCase(char * str, char endCh);
diff --git a/mediatek/kernel/drivers/power/battery_common.c b/mediatek/kernel/drivers/power/battery_common.c
index 5270aa3..71fde0f 100644
--- a/mediatek/kernel/drivers/power/battery_common.c
+++ b/mediatek/kernel/drivers/power/battery_common.c
@@ -238,6 +238,7 @@ static enum power_supply_property battery_props[] = {
     POWER_SUPPLY_PROP_PRESENT,
     POWER_SUPPLY_PROP_TECHNOLOGY,
     POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_CHARGE_ENABLED,
     /* Add for Battery Service */
     POWER_SUPPLY_PROP_batt_vol,
     POWER_SUPPLY_PROP_batt_temp,    
@@ -534,6 +535,38 @@ static int battery_get_property(struct power_supply *psy,
 
     return ret;
 }
+static int battery_set_property(struct power_supply *psy,
+    enum power_supply_property psp,
+    union power_supply_propval *val)
+{
+    int ret = 0;   
+	U32 charging_enable = false;
+    struct battery_data *data = container_of(psy, struct battery_data, psy);
+
+	battery_xlog_printk(BAT_LOG_CRTI, "----%s:[%d]:psp = %d---\n", __func__, __LINE__, psp);
+    switch (psp) {
+	case POWER_SUPPLY_PROP_CHARGE_ENABLED:
+		battery_xlog_printk(BAT_LOG_CRTI, "----%s:[%d]----val->intval = %d\n", __func__, __LINE__, val->intval);
+		if(val->intval == 1)
+		{
+			charging_enable = true;
+			battery_charging_control(CHARGING_CMD_ENABLE,&charging_enable);
+			battery_xlog_printk(BAT_LOG_CRTI, "----%s:[%d]:enable charge ok\n", __func__, __LINE__);
+		}
+		else if(val->intval == 0)
+		{
+			charging_enable = false;
+			battery_charging_control(CHARGING_CMD_ENABLE,&charging_enable);
+			battery_xlog_printk(BAT_LOG_CRTI, "----%s:[%d]:disable charge ok\n", __func__, __LINE__);
+		}
+		break;
+    default:
+        ret = -EINVAL;
+        break;
+    }
+
+    return ret;
+}
 
 /* wireless_data initialization */
 static struct wireless_data wireless_main = {
@@ -578,7 +611,8 @@ static struct battery_data battery_main = {
     .type = POWER_SUPPLY_TYPE_BATTERY,
     .properties = battery_props,
     .num_properties = ARRAY_SIZE(battery_props),
-    .get_property = battery_get_property,                
+    .get_property = battery_get_property,      
+	.set_property = battery_set_property,
     },
 /* CC: modify to have a full power supply status */
 #if defined(CONFIG_POWER_EXT)
-- 
1.9.1

