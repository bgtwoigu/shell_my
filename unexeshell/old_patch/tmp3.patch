diff --git a/system/vold/Fat.cpp b/system/vold/Fat.cpp
index 9d03243..582518c 100644
--- a/system/vold/Fat.cpp
+++ b/system/vold/Fat.cpp
@@ -713,6 +713,161 @@ int Fat::format(const char *fsPath, unsigned int numSectors, bool wipe, bool for
     }
     return 0;
 }
+int Fat::format(const char *fsPath, unsigned int numSectors, bool wipe, bool forceFat32, bool customer_label, const char *labe_name) {
+    int fd;
+    const char *args[10];
+    int rc;
+    int status;
+#ifndef MTK_FORMAT_NOT_PARAM_CLUSTER
+    unsigned int bps;
+    unsigned int bsize;
+#endif
+
+    if (wipe) {
+        Fat::wipe(fsPath, numSectors);
+    }
+
+    if (forceFat32){
+        SLOGI("%s: force to fat32! \n", __FUNCTION__);
+    }
+
+    if (-1 == (fd = open(fsPath, O_RDONLY, 0644)) )
+    {
+        SLOGE("failed to open %s\n", fsPath);
+        errno = EIO;
+        return -1;
+    }
+    args[0] = MKDOSFS_PATH;
+
+#ifdef MTK_FORMAT_NOT_PARAM_CLUSTER
+    args[1] = "-O";
+    args[2] = "android";
+    close(fd);
+    if (numSectors) {
+        char tmp[32];
+        snprintf(tmp, sizeof(tmp), "%u", numSectors);
+        const char *size = tmp;
+        args[3] = "-s";
+        args[4] = size;
+        args[5] = fsPath;
+
+	if (forceFat32){
+            args[5] = "-F";
+            args[6] = "32";
+            args[7] = fsPath;
+            SLOGD("%s %s %s %s %s %s %s %s", args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
+            rc = android_fork_execvp(8, (char **)args, &status, false, true);
+        }
+        else {
+            SLOGD("%s %s %s %s %s %s", args[0], args[1], args[2], args[3], args[4], args[5]);
+            rc = android_fork_execvp(6, (char **)args, &status,
+                false, true);
+        }
+    } else {
+        args[3] = fsPath;
+
+	if (forceFat32){
+            args[3] = "-F";
+            args[4] = "32";
+            args[5] = fsPath;
+            SLOGD("%s %s %s %s %s %s", args[0], args[1], args[2], args[3], args[4], args[5]);
+            rc = android_fork_execvp(6, (char **)args, &status, false, true);
+	}
+        else
+        {
+		if(customer_label){
+			args[3] = "-L";
+			args[4] = labe_name;
+			args[5] = fsPath;
+			SLOGD("%s %s %s %s %s %s", args[0], args[1], args[2], args[3], args[4], args[5]);
+			rc = android_fork_execvp(6, (char **)args, &status, false, true);
+		}
+		else{
+			SLOGD("%s %s %s %s", args[0], args[1], args[2], args[3]);
+			rc = android_fork_execvp(4, (char **)args, &status, false, true);
+		}
+    }
+
+#else
+    args[1] = "-F";
+   // args[2] = "32";
+    if (ioctl(fd, BLKSSZGET, &bps))
+    {
+        bps = 0;
+        SLOGE("failed to get %s bytes/sector\n", fsPath);
+    }
+    if (ioctl(fd, BLKGETSIZE, &bsize))
+    {
+        bsize = 0;
+        SLOGE("failed to get %s device size\n", fsPath);
+    }
+
+    close(fd);
+    SLOGD("total cluster is %d", ( (unsigned long long)bsize * 512) / (bps * 8));
+
+    if (!numSectors && bps && bsize)
+    {
+        if ( (((unsigned long long)bsize * 512) / (bps * 8)) > 65536 )
+            args[2] = "32";
+        else
+            args[2] = "16";
+    }
+    else
+        args[2] = "32";
+
+    if (forceFat32){
+        args[2] = "32";
+    }
+
+    args[3] = "-O";
+    args[4] = "android";
+    args[5] = "-c";
+    args[6] = "8";
+
+    SLOGD("%s %s %s %s %s %s %s", args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
+
+    if (numSectors) {
+        char tmp[32];
+        snprintf(tmp, sizeof(tmp), "%u", numSectors);
+        const char *size = tmp;
+        args[7] = "-s";
+        args[8] = size;
+        args[9] = fsPath;
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status,
+                false, true);
+    } else {
+        args[7] = fsPath;
+        rc = android_fork_execvp(8, (char **)args, &status, false,
+                true);
+    }
+#endif
+
+    if (rc != 0) {
+        SLOGE("Filesystem format failed due to logwrap error");
+        errno = EIO;
+        return -1;
+    }
+
+    if (!WIFEXITED(status)) {
+        SLOGE("Filesystem format did not exit properly");
+        errno = EIO;
+        return -1;
+    }
+
+    status = WEXITSTATUS(status);
+
+    if (status == 0) {
+        sync();
+        SLOGI("Filesystem formatted OK");
+        return 0;
+    } else {
+        SLOGE("Format failed (unknown exit code %d)", status);
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
+
 
 void Fat::wipe(const char *fsPath, unsigned int numSectors) {
     int fd;
diff --git a/system/vold/Volume.cpp b/system/vold/Volume.cpp
index 008b694..f0b5562 100644
--- a/system/vold/Volume.cpp
+++ b/system/vold/Volume.cpp
@@ -803,6 +803,16 @@ __CHECK_FAT_AGAIN:
              }
         }  
 #endif     
+#if 1
+     char need_formart_sdcard0[PROPERTY_VALUE_MAX] ;
+            property_get("xxxxxxxxxxxxx", need_formart_sdcard0, "1");
+            
+            if (strcmp(need_formart_sdcard0, "1") && strcmp(getLabel(), "sdcard0")) {
+                SLOGI("** internal sdcard0 need format. Try to format it. (%s)\n", devicePath);
+				Fat::format(devicePath, 0, false, false, true, "FastStorage");
+                }
+
+#endif
 
         errno = 0;
         int gid;
