diff --git a/mediatek/external/atcid/atci/src/atcid_cust_cmd.c b/mediatek/external/atcid/atci/src/atcid_cust_cmd.c
index da7e14b..920492a 100644
--- a/mediatek/external/atcid/atci/src/atcid_cust_cmd.c
+++ b/mediatek/external/atcid/atci/src/atcid_cust_cmd.c
@@ -45,10 +45,21 @@
 #include <private/android_filesystem_config.h>
 #include <stdlib.h>
 #include "libwifitest.h"
-
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
 #define ATCI_SIM "persist.service.atci.sim"
 #define ATCI_PS "persist.service.atci.ps"
 
+/*add for CKT customer AT command*/
+#define ATCI_SN "ro.serialno"
+#define CHARGE_ENABLE_NODE "/sys/class/power_supply/battery/charge_enabled"
+#define VOLTAGE_NODE "/sys/class/power_supply/battery/batt_vol"
+
 int wifiEnableState = -1;
 int wifiBand = -1;
 uint32_t wifiFreq = 0;
@@ -720,3 +731,81 @@ ATRESPONSE_t pas_wirpckg_handler(char* cmdline, ATOP_t opType, char* response) {
 	return AT_ERROR;
 }
 
+ATRESPONSE_t pas_ckt_customer_handler(char* cmdline, CKT_CUSTOMER_CMD opType, char* response) {
+	int fd, voltage_val;
+	char SN_READ_BUF[PROPERTY_VALUE_MAX];
+
+	LOGATCI(LOG_DEBUG, "handle cmdline:%s", cmdline);
+	switch(opType){
+		case AT_READY_OP:
+			LOGATCI(LOG_DEBUG, "into at_ready_op \n");
+			response = "into at_ready_op ok";
+			return AT_OK;
+		case AT_READSN_OP:
+			LOGATCI(LOG_DEBUG, "into at_readsn_op \n");
+			property_get(ATCI_SN, SN_READ_BUF, "0123456789");
+			sprintf(response, "%d", SN_READ_BUF);
+			return AT_OK;
+		case AT_ENABLE_CHARGE_OP:
+			LOGATCI(LOG_DEBUG, "into at_enabel_charge_op \n");
+			fd = open(CHARGE_ENABLE_NODE, O_WRONLY);
+			if(fd == -1)
+			{
+				LOGATCI(LOG_DEBUG, "open CHARGE_ENABLE_NODE fd err \n");
+				response = "enable charging err: open node fail";
+				return AT_ERROR;
+			}
+			if(write(fd, "true", sizeof("true")) == -1)
+			{
+				LOGATCI(LOG_DEBUG, "write fd err \n");
+				response = "enable charging err: write node fail";
+				return AT_ERROR;
+			}
+			close(fd);
+			response = "enable charging ok";
+			LOGATCI(LOG_DEBUG, "enable charging ok \n");
+			return AT_OK;
+		case AT_DISABLE_CHARGE_OP:
+			LOGATCI(LOG_DEBUG, "into at_disbale_charge_op \n");
+			fd = open(CHARGE_ENABLE_NODE, O_WRONLY);
+			if(fd == -1)
+			{
+				LOGATCI(LOG_DEBUG, "open CHARGE_ENABLE_NODE fd err \n");
+				response = "enable charging err: open node fail";
+				return AT_ERROR;
+			}
+			if(write(fd, "flase", sizeof("true")) == -1)
+			{
+				LOGATCI(LOG_DEBUG, "write fd err \n");
+				response = "disable charging err: write node fail";
+				return AT_ERROR;
+			}
+			close(fd);
+			response = "disable charging ok";
+			LOGATCI(LOG_DEBUG, "disable charging ok \n");
+			return AT_OK;
+		case AT_READ_VOLTAGE:
+			LOGATCI(LOG_DEBUG, "into at_read_voltage_op \n");
+			fd = open(VOLTAGE_NODE, O_RDONLY);
+			if(fd == -1)
+			{
+				LOGATCI(LOG_DEBUG, "open VOLTAGE_NODE fd err \n");
+				response = "VOLTAGE_NODE err: open node fail";
+				return AT_ERROR;
+			}
+			if(read(fd,&voltage_val , sizeof(int)) == -1)
+			{
+				LOGATCI(LOG_DEBUG, "read fd err \n");
+				response = "read VOLTAGE_NODE err: WRITE node fail";
+				return AT_ERROR;
+			}
+			close(fd);
+			sprintf(response, "%d", voltage_val);
+			LOGATCI(LOG_DEBUG, "read VOLTAGE ok \n");
+			return AT_OK;
+		default:
+			LOGATCI(LOG_DEBUG, "can not find cmd: CMD = %d \n", opType);
+			break;
+	}
+	return AT_ERROR;
+}
diff --git a/mediatek/external/atcid/atci/src/atcid_cust_cmd.h b/mediatek/external/atcid/atci/src/atcid_cust_cmd.h
index c5e6b3d..86fcb2d 100644
--- a/mediatek/external/atcid/atci/src/atcid_cust_cmd.h
+++ b/mediatek/external/atcid/atci/src/atcid_cust_cmd.h
@@ -55,7 +55,7 @@ ATRESPONSE_t pas_witx_handler(char* cmdline, ATOP_t opType, char* response);
 ATRESPONSE_t pas_wirx_handler(char* cmdline, ATOP_t opType, char* response);
 ATRESPONSE_t pas_wirpckg_handler(char* cmdline, ATOP_t opType, char* response);
 ATRESPONSE_t pas_pct_handler(char* cmdline, ATOP_t opType, char* response);
-
+ATRESPONSE_t pas_ckt_customer_handler(char* cmdline, CKT_CUSTOMER_CMD opType, char* response);
 
 #ifdef MTK_TC1_FEATURE
 ATRESPONSE_t pas_witestmode_handler(char* cmdline, ATOP_t opType, char* response); 
@@ -65,4 +65,4 @@ ATRESPONSE_t pas_wimac_handler(char* cmdline, ATOP_t opType, char* response);
 ATRESPONSE_t pas_wimacck_handler(char* cmdline, ATOP_t opType, char* response);
 #endif
 
-#endif
\ No newline at end of file
+#endif
diff --git a/mediatek/external/atcid/atci/src/atcid_cust_cmd_process.h b/mediatek/external/atcid/atci/src/atcid_cust_cmd_process.h
index 4cf413c..08dbff4 100644
--- a/mediatek/external/atcid/atci/src/atcid_cust_cmd_process.h
+++ b/mediatek/external/atcid/atci/src/atcid_cust_cmd_process.h
@@ -73,6 +73,7 @@ static customcmd_type custom_cmd_table[] = {
         {"AT^WITX", AT_READ_OP | AT_TEST_OP | AT_SET_OP, pas_witx_handler},
         {"AT^WIRX", AT_READ_OP | AT_TEST_OP | AT_SET_OP, pas_wirx_handler},
         {"AT^WIRPCKG", AT_READ_OP | AT_TEST_OP | AT_SET_OP, pas_wirpckg_handler},
+		{"AT^HWCMD", AT_READY_OP | AT_READSN_OP | AT_ENABLE_CHARGE_OP | AT_DISABLE_CHARGE_OP | AT_READ_VOLTAGE, pas_ckt_customer_handler},
         {"AT+PCT", AT_TEST_OP | AT_SET_OP | AT_READ_OP, pas_pct_handler},
 #ifdef MTK_TC1_FEATURE
         {"AT%WLAN", AT_ACTION_OP | AT_READ_OP | AT_SET_OP, pas_witestmode_handler},
diff --git a/mediatek/external/atcid/atci/src/atcid_util.h b/mediatek/external/atcid/atci/src/atcid_util.h
index d42d54a..478d555 100644
--- a/mediatek/external/atcid/atci/src/atcid_util.h
+++ b/mediatek/external/atcid/atci/src/atcid_util.h
@@ -93,6 +93,15 @@ typedef enum
   AT_NOT_IMPL       = 101,   /*  Not Implement     */
 } ATRESPONSE_t;
 
+typedef enum
+{
+	AT_READY_OP				= 0x000a,
+	AT_READSN_OP			= 0x000b,
+	AT_ENABLE_CHARGE_OP		= 0x000c,
+	AT_DISABLE_CHARGE_OP	= 0x000d,
+	AT_READ_VOLTAGE			= 0x000e,
+} CKT_CUSTOMER_CMD;
+
 #define UCASE(A) (((A >= 'a') && (A <= 'z')) ? (A-0x20) : (A))
 
 void  convertToUpperCase(char * str, char endCh);
diff --git a/mediatek/kernel/drivers/power/battery_common.c b/mediatek/kernel/drivers/power/battery_common.c
index 5270aa3..4ad2dd0 100644
--- a/mediatek/kernel/drivers/power/battery_common.c
+++ b/mediatek/kernel/drivers/power/battery_common.c
@@ -238,6 +238,7 @@ static enum power_supply_property battery_props[] = {
     POWER_SUPPLY_PROP_PRESENT,
     POWER_SUPPLY_PROP_TECHNOLOGY,
     POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_CHARGE_ENABLED,
     /* Add for Battery Service */
     POWER_SUPPLY_PROP_batt_vol,
     POWER_SUPPLY_PROP_batt_temp,    
@@ -486,6 +487,9 @@ static int battery_get_property(struct power_supply *psy,
     case POWER_SUPPLY_PROP_CAPACITY:
         val->intval = data->BAT_CAPACITY;
         break;        
+	case POWER_SUPPLY_PROP_CHARGE_ENABLED:
+		val->intval = 0;	
+		break;
     case POWER_SUPPLY_PROP_batt_vol:
         val->intval = data->BAT_batt_vol;
         break;
@@ -534,6 +538,48 @@ static int battery_get_property(struct power_supply *psy,
 
     return ret;
 }
+static int battery_set_property(struct power_supply *psy,
+    enum power_supply_property psp,
+    union power_supply_propval *val)
+{
+    int ret = 0;   
+	U32 charging_enable = false;
+    struct battery_data *data = container_of(psy, struct battery_data, psy);
+
+	battery_xlog_printk(BAT_LOG_CRTI, "----%s:[%d]----\n", __func__, __LINE__);
+    switch (psp) {
+	case POWER_SUPPLY_PROP_CHARGE_ENABLED:
+		battery_xlog_printk(BAT_LOG_CRTI, "----%s:[%d]----val->intval = %d\n", __func__, __LINE__, val->intval);
+		battery_charging_control(CHARGING_CMD_ENABLE,&charging_enable);
+		break;
+    case POWER_SUPPLY_PROP_STATUS:
+    case POWER_SUPPLY_PROP_HEALTH:
+    case POWER_SUPPLY_PROP_PRESENT:
+    case POWER_SUPPLY_PROP_TECHNOLOGY:
+    case POWER_SUPPLY_PROP_CAPACITY:
+    case POWER_SUPPLY_PROP_batt_vol:
+    case POWER_SUPPLY_PROP_batt_temp:
+    case POWER_SUPPLY_PROP_TemperatureR:
+    case POWER_SUPPLY_PROP_TempBattVoltage:        
+    case POWER_SUPPLY_PROP_InstatVolt:
+    case POWER_SUPPLY_PROP_BatteryAverageCurrent:
+    case POWER_SUPPLY_PROP_BatterySenseVoltage:
+    case POWER_SUPPLY_PROP_ISenseVoltage:
+    case POWER_SUPPLY_PROP_ChargerVoltage:
+    /* Dual battery */
+    case POWER_SUPPLY_PROP_status_2nd :
+    case POWER_SUPPLY_PROP_capacity_2nd :
+    case POWER_SUPPLY_PROP_present_2nd :
+    case POWER_SUPPLY_PROP_adjust_power :
+        break;
+
+    default:
+        ret = -EINVAL;
+        break;
+    }
+
+    return ret;
+}
 
 /* wireless_data initialization */
 static struct wireless_data wireless_main = {
@@ -578,7 +624,8 @@ static struct battery_data battery_main = {
     .type = POWER_SUPPLY_TYPE_BATTERY,
     .properties = battery_props,
     .num_properties = ARRAY_SIZE(battery_props),
-    .get_property = battery_get_property,                
+    .get_property = battery_get_property,      
+	.set_property = battery_set_property,
     },
 /* CC: modify to have a full power supply status */
 #if defined(CONFIG_POWER_EXT)
