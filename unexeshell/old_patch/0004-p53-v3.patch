From 039cd799e7d67ea66155b042ab3deb0b98299def Mon Sep 17 00:00:00 2001
From: "haolong.zhang" <haolong.zhang@ck-telecom.com>
Date: Wed, 11 Feb 2015 13:25:10 +0800
Subject: [PATCH 4/4] p53 v3

Change-Id: I0fd0a798739bf3cd18a85ae46bf00ff3b0c7348b
---
 .../AudioALSACaptureDataProviderModemDai.cpp       | 192 +++++++++++++++
 .../aud_drv/AudioALSACaptureHandlerModemDai.cpp    |  88 +++++++
 .../aud_drv/AudioALSAPlaybackHandlerSphDL.cpp      | 258 +++++++++++++++++++++
 .../include/AudioALSACaptureDataProviderModemDai.h |  46 ++++
 .../include/AudioALSACaptureHandlerModemDai.h      |  38 +++
 .../audio/include/AudioALSAPlaybackHandlerSphDL.h  |  47 ++++
 .../include/AudioALSASpeechStreamController.h      |  55 +++++
 .../AudioALSASpeechStreamController.cpp            | 220 ++++++++++++++++++
 8 files changed, 944 insertions(+)
 create mode 100644 mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSACaptureDataProviderModemDai.cpp
 create mode 100644 mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSACaptureHandlerModemDai.cpp
 create mode 100644 mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSAPlaybackHandlerSphDL.cpp
 create mode 100644 mediatek/platform/mt6595/hardware/audio/include/AudioALSACaptureDataProviderModemDai.h
 create mode 100644 mediatek/platform/mt6595/hardware/audio/include/AudioALSACaptureHandlerModemDai.h
 create mode 100644 mediatek/platform/mt6595/hardware/audio/include/AudioALSAPlaybackHandlerSphDL.h
 create mode 100644 mediatek/platform/mt6595/hardware/audio/include/AudioALSASpeechStreamController.h
 create mode 100644 mediatek/platform/mt6595/hardware/audio/speech_driver/AudioALSASpeechStreamController.cpp

diff --git a/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSACaptureDataProviderModemDai.cpp b/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSACaptureDataProviderModemDai.cpp
new file mode 100644
index 0000000..4f5d667
--- /dev/null
+++ b/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSACaptureDataProviderModemDai.cpp
@@ -0,0 +1,192 @@
+#include "AudioALSACaptureDataProviderModemDai.h"
+
+#include <pthread.h>
+
+#include <linux/rtpm_prio.h>
+#include <sys/prctl.h>
+#include "AudioALSADeviceParser.h"
+#include "AudioType.h"
+
+
+#define LOG_TAG "AudioALSACaptureDataProviderModemDai"
+
+namespace android
+{
+
+
+/*==============================================================================
+ *                     Constant
+ *============================================================================*/
+
+//static const uint32_t kReadBufferSize = 0x2000; // 8k
+static const uint32_t kReadBufferSize = 0x400; // 1k
+
+/*==============================================================================
+ *                     Implementation
+ *============================================================================*/
+
+AudioALSACaptureDataProviderModemDai *AudioALSACaptureDataProviderModemDai::mAudioALSACaptureDataProviderModemDai = NULL;
+AudioALSACaptureDataProviderModemDai *AudioALSACaptureDataProviderModemDai::getInstance()
+{
+    AudioLock mGetInstanceLock;
+    AudioAutoTimeoutLock _l(mGetInstanceLock);
+
+    if (mAudioALSACaptureDataProviderModemDai == NULL)
+    {
+        mAudioALSACaptureDataProviderModemDai = new AudioALSACaptureDataProviderModemDai();
+    }
+    ASSERT(mAudioALSACaptureDataProviderModemDai != NULL);
+    return mAudioALSACaptureDataProviderModemDai;
+}
+
+AudioALSACaptureDataProviderModemDai::AudioALSACaptureDataProviderModemDai()
+{
+    ALOGD("%s()", __FUNCTION__);
+
+    // TODO(Harvey): query this
+    mConfig.channels = 1;
+    mConfig.rate = 16000;
+
+    mConfig.period_size = 512; // 512 * 2(Byte) * 1(channel)
+    mConfig.period_count = 8;
+    mConfig.format = PCM_FORMAT_S16_LE;
+
+    mConfig.start_threshold = 0;
+    mConfig.stop_threshold = 0;
+    mConfig.silence_threshold = 0;
+
+    mCaptureDataProviderType = CAPTURE_PROVIDER_NORMAL;
+}
+
+AudioALSACaptureDataProviderModemDai::~AudioALSACaptureDataProviderModemDai()
+{
+    ALOGD("%s()", __FUNCTION__);
+}
+
+
+status_t AudioALSACaptureDataProviderModemDai::open()
+{
+    ALOGD("%s()", __FUNCTION__);
+    ASSERT(mClientLock.tryLock() != 0); // lock by base class attach
+    AudioAutoTimeoutLock _l(mEnableLock);
+
+    ASSERT(mEnable == false);
+
+    mStreamAttributeSource.audio_format = AUDIO_FORMAT_PCM_16_BIT;
+    mStreamAttributeSource.audio_channel_mask = AUDIO_CHANNEL_IN_MONO;
+    mStreamAttributeSource.num_channels = android_audio_legacy::AudioSystem::popCount(mStreamAttributeSource.audio_channel_mask);
+    mStreamAttributeSource.sample_rate = 16000;
+
+    OpenPCMDump(LOG_TAG);
+
+    // enable pcm
+    int pcmindex = AudioALSADeviceParser::getInstance()->GetPcmIndexByString(keypcmModomDaiCapture);
+    int cardindex = AudioALSADeviceParser::getInstance()->GetCardIndexByString(keypcmModomDaiCapture);
+    ALOGD("AudioALSACaptureDataProviderModemDai::open() pcmindex = %d", pcmindex);
+    struct pcm_params *params;
+    params = pcm_params_get(cardindex, pcmindex,  PCM_IN);
+    if (params == NULL)
+    {
+        ALOGD("Device does not exist.\n");
+    }
+    int buffer_size = pcm_params_get_max(params, PCM_PARAM_BUFFER_BYTES);
+    ALOGD("buffersizemax = %d chanel %d, rate %d, period %d, period_count %d", buffer_size, mConfig.channels, mConfig.rate, mConfig.period_size, mConfig.period_count);
+    pcm_params_free(params);
+
+    openPcmDriver(pcmindex);
+
+    // create reading thread
+    mEnable = true;
+    int ret = pthread_create(&hReadThread, NULL, AudioALSACaptureDataProviderModemDai::readThread, (void *)this);
+    if (ret != 0)
+    {
+        ALOGE("%s() create thread fail!!", __FUNCTION__);
+        return UNKNOWN_ERROR;
+    }
+
+    return NO_ERROR;
+}
+
+status_t AudioALSACaptureDataProviderModemDai::close()
+{
+    ALOGD("%s()", __FUNCTION__);
+    ASSERT(mClientLock.tryLock() != 0); // lock by base class detach
+
+    mEnable = false;
+    AudioAutoTimeoutLock _l(mEnableLock);
+
+    ClosePCMDump();
+
+    closePcmDriver();
+
+    return NO_ERROR;
+}
+
+
+void *AudioALSACaptureDataProviderModemDai::readThread(void *arg)
+{
+    prctl(PR_SET_NAME, (unsigned long)__FUNCTION__, 0, 0, 0);
+
+#ifdef MTK_AUDIO_ADJUST_PRIORITY
+    // force to set priority
+    struct sched_param sched_p;
+    sched_getparam(0, &sched_p);
+    sched_p.sched_priority = RTPM_PRIO_AUDIO_RECORD + 1;
+    if (0 != sched_setscheduler(0, SCHED_RR, &sched_p))
+    {
+        ALOGE("[%s] failed, errno: %d", __FUNCTION__, errno);
+    }
+    else
+    {
+        sched_p.sched_priority = RTPM_PRIO_AUDIO_CCCI_THREAD;
+        sched_getparam(0, &sched_p);
+        ALOGD("sched_setscheduler ok, priority: %d", sched_p.sched_priority);
+    }
+#endif
+    ALOGD("+%s(), pid: %d, tid: %d", __FUNCTION__, getpid(), gettid());
+
+    status_t retval = NO_ERROR;
+    AudioALSACaptureDataProviderModemDai *pDataProvider = static_cast<AudioALSACaptureDataProviderModemDai *>(arg);
+
+    uint32_t open_index = pDataProvider->mOpenIndex;
+
+    // read raw data from alsa driver
+    char linear_buffer[kReadBufferSize];
+    while (pDataProvider->mEnable == true)
+    {
+        if (open_index != pDataProvider->mOpenIndex)
+        {
+            ALOGD("%s(), open_index(%d) != mOpenIndex(%d), return", __FUNCTION__, open_index, pDataProvider->mOpenIndex);
+            break;
+        }
+
+        retval = pDataProvider->mEnableLock.lock_timeout(300);
+        ASSERT(retval == NO_ERROR);
+        if (pDataProvider->mEnable == false)
+        {
+            pDataProvider->mEnableLock.unlock();
+            break;
+        }
+
+        ASSERT(pDataProvider->mPcm != NULL);
+        int retval = pcm_read(pDataProvider->mPcm, linear_buffer, kReadBufferSize);
+        if (retval != 0)
+        {
+            ALOGE("%s(), pcm_read() error, retval = %d", __FUNCTION__, retval);
+        }
+
+        // use ringbuf format to save buffer info
+        pDataProvider->mPcmReadBuf.pBufBase = linear_buffer;
+        pDataProvider->mPcmReadBuf.bufLen   = kReadBufferSize + 1; // +1: avoid pRead == pWrite
+        pDataProvider->mPcmReadBuf.pRead    = linear_buffer;
+        pDataProvider->mPcmReadBuf.pWrite   = linear_buffer + kReadBufferSize;
+        pDataProvider->mEnableLock.unlock();
+
+        pDataProvider->provideCaptureDataToAllClients(open_index);
+    }
+
+    ALOGD("-%s(), pid: %d, tid: %d", __FUNCTION__, getpid(), gettid());
+    return NULL;
+}
+
+} // end of namespace android
diff --git a/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSACaptureHandlerModemDai.cpp b/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSACaptureHandlerModemDai.cpp
new file mode 100644
index 0000000..9ba6b05
--- /dev/null
+++ b/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSACaptureHandlerModemDai.cpp
@@ -0,0 +1,88 @@
+
+#if defined(MTK_SPEAKER_MONITOR_SPEECH_SUPPORT)
+
+#include "AudioALSACaptureHandlerModemDai.h"
+
+#include "AudioALSAHardwareResourceManager.h"
+
+#include "AudioALSACaptureDataClient.h"
+#include "AudioALSACaptureDataProviderModemDai.h"
+#define LOG_TAG "AudioALSACaptureHandlerModemDai"
+
+namespace android
+{
+
+static FILE *pOutFile = NULL;
+
+AudioALSACaptureHandlerModemDai::AudioALSACaptureHandlerModemDai(stream_attribute_t *stream_attribute_target) :
+    AudioALSACaptureHandlerBase(stream_attribute_target)
+{
+    ALOGD("%s()", __FUNCTION__);
+    init();
+}
+
+
+AudioALSACaptureHandlerModemDai::~AudioALSACaptureHandlerModemDai()
+{
+    ALOGD("%s()+", __FUNCTION__);
+}
+
+status_t AudioALSACaptureHandlerModemDai::init()
+{
+    ALOGD("%s()", __FUNCTION__);
+    return NO_ERROR;
+}
+
+status_t AudioALSACaptureHandlerModemDai::open()
+{
+    ALOGD("+%s(), input_device = 0x%x, input_source = 0x%x",
+          __FUNCTION__, mStreamAttributeTarget->input_device, mStreamAttributeTarget->input_source);
+
+    ASSERT(mCaptureDataClient == NULL);
+    mCaptureDataClient = new AudioALSACaptureDataClient(AudioALSACaptureDataProviderModemDai::getInstance(), mStreamAttributeTarget);
+
+    //pOutFile = fopen("/sdcard/mtklog/SpkMonitor_MD.pcm", "wb");
+
+    ALOGD("-%s()", __FUNCTION__);
+    return NO_ERROR;
+}
+
+
+status_t AudioALSACaptureHandlerModemDai::close()
+{
+    ALOGD("+%s()", __FUNCTION__);
+
+    ASSERT(mCaptureDataClient != NULL);
+    delete mCaptureDataClient;
+    if (pOutFile != NULL)
+    {
+        fclose(pOutFile);
+    }
+
+    ALOGD("-%s()", __FUNCTION__);
+    return NO_ERROR;
+}
+
+
+status_t AudioALSACaptureHandlerModemDai::routing(const audio_devices_t input_device)
+{
+    //mHardwareResourceManager->changeInputDevice(input_device);
+    //Do not routing. It should be fixed.
+    return NO_ERROR;
+}
+
+
+ssize_t AudioALSACaptureHandlerModemDai::read(void *buffer, ssize_t bytes)
+{
+    ALOGV("%s()", __FUNCTION__);
+
+    mCaptureDataClient->read(buffer, bytes);
+    if (pOutFile != NULL)
+    {
+        fwrite(buffer, sizeof(char), bytes, pOutFile);
+    }
+    return bytes;
+}
+
+} // end of namespace android
+#endif //end of defined(MTK_SPEAKER_MONITOR_SUPPORT)
diff --git a/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSAPlaybackHandlerSphDL.cpp b/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSAPlaybackHandlerSphDL.cpp
new file mode 100644
index 0000000..18fb5b9
--- /dev/null
+++ b/mediatek/platform/mt6595/hardware/audio/aud_drv/AudioALSAPlaybackHandlerSphDL.cpp
@@ -0,0 +1,258 @@
+#include "AudioALSAPlaybackHandlerSphDL.h"
+
+#include "AudioALSAHardwareResourceManager.h"
+
+#include "AudioMTKFilter.h"
+#include "AudioALSADeviceParser.h"
+#if defined(MTK_SPEAKER_MONITOR_SUPPORT)
+#include "AudioALSASpeakerMonitor.h"
+#endif
+#include "AudioALSADriverUtility.h"
+#ifdef MTK_DYNAMIC_CHANGE_HAL_BUFFER_SIZE
+#include "AudioDef.h"
+#endif
+
+
+#define LOG_TAG "AudioALSAPlaybackHandlerSphDL"
+
+//#define DEBUG_LATENCY
+#define calc_time_diff(x,y) ((x.tv_sec - y.tv_sec )+ (double)( x.tv_nsec - y.tv_nsec ) / (double)1000000000)
+
+namespace android
+{
+
+AudioALSAPlaybackHandlerSphDL::AudioALSAPlaybackHandlerSphDL(const stream_attribute_t *stream_attribute_source) :
+    AudioALSAPlaybackHandlerNormal(stream_attribute_source)
+{
+    ALOGD("%s()", __FUNCTION__);
+    mPlaybackHandlerType = PLAYBACK_HANDLER_NORMAL;
+    mMixer = AudioALSADriverUtility::getInstance()->getMixer();
+}
+
+
+AudioALSAPlaybackHandlerSphDL::~AudioALSAPlaybackHandlerSphDL()
+{
+    ALOGD("%s()", __FUNCTION__);
+}
+
+
+status_t AudioALSAPlaybackHandlerSphDL::open()
+{
+    ALOGD("+%s(), mDevice = 0x%x", __FUNCTION__, mStreamAttributeSource->output_devices);
+    // debug pcm dump
+    OpenPCMDump(LOG_TAG);
+    //Echo reference path
+    if (mixer_ctl_set_enum_by_string(mixer_get_ctl_by_name(mMixer, "Audio_Dl1_MD_Echo_Ref_Switch"), "On"))
+    {
+        ALOGE("Error: Audio_Dl1_MD_Echo_Ref_Switch invalid value");
+    }
+    int pcmindex = AudioALSADeviceParser::getInstance()->GetPcmIndexByString(keypcmI2S0Dl1Playback);
+    int cardindex = AudioALSADeviceParser::getInstance()->GetCardIndexByString(keypcmI2S0Dl1Playback);
+    ALOGD("AudioALSAPlaybackHandlerSphDL::open() pcmindex = %d", pcmindex);
+    ListPcmDriver(cardindex, pcmindex);
+
+    struct pcm_params *params;
+    params = pcm_params_get(cardindex, pcmindex,  PCM_OUT);
+    if (params == NULL)
+    {
+        ALOGD("Device does not exist.\n");
+    }
+    mStreamAttributeTarget.buffer_size = pcm_params_get_max(params, PCM_PARAM_BUFFER_BYTES);
+    ALOGD("buffersizemax = %d", mStreamAttributeTarget.buffer_size);
+    pcm_params_free(params);
+
+
+    // HW attribute config // TODO(Harvey): query this
+    mStreamAttributeTarget.audio_format = AUDIO_FORMAT_PCM_16_BIT;
+    mStreamAttributeTarget.audio_channel_mask = AUDIO_CHANNEL_IN_MONO;
+    mStreamAttributeTarget.num_channels = android_audio_legacy::AudioSystem::popCount(mStreamAttributeTarget.audio_channel_mask);
+    mStreamAttributeTarget.sample_rate = mStreamAttributeSource->sample_rate; // same as source stream
+
+
+    // HW pcm config
+    mConfig.channels = mStreamAttributeTarget.num_channels;
+    mConfig.rate = mStreamAttributeTarget.sample_rate;
+
+    // Buffer size: 1536(period_size) * 2(ch) * 4(byte) * 2(period_count) = 24 kb
+
+    mConfig.period_count = 4;
+    mConfig.period_size = 512;
+
+    mConfig.format = transferAudioFormatToPcmFormat(mStreamAttributeTarget.audio_format);
+
+    mConfig.start_threshold = 0;
+    mConfig.stop_threshold = 0;
+    mConfig.silence_threshold = 0;
+    ALOGD("%s(), mConfig: channels = %d, rate = %d, period_size = %d, period_count = %d, format = %d",
+          __FUNCTION__, mConfig.channels, mConfig.rate, mConfig.period_size, mConfig.period_count, mConfig.format);
+
+
+    // post processing
+    initPostProcessing();
+
+#if defined(MTK_SPEAKER_MONITOR_SUPPORT)
+    unsigned int fc, bw;
+    int th;
+    if (mAudioFilterManagerHandler)
+    {
+        AudioALSASpeakerMonitor::getInstance()->GetFilterParam(&fc, &bw, &th);
+        ALOGD("%s(), fc %d bw %d, th %d", __FUNCTION__, fc, bw, th);
+        mAudioFilterManagerHandler->setSpkFilterParam(fc, bw, th);
+    }
+#endif
+
+    // SRC
+    initBliSrc();
+
+
+    // bit conversion
+    initBitConverter();
+
+
+    // open codec driver
+    mHardwareResourceManager->startOutputDevice(mStreamAttributeSource->output_devices, mStreamAttributeTarget.sample_rate);
+
+    // open pcm driver
+    openPcmDriver(pcmindex);
+
+    ALOGD("-%s()", __FUNCTION__);
+    return NO_ERROR;
+}
+
+
+status_t AudioALSAPlaybackHandlerSphDL::close()
+{
+    ALOGD("+%s()", __FUNCTION__);
+
+    // close codec driver
+    mHardwareResourceManager->stopOutputDevice();
+
+    //Echo reference path
+    if (mixer_ctl_set_enum_by_string(mixer_get_ctl_by_name(mMixer, "Audio_Dl1_MD_Echo_Ref_Switch"), "Off"))
+    {
+        ALOGE("Error: Audio_Dl1_MD_Echo_Ref_Switch invalid value");
+    }
+
+    // close pcm driver
+    closePcmDriver();
+
+
+    // bit conversion
+    deinitBitConverter();
+
+
+    // SRC
+    deinitBliSrc();
+
+
+    // post processing
+    deinitPostProcessing();
+
+
+    // debug pcm dump
+    ClosePCMDump();
+
+
+    ALOGD("-%s()", __FUNCTION__);
+    return NO_ERROR;
+}
+
+
+status_t AudioALSAPlaybackHandlerSphDL::routing(const audio_devices_t output_devices)
+{
+    mHardwareResourceManager->changeOutputDevice(output_devices);
+    if (mAudioFilterManagerHandler) { mAudioFilterManagerHandler->setDevice(output_devices); }
+    return NO_ERROR;
+}
+
+status_t AudioALSAPlaybackHandlerSphDL::setLowLatencyMode(bool mode, bool bforce)
+{
+    return NO_ERROR;
+}
+
+ssize_t AudioALSAPlaybackHandlerSphDL::write(const void *buffer, size_t bytes)
+{
+    ALOGV("%s(), buffer = %p, bytes = %d", __FUNCTION__, buffer, bytes);
+
+    if (mPcm == NULL)
+    {
+        ALOGE("%s(), mPcm == NULL, return", __FUNCTION__);
+        return bytes;
+    }
+
+    // const -> to non const
+    void *pBuffer = const_cast<void *>(buffer);
+    ASSERT(pBuffer != NULL);
+
+#ifdef DEBUG_LATENCY
+    clock_gettime(CLOCK_REALTIME, &mNewtime);
+    latencyTime[0] = calc_time_diff(mNewtime, mOldtime);
+    mOldtime = mNewtime;
+#endif
+
+    // stereo to mono for speaker
+    if (mStreamAttributeSource->audio_format == AUDIO_FORMAT_PCM_16_BIT) // AudioMixer will perform stereo to mono when 32-bit
+    {
+        doStereoToMonoConversionIfNeed(pBuffer, bytes);
+    }
+
+
+    // post processing (can handle both Q1P16 and Q1P31 by audio_format_t)
+    void *pBufferAfterPostProcessing = NULL;
+    uint32_t bytesAfterPostProcessing = 0;
+    doPostProcessing(pBuffer, bytes, &pBufferAfterPostProcessing, &bytesAfterPostProcessing);
+
+
+    // SRC
+    void *pBufferAfterBliSrc = NULL;
+    uint32_t bytesAfterBliSrc = 0;
+    doBliSrc(pBufferAfterPostProcessing, bytesAfterPostProcessing, &pBufferAfterBliSrc, &bytesAfterBliSrc);
+
+
+    // bit conversion
+    void *pBufferAfterBitConvertion = NULL;
+    uint32_t bytesAfterBitConvertion = 0;
+    doBitConversion(pBufferAfterBliSrc, bytesAfterBliSrc, &pBufferAfterBitConvertion, &bytesAfterBitConvertion);
+
+
+    // pcm dump
+    WritePcmDumpData(pBufferAfterBitConvertion, bytesAfterBitConvertion);
+
+#ifdef DEBUG_LATENCY
+    clock_gettime(CLOCK_REALTIME, &mNewtime);
+    latencyTime[1] = calc_time_diff(mNewtime, mOldtime);
+    mOldtime = mNewtime;
+#endif
+
+    // write data to pcm driver
+    int retval = pcm_write(mPcm, pBufferAfterBitConvertion, bytesAfterBitConvertion);
+
+#ifdef DEBUG_LATENCY
+    clock_gettime(CLOCK_REALTIME, &mNewtime);
+    latencyTime[2] = calc_time_diff(mNewtime, mOldtime);
+    mOldtime = mNewtime;
+#endif
+
+    if (retval != 0)
+    {
+        ALOGE("%s(), pcm_write() error, retval = %d", __FUNCTION__, retval);
+    }
+
+#ifdef DEBUG_LATENCY
+    ALOGD("AudioALSAPlaybackHandlerSphDL::write (-) latency_in_us,%1.6lf,%1.6lf,%1.6lf", latencyTime[0], latencyTime[1], latencyTime[2]);
+#endif
+
+    return bytes;
+}
+
+
+status_t AudioALSAPlaybackHandlerSphDL::setFilterMng(AudioMTKFilterManager *pFilterMng)
+{
+    ALOGD("+%s() mAudioFilterManagerHandler [0x%x]", __FUNCTION__, pFilterMng);
+    mAudioFilterManagerHandler = pFilterMng;
+    ALOGD("-%s()", __FUNCTION__);
+    return NO_ERROR;
+}
+
+
+} // end of namespace android
diff --git a/mediatek/platform/mt6595/hardware/audio/include/AudioALSACaptureDataProviderModemDai.h b/mediatek/platform/mt6595/hardware/audio/include/AudioALSACaptureDataProviderModemDai.h
new file mode 100644
index 0000000..3dbb3ce
--- /dev/null
+++ b/mediatek/platform/mt6595/hardware/audio/include/AudioALSACaptureDataProviderModemDai.h
@@ -0,0 +1,46 @@
+#ifndef ANDROID_AUDIO_ALSA_CAPTURE_DATA_PROVIDER_MODEM_DAI_H
+#define ANDROID_AUDIO_ALSA_CAPTURE_DATA_PROVIDER_MODEM_DAI_H
+
+#include "AudioALSACaptureDataProviderBase.h"
+
+namespace android
+{
+
+class AudioALSACaptureDataProviderModemDai : public AudioALSACaptureDataProviderBase
+{
+    public:
+        virtual ~AudioALSACaptureDataProviderModemDai();
+
+        static AudioALSACaptureDataProviderModemDai *getInstance();
+
+        /**
+         * open/close pcm interface when 1st attach & the last detach
+         */
+        status_t open();
+        status_t close();
+
+
+
+    protected:
+        AudioALSACaptureDataProviderModemDai();
+
+
+
+    private:
+        /**
+         * singleton pattern
+         */
+        static AudioALSACaptureDataProviderModemDai *mAudioALSACaptureDataProviderModemDai;
+
+
+        /**
+         * pcm read thread
+         */
+        static void *readThread(void *arg);
+        pthread_t hReadThread;
+
+};
+
+} // end namespace android
+
+#endif // end of ANDROID_AUDIO_ALSA_CAPTURE_DATA_PROVIDER_MODEM_DAI_H
\ No newline at end of file
diff --git a/mediatek/platform/mt6595/hardware/audio/include/AudioALSACaptureHandlerModemDai.h b/mediatek/platform/mt6595/hardware/audio/include/AudioALSACaptureHandlerModemDai.h
new file mode 100644
index 0000000..8ecdf41
--- /dev/null
+++ b/mediatek/platform/mt6595/hardware/audio/include/AudioALSACaptureHandlerModemDai.h
@@ -0,0 +1,38 @@
+#ifndef ANDROID_AUDIO_ALSA_CAPTURE_HANDLER_MODEM_DAI_H
+#define ANDROID_AUDIO_ALSA_CAPTURE_HANDLER_MODEM_DAI_H
+
+#include "AudioALSACaptureHandlerBase.h"
+
+namespace android
+{
+
+class AudioALSACaptureHandlerModemDai : public AudioALSACaptureHandlerBase
+{
+    public:
+        AudioALSACaptureHandlerModemDai(stream_attribute_t *stream_attribute_target);
+        virtual ~AudioALSACaptureHandlerModemDai();
+
+        /**
+         * open/close audio hardware
+         */
+        virtual status_t open();
+        virtual status_t close();
+        virtual status_t routing(const audio_devices_t input_device);
+
+
+        /**
+         * read data from audio hardware
+         */
+        virtual ssize_t  read(void *buffer, ssize_t bytes);
+
+    protected:
+        /**
+         * init audio hardware
+         */
+        virtual status_t init();
+    private:
+};
+
+} // end namespace android
+
+#endif // end of ANDROID_AUDIO_ALSA_CAPTURE_HANDLER_MODEM_DAI_H
diff --git a/mediatek/platform/mt6595/hardware/audio/include/AudioALSAPlaybackHandlerSphDL.h b/mediatek/platform/mt6595/hardware/audio/include/AudioALSAPlaybackHandlerSphDL.h
new file mode 100644
index 0000000..ff44b78
--- /dev/null
+++ b/mediatek/platform/mt6595/hardware/audio/include/AudioALSAPlaybackHandlerSphDL.h
@@ -0,0 +1,47 @@
+#ifndef ANDROID_AUDIO_ALSA_PLAYBACK_HANDLER_SPEECH_DL_H
+#define ANDROID_AUDIO_ALSA_PLAYBACK_HANDLER_SPEECH_DL_H
+
+#include "AudioALSAPlaybackHandlerBase.h"
+#include "AudioALSAPlaybackHandlerNormal.h"
+#include <tinyalsa/asoundlib.h>
+
+namespace android
+{
+
+class AudioALSAPlaybackHandlerSphDL : public AudioALSAPlaybackHandlerNormal
+{
+    public:
+        AudioALSAPlaybackHandlerSphDL(const stream_attribute_t *stream_attribute_source);
+        virtual ~AudioALSAPlaybackHandlerSphDL();
+
+
+        /**
+         * open/close audio hardware
+         */
+        virtual status_t open();
+        virtual status_t close();
+        virtual status_t routing(const audio_devices_t output_devices);
+
+
+        /**
+         * write data to audio hardware
+         */
+        virtual ssize_t  write(const void *buffer, size_t bytes);
+
+        virtual status_t setFilterMng(AudioMTKFilterManager *pFilterMng);
+
+
+        /**
+         * low latency
+         */
+        virtual status_t setLowLatencyMode(bool mode,bool bforce = false);
+		
+    private:
+        struct timespec mNewtime, mOldtime;
+        double latencyTime[3];
+        struct mixer *mMixer;
+};
+
+} // end namespace android
+
+#endif // end of ANDROID_AUDIO_ALSA_PLAYBACK_HANDLER_NORMAL_H
diff --git a/mediatek/platform/mt6595/hardware/audio/include/AudioALSASpeechStreamController.h b/mediatek/platform/mt6595/hardware/audio/include/AudioALSASpeechStreamController.h
new file mode 100644
index 0000000..a2ec676
--- /dev/null
+++ b/mediatek/platform/mt6595/hardware/audio/include/AudioALSASpeechStreamController.h
@@ -0,0 +1,55 @@
+#ifndef ANDROID_AUDIO_ALSA_SPEECH_STREAM_CONTROLLER_H
+#define ANDROID_AUDIO_ALSA_SPEECH_STREAM_CONTROLLER_H
+
+#include <utils/threads.h>
+#include "AudioType.h"
+#include "AudioLock.h"
+#include "AudioALSAStreamManager.h"
+
+namespace android
+{
+class AudioALSAHardwareResourceManager;
+class AudioALSAStreamOut;
+class AudioALSAStreamIn;
+
+class AudioALSASpeechStreamController
+{
+    public:
+        virtual ~AudioALSASpeechStreamController();
+        status_t EnableSpeechStreamThread(bool enable);
+        AudioALSAStreamManager *getStreamManager() {return mAudioMtkStreamManager;}
+        bool IsSpeechStreamThreadEnable(void);
+        pthread_mutex_t mSpeechStreamMutex;
+        pthread_cond_t mSphStream_Cond, mSpkMonitorActivate_Cond;
+        bool m_bThreadExit;
+        bool m_bEnabled;
+        static AudioALSASpeechStreamController *getInstance();
+        audio_devices_t GetStreamOutputDevice(void);
+        status_t SetStreamOutputDevice(audio_devices_t OutputDevices);
+
+    protected:
+        AudioALSASpeechStreamController();
+
+        AudioALSAHardwareResourceManager *mHardwareResourceManager;
+        
+        AudioLock               mLock;
+
+        audio_mode_t            mAudioMode;
+        
+        audio_devices_t         mRoutingForTty;
+
+        struct pcm *mPcmIn;
+        struct pcm *mPcmOut;
+
+    private:
+        AudioALSAStreamManager *mAudioMtkStreamManager;
+        pthread_t mSpeechStreamThreadID;
+        static AudioALSASpeechStreamController *UniqueInstance; // singleton
+        static void *SpeechStreamThread(void *arg);
+        audio_devices_t mOutputDevices;
+
+};
+
+} // end namespace android
+
+#endif // end of ANDROID_AUDIO_ALSA_SPEECH_PHONE_CALL_CONTROLLER_H
diff --git a/mediatek/platform/mt6595/hardware/audio/speech_driver/AudioALSASpeechStreamController.cpp b/mediatek/platform/mt6595/hardware/audio/speech_driver/AudioALSASpeechStreamController.cpp
new file mode 100644
index 0000000..4568274
--- /dev/null
+++ b/mediatek/platform/mt6595/hardware/audio/speech_driver/AudioALSASpeechStreamController.cpp
@@ -0,0 +1,220 @@
+
+#if defined(MTK_SPEAKER_MONITOR_SPEECH_SUPPORT)
+#include <unistd.h>
+#include <sched.h>
+#include <sys/prctl.h>
+#include <stdint.h>
+#include <sys/types.h>
+#include <sys/resource.h>
+#include <media/AudioSystem.h>
+#include <cutils/properties.h>
+#include <cutils/xlog.h>
+#include "AudioALSAHardwareResourceManager.h"
+
+#include "SpeechDriverInterface.h"
+#include "SpeechDriverFactory.h"
+#include "AudioALSAStreamOut.h"
+#include "AudioALSAStreamIn.h"
+#include "AudioALSASpeechStreamController.h"
+#define LOG_TAG "AudioALSASpeechStreamController"
+
+#define PROCESS_BLOCK_SIZE 512
+#define READ_STREAM_LENGTH (PROCESS_BLOCK_SIZE * 2)
+namespace android
+{
+
+/*==============================================================================
+ *                     Property keys
+ *============================================================================*/
+AudioALSASpeechStreamController *AudioALSASpeechStreamController::UniqueInstance = NULL;
+AudioALSASpeechStreamController *AudioALSASpeechStreamController::getInstance()
+{
+    static AudioLock mGetInstanceLock;
+    AudioAutoTimeoutLock _l(mGetInstanceLock);
+
+    if (UniqueInstance == NULL)
+    {
+        UniqueInstance = new AudioALSASpeechStreamController();
+    }
+    ASSERT(UniqueInstance != NULL);
+    return UniqueInstance;
+}
+
+AudioALSASpeechStreamController::AudioALSASpeechStreamController()
+{
+    int ret;
+    ALOGD("%s()", __FUNCTION__);
+    
+    m_bEnabled = false;
+    m_bThreadExit = false;
+    mOutputDevices = AUDIO_DEVICE_NONE;
+    
+    mAudioMtkStreamManager = AudioALSAStreamManager::getInstance();
+    
+    ret = pthread_mutex_init(&mSpeechStreamMutex, NULL);
+    if (ret != 0)
+    {
+        SXLOGE("Failed to initialize mSpeechStreamMutex!");
+    }
+
+    ret = pthread_cond_init(&mSphStream_Cond, NULL);
+    if (ret != 0)
+    {
+        SXLOGE("Failed to initialize mSphStream_Cond!");
+    }
+}
+
+AudioALSASpeechStreamController::~AudioALSASpeechStreamController()
+{
+    ALOGD("%s()", __FUNCTION__);
+    pthread_cond_destroy(&mSphStream_Cond);
+}
+
+void *AudioALSASpeechStreamController::SpeechStreamThread(void *arg)
+{
+    SXLOGD("%s() +", __FUNCTION__);
+    uint32_t device = AUDIO_DEVICE_IN_BUILTIN_MIC;
+    status_t status = 0;
+    int format = AUDIO_FORMAT_PCM_16_BIT;
+    uint32_t channel = AUDIO_CHANNEL_IN_STEREO;
+    uint32_t sampleRate = 48000;
+    short readBuffer[PROCESS_BLOCK_SIZE];//for record
+    char *pReadBuffer = (char *)readBuffer;
+    int nRead = 0;
+    memset(pReadBuffer, 0, sizeof(short)*PROCESS_BLOCK_SIZE);
+    android_audio_legacy::AudioStreamIn *streamInput = NULL;
+    android_audio_legacy::AudioStreamOut *streamOutput = NULL;
+    AudioALSASpeechStreamController *pSphStrmCtrl = static_cast<AudioALSASpeechStreamController *>(arg);
+    if(pSphStrmCtrl == NULL) {
+        SXLOGE("SpeechStreamThread pSphStrmCtrl = NULL arg = %x", arg);
+        return 0;
+    }
+    pthread_mutex_lock(&pSphStrmCtrl->mSpeechStreamMutex);
+    pSphStrmCtrl->m_bThreadExit = false;
+    // Adjust thread priority
+    prctl(PR_SET_NAME, (unsigned long)"SpeechStreamThread", 0, 0, 0);
+    setpriority(PRIO_PROCESS, 0, ANDROID_PRIORITY_AUDIO);
+
+    // ----start the loop --------
+    ALOGD("+%s(), pid: %d, tid: %d", __FUNCTION__, getpid(), gettid());
+    streamInput = pSphStrmCtrl->getStreamManager()->openInputStream(device, &format, &channel, &sampleRate, &status, (android_audio_legacy::AudioSystem::audio_in_acoustics)0);
+    ASSERT(streamInput != NULL);
+    streamInput->setParameters(String8("MOD_DAI_INPUT=1"));
+    device = AUDIO_DEVICE_OUT_SPEAKER;
+    channel = AUDIO_CHANNEL_OUT_STEREO;
+    streamOutput = pSphStrmCtrl->getStreamManager()->openOutputStream(device, &format, &channel, &sampleRate, &status);
+    ASSERT(streamOutput != NULL);
+    streamOutput->setParameters(String8("SPH_DL_OUTPUT=1"));
+    
+    SXLOGD("pthread_cond_signal(&pSpkMonitor->mSpkMonitor_Cond)");
+    pthread_cond_signal(&pSphStrmCtrl->mSphStream_Cond); // wake all thread
+    pthread_mutex_unlock(&pSphStrmCtrl->mSpeechStreamMutex);
+    SXLOGD("%s() loop start", __FUNCTION__);
+    streamOutput->write(pReadBuffer, READ_STREAM_LENGTH);//Write silent data
+    //streamOutput->write(pReadBuffer, READ_STREAM_LENGTH);
+    //streamOutput->write(pReadBuffer, READ_STREAM_LENGTH);
+    //streamOutput->write(pReadBuffer, READ_STREAM_LENGTH);
+    
+    while(pSphStrmCtrl->m_bEnabled && pSphStrmCtrl->m_bThreadExit == false) {
+        if(streamInput!= NULL)
+        {
+            nRead = streamInput->read(pReadBuffer, READ_STREAM_LENGTH);
+            SXLOGD("streamin read %d", nRead);
+            if(streamOutput != NULL && pSphStrmCtrl->m_bEnabled == true && pSphStrmCtrl->m_bThreadExit == false)
+            {
+                streamOutput->write(pReadBuffer, nRead);
+            }
+        }
+    }
+    SXLOGD("%s() loop end", __FUNCTION__);
+     
+    //exit thread
+    if(streamOutput != NULL)
+    {
+        streamOutput->standby();
+        pSphStrmCtrl->getStreamManager()->closeOutputStream(streamOutput);
+        streamOutput = NULL;
+    }
+    if(streamInput != NULL)
+    {
+        streamInput->standby();
+        pSphStrmCtrl->getStreamManager()->closeInputStream(streamInput);
+        streamInput = NULL;
+    }
+    
+    ALOGD("-%s(), pid: %d, tid: %d", __FUNCTION__, getpid(), gettid());
+    //exit thread
+    pthread_mutex_lock(&pSphStrmCtrl->mSpeechStreamMutex);
+    SXLOGD("pthread_cond_signal(&pSphStrmCtrl->mSpkMonitor_Cond)");
+    pthread_cond_signal(&pSphStrmCtrl->mSphStream_Cond); // wake all thread
+    pthread_mutex_unlock(&pSphStrmCtrl->mSpeechStreamMutex);
+    pthread_exit(NULL);
+    return 0;
+}
+
+audio_devices_t AudioALSASpeechStreamController::GetStreamOutputDevice(void)
+{
+    return mOutputDevices;
+}
+
+status_t AudioALSASpeechStreamController::SetStreamOutputDevice(audio_devices_t OutputDevices)
+{
+    ALOGD("%s(), %d", __FUNCTION__, OutputDevices);
+    mOutputDevices = OutputDevices;
+    return NO_ERROR;
+}
+
+bool AudioALSASpeechStreamController::IsSpeechStreamThreadEnable(void)
+{
+    ALOGD("%s(), %d", __FUNCTION__, m_bEnabled);
+    return m_bEnabled;
+}
+
+status_t AudioALSASpeechStreamController::EnableSpeechStreamThread(bool enable)
+{
+    struct timeval now;
+    struct timespec timeout;
+    gettimeofday(&now, NULL);
+    timeout.tv_sec = now.tv_sec + 3;
+    timeout.tv_nsec = now.tv_usec * 1000;
+    int ret;
+    ALOGD("%s() %d", __FUNCTION__, enable);
+    
+    if(enable == true && m_bEnabled == false)
+    {
+        ALOGD("open SpeechStreamThread");
+        pthread_mutex_lock(&mSpeechStreamMutex);
+        ret = pthread_create(&mSpeechStreamThreadID, NULL, AudioALSASpeechStreamController::SpeechStreamThread, (void *)this);
+        if (ret != 0)
+        {
+            ALOGE("EnableSpeechStreamThread pthread_create error!!");
+        }
+
+        ALOGD("+mSphStream_Cond wait");
+        m_bEnabled = true;
+        ret = pthread_cond_timedwait(&mSphStream_Cond, &mSpeechStreamMutex, &timeout);
+        ALOGD("-mSphStream_Cond receive ret=%d", ret);
+        
+        pthread_mutex_unlock(&mSpeechStreamMutex);
+        
+    }
+    else if(enable == false && m_bEnabled == true)
+    { 
+        //stop thread
+        ALOGD("close SpeechStreamThread");
+        pthread_mutex_lock(&mSpeechStreamMutex);
+        if (!m_bThreadExit)
+        {
+            m_bThreadExit = true;
+            ALOGD("+mSphStream_Cond wait");
+            ret = pthread_cond_timedwait(&mSphStream_Cond, &mSpeechStreamMutex, &timeout);
+            ALOGD("-mSphStream_Cond receive ret=%d", ret);
+        }
+        m_bEnabled = false;
+        pthread_mutex_unlock(&mSpeechStreamMutex);
+    }
+    return NO_ERROR;
+}
+
+} // end of namespace android
+#endif //MTK_SPEAKER_MONITOR_SPEECH_SUPPORT
\ No newline at end of file
-- 
1.9.1

