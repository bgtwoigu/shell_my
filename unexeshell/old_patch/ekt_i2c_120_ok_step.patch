diff --git a/mediatek/custom/common/kernel/touchpanel/ektf2k/ektf2k_driver.c b/mediatek/custom/common/kernel/touchpanel/ektf2k/ektf2k_driver.c
index ab90534..dfe3637 100755
--- a/mediatek/custom/common/kernel/touchpanel/ektf2k/ektf2k_driver.c
+++ b/mediatek/custom/common/kernel/touchpanel/ektf2k/ektf2k_driver.c
@@ -37,13 +37,28 @@ static int tpd_calmat_local[8]     = TPD_CALIBRATION_MATRIX;
 static int tpd_def_calmat_local[8] = TPD_CALIBRATION_MATRIX;
 #endif
 
+#define MTK_ELAN_DEBUG
 #ifdef MTK_ELAN_DEBUG
-#define MTK_TP_DEBUG(fmt, args ...) printk("Elan: %5d: " fmt, __LINE__,##args)
+static int ekt_debug = 0,  ekt_debug_in = 0, man_made = 0;
+module_param(ekt_debug, int, 00664);
+module_param(man_made, int, 00664);
+#define MTK_TP_DEBUG(fmt, args ...) \
+do { \
+	if (ekt_debug || ekt_debug_in) { \
+		printk("Elan: %5d: " fmt, __LINE__,##args); \
+	} \
+} while(0)
 #else
 #define MTK_TP_DEBUG(fmt, args ...)
 #endif
-
-
+//below add for reflush IC
+#ifdef _DMA_MODE_
+#define NEED_FLUSH_DMA 150
+#endif
+#define NEED_RESET_IC 200
+static unsigned int err_buf_times = 0;
+static unsigned int dma_alloc_err = 0;
+//end add for reflush IC
 #ifdef TPD_HAVE_BUTTON
 #define TPD_BUTTON_HEIGH                100
 #define TPD_KEY_COUNT           2
@@ -1208,8 +1223,11 @@ static int elan_ktf2k_ts_recv_data(struct i2c_client *client, uint8_t *buf)
     uint8_t *pReadData = 0;
     unsigned short addr = 0;
 
-    if (buf == NULL)
-        return -EINVAL;
+    if ((buf == NULL) || (dma_alloc_err == 1))
+	{
+		printk("----------%s:[%d]------\n", __func__, __LINE__);
+		return -EINVAL;
+	}
     memset(buf, 0, bytes_to_recv);
 
 #ifdef _DMA_MODE_
@@ -1220,8 +1238,10 @@ static int elan_ktf2k_ts_recv_data(struct i2c_client *client, uint8_t *buf)
     {
         printk("mtk-tpd:[elan] dma_alloc_coherent failed!\n");
     }
+	MTK_TP_DEBUG("----%s:[%d]----\n", __func__, __LINE__);
     rc = i2c_master_recv(client, gpDMABuf_pa, bytes_to_recv);
     copy_to_user(buf, pReadData, bytes_to_recv);
+	MTK_TP_DEBUG("----%s:[%d]----\n", __func__, __LINE__);
     client->addr = addr;
 #ifdef ELAN_DEBUG
     MTK_TP_DEBUG("[elan_debug] %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\n", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7],buf[8], buf[9], buf[10], buf[11], buf[12], buf[13], buf[14], buf[15],buf[16], buf[17]);
@@ -1238,7 +1258,7 @@ static int elan_ktf2k_ts_recv_data(struct i2c_client *client, uint8_t *buf)
     if (rc != 8)
         printk("mtk-tpd:[elan_debug] The first package error.\n");
     MTK_TP_DEBUG("[elan_recv] %x %x %x %x %x %x %x %x\n", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
-    msleep(1);
+   // msleep(1);
 
     if (buf[0] == MTK_FINGERS_PKT)             //for mtk five finger
     {
@@ -1283,6 +1303,48 @@ static int elan_ktf2k_ts_recv_data(struct i2c_client *client, uint8_t *buf)
     }
 #endif
 #endif
+	//below add for reflush IC
+	if ((buf[0] != 0 && buf[0] != 120 && buf[0] != 90) || (man_made != 0))
+	{
+		printk("-----%s:[%d]----err comming ----err_buf_times = %d\n", __func__, __LINE__, err_buf_times);
+		ekt_debug_in = 1; //fisrt open debug info
+		err_buf_times++;
+	#ifdef _DMA_MODE_
+		if (err_buf_times == NEED_FLUSH_DMA)
+		{
+			printk("reason one: DMA err, alloc new DMA -----%s:[%d]----\n",  __func__, __LINE__);
+			dma_free_coherent(NULL, 4096, gpDMABuf_va, gpDMABuf_pa);//free old
+			gpDMABuf_va = NULL;
+			gpDMABuf_pa = NULL;
+			msleep(10);
+			printk("reason one: DMA err, alloc new DMA -----%s:[%d]----\n",  __func__, __LINE__);
+			gpDMABuf_va = (u8 *)dma_alloc_writecombine(NULL, 4096, &gpDMABuf_pa, GFP_KERNEL);
+			if (!gpDMABuf_va){
+				printk("reason one: DMA err, alloc failed -----%s:[%d]----\n",  __func__, __LINE__);
+				dma_alloc_err = 1;
+			}
+			printk("reason one: DMA err, alloc new DMA ok -----%s:[%d]----\n",  __func__, __LINE__);
+		}
+	#endif
+		if (err_buf_times == NEED_RESET_IC)
+		{
+			printk("-----%s:[%d] need reset IC----\n", __func__, __LINE__);
+			// Reset Touch Pannel
+			mt_set_gpio_mode( GPIO_CTP_RST_PIN, GPIO_CTP_RST_PIN_M_GPIO );
+			mt_set_gpio_dir( GPIO_CTP_RST_PIN, GPIO_DIR_OUT );
+			mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ZERO);
+			msleep(50);
+			mt_set_gpio_out( GPIO_CTP_RST_PIN, GPIO_OUT_ONE );
+			msleep(300);
+			// End Reset Touch Pannel
+			err_buf_times = 0;
+		}
+	}else{
+		ekt_debug_in = 0; //close debug info
+	} 
+
+
+	//end reflush IC
 
     return rc;
 }
@@ -1936,7 +1998,7 @@ static int touch_event_handler(void *unused)
     do
     {
         mt_eint_unmask(CUST_EINT_TOUCH_PANEL_NUM);
-        MTK_TP_DEBUG("mtk-tpd touch_event_handler mt_eint_unmask\n");
+        MTK_TP_DEBUG("mtk-tpd touch_event_handler mt_eint_unmask tpd_flag = %d\n", tpd_flag);
         set_current_state(TASK_INTERRUPTIBLE);
         wait_event_interruptible(waiter, tpd_flag != 0);
         tpd_flag = 0;
@@ -1947,7 +2009,7 @@ static int touch_event_handler(void *unused)
 
         if (rc < 0)
         {
-            printk("mtk-tpd:[elan] rc<0\n");
+            printk("mtk-tpd:[elan] rc<0 rc = %d\n", rc);
 
             continue;
         }
